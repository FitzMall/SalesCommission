@model SalesCommission.Models.CommissionModel

@{
    ViewBag.Title = "Commissions Dashboard";
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.CurrencySymbol = "";
    nfi.PercentSymbol = "";

    System.Globalization.NumberFormatInfo rev = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    rev.CurrencyDecimalDigits = 0;
    rev.PercentDecimalDigits = 1;
}

<style type="text/css">
    .table thead>tr>th, .table tbody>tr>th, .table tfoot>tr>th, .table thead>tr>td, .table tbody>tr>td, .table tfoot>tr>td
    {
        padding:6px;
    }

    @@media print {
        .jumbotron {
            display:none;
        }
        
        a[href]:after {
            content: "";
        }

        .btn-primary{
            display:none;
        }
        
       .hide-print {
            display:none
        }

        @@page {size: portrait;}

}

</style>

<div class="jumbotron">
    <h1>Commissions Dashboard</h1>
    <div class="row">
        <div class="col-sm-8">
            <h3>Select a Store and Date:</h3>
        </div>
    </div>
    @using (Html.BeginForm())
            {
        <div class="row">
            <div class="col-sm-8">
                <div class="row">
                    <div class="col-sm-4">
                        @Html.DropDownListFor(n => n.StoreId, new SelectList(SalesCommission.Business.Enums.Stores, "StoreId", "Name"), "- Select a Store -", new { @class = "form-control form-inline" })
                    </div>
                    <div class="col-sm-3">
                        @Html.DropDownListFor(n => n.MonthId, new SelectList(SalesCommission.Business.Enums.Months, "MonthId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                    <div class="col-sm-3">
                        @Html.DropDownListFor(n => n.YearId, new SelectList(SalesCommission.Business.Enums.Years, "YearId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <button class="btn btn-primary" type="submit" value="submit" name="Submit">Submit</button>
                    </div>
                </div>
            </div>
        </div>


    }
</div>

@if (Model.Associates != null)
{
    var autoMallName = "";

    autoMallName = SalesCommission.Business.Enums.Stores.First(o => o.StoreId == Model.StoreId).Name;

    var departments = Model.Associates.Select(x => x.AssociateDepartment).Distinct().ToList();

    decimal StoreTotalUnits = 0;
    decimal StoreTotalValidatedUnits = 0;
    decimal StoreCommTotal = 0;

    decimal StoreTotalBonus = 0;
    decimal StoreCommSubTotal = 0;
    decimal StoreTotalHours = 0;
    decimal StoreTotalSalary = 0;
    decimal StoreTotalDraws = 0;
    decimal StoreTotalCommDue = 0;
    decimal StoreTotalBaseAmount = 0;
    decimal StoreTotalOverdraw = 0;
    decimal StoreTotalTraining = 0;

    int StoreTotalAssociateCount = 0;
    int StoreTotalOverdrawCount = 0;
    int StoreTotalTrainingCount = 0;

    <div class="row">
        <div class="col-md-8">
            <h3>Sales Associate Commissions for @autoMallName</h3>
        </div>
@if ((bool)Session["IsCommissionAdmin"] == true)
{
        <div class="col-md-2 text-right" style="margin-top:10px;">
            <input type="button" class="btn btn-primary" value="Print Summary" onclick="window.print();return false;" />
        </div>
        <div class="col-md-2 text-right" style="margin-top:10px;">
            <a href="@applicationPath/Commission/AllAssociates/@Model.StoreId/@Model.MonthId/@Model.YearId" class="btn btn-primary">View All Commissions</a>
        </div>
}
    </div>

    if (departments.Count > 1)
    {
        <div class="row">
            <div class="col-md-12" style="background-color:#d9edf7; padding:5px">
                <strong>Show Sales Teams:</strong>
                @foreach (var department in departments)
                {
                    var labelName = department;

                    try
                    {
                        labelName = Model.Associates.Find(x => x.AssociateDepartment == department).AssociateDepartmentDescription;
                    }
                    catch (Exception ex)
                    {
                        //do nothing
                    }

                    <label style="padding-left:10px;"><input type="checkbox" id="chk-@department" name="chk-@department" checked />@labelName</label>
                    <script>
                        $('#chk-@department').change(function () {
                                if (this.checked) {
                                    $('#table-@department').show();
                                    $('#header-@department').show();
                                }
                                else {
                                    $('#table-@department').hide();
                                    $('#header-@department').hide();
                                }
                            });
                    </script>


                }
            </div>
        </div>
    }


    <div class="row">
        @foreach (var department in departments)
        {

            decimal TotalUnits = 0;
            decimal TotalValidatedUnits = 0;
            decimal CommTotal = 0;

            decimal TotalBonus = 0;
            decimal CommSubTotal = 0;
            decimal TotalHours = 0;
            decimal TotalSalary = 0;
            decimal TotalDraws = 0;
            decimal TotalCommDue = 0;
            decimal TotalBaseAmount = 0;
            decimal TotalOverdraw = 0;
            decimal TotalTraining = 0;

            int TotalAssociateCount = 0;
            int TotalOverdrawCount = 0;
            int TotalTrainingCount = 0;

            var departmentAssociates = Model.Associates.FindAll(x => x.AssociateDepartment == department);
            var departmentName = department;

            if (departmentAssociates.Count > 0)
            {
                departmentName = departmentAssociates[0].AssociateDepartmentDescription;
            }

            <h3 id="header-@department">@departmentName</h3>
            <table class="table table-bordered table-striped" style="font-size:12px" id="table-@department">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th class="">Associate</th>
                        <th class="text-center">Hire Date</th>
                        <th class="text-center">Payscale</th>
                        <th class="text-center">Level</th>
                        <th class="text-center">Total<br />Units</th>
                        <th class="text-center">Units<br/>Val</th>
                        <th class="text-center">Comm Total</th>
                        <th class="text-center">Bonus</th>
                        <th class="text-center">Total Comm<br />Earned</th>

@if (Model.StoreId != "clearwater")
{
                        <th class="text-center">Hours</th>
                        <th class="text-center">Rate</th>
                        <th class="text-center">Min Wage Std</th>
}
                        <th class="text-center">Pay Amount</th>
                        <th class="text-center">Draws</th>
                        <th class="text-center">Amount Due</th>
                        <th class="text-center">Overdraw</th>
                        <th class="text-center">Training</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var associate in departmentAssociates)
                    {

                        var payscaleName = "";
                        var payLevelName = "";


                        foreach (var scale in SalesCommission.Business.Enums.Payscales)
                        {
                            if (associate.AssociatePayscale == scale.PayscaleID)
                            {
                                payscaleName = scale.Name;
                                break;
                            }
                        }

                        foreach (var level in SalesCommission.Business.Enums.PayLevels)
                        {
                            if (associate.AssociateLevel == level.PayLevelID)
                            {
                                payLevelName = level.Name;
                                break;
                            }
                        }

                        if (associate.AssociatePayscale == "LOWVOL")
                        {
                            associate.AssociatePayscale = "BASEVOL";
                        }


                        var status = "Not Saved";
                        var associateScorecards = SalesCommission.Business.SqlQueries.GetAssociateScoreCardHistoryByDate(associate.AssociateSSN, Model.YearId, Model.MonthId);
                        if (associateScorecards != null && associateScorecards.Count > 0)
                        {
                            var scorecard = associateScorecards[0];

                            if (scorecard.UpdateUser != null && scorecard.UpdateUser != "")
                            {
                                status = "Saved";
                            }
                            if (scorecard.FinalizeUser != null && scorecard.FinalizeUser != "")
                            {
                                status = "Finalized";
                            }
                            if (scorecard.ApprovalUser != null && scorecard.ApprovalUser != "")
                            {
                                status = "Approved";
                            }
                        }

                        <tr>
                            <td class="text-left">
                                <a href="@applicationPath/Commission/Associate/@associate.AssociateNumber.Trim()/@Model.MonthId/@Model.YearId">@associate.AssociateFullName</a><br />
                                <a class="hide-print" href="@applicationPath/Commission/ScoreCard/@associate.AssociateNumber.Trim()/@Model.MonthId/@Model.YearId">Score Card</a><br />
                                <a class="hide-print" data-toggle="collapse" id="Deals" style="cursor: pointer;" data-target="#collapse-@associate.AssociateSSN">Commission <i class="fa fa-caret-down" aria-hidden="true"></i></a>
                            </td>
                            <td class="text-center">@associate.AssociateHireDate.ToShortDateString()</td>
                            <td class="text-center">@associate.AssociatePayscale</td>
                            <td class="text-center">@payLevelName<br/><em>@status</em></td>
                            @*<td class="text-center">@associate.AssociateDeals.Count</td>*@
                            <td class="text-center">@associate.AssociateDealCounts.TotalDealCount</td>

                            @{
                                decimal commTotal = 0;
                                decimal bonusTotal = 0;
                                decimal commSubTotal = 0;
                                decimal totalHours = 0;
                                decimal rate = 0;
                                decimal salary = 0;
                                decimal draws = 0;
                                decimal commissionDue = 0;

                                // calculate draws
                                if (associate.AssociateDraws != null)
                                {
                                    foreach (var draw in associate.AssociateDraws)
                                    {
                                        draws += draw.DrawAmount;
                                    }
                                }
                                draws = (draws * -1);

                                //caclulate bonus
                                if (associate.AssociateBonus != null)
                                {
                                    foreach (var bonus in associate.AssociateBonus)
                                    {
                                        bonusTotal += bonus.BonusAmount;
                                    }
                                }

                                if (associate.AssociateHours != null && associate.AssociateHours.Count > 0)
                                {
                                    totalHours = associate.AssociateHours[0].Hours;
                                    rate = associate.AssociateWage;
                                    salary = Math.Round((totalHours * rate));
                                }


                                if (associate.AssociatePayscale == "MOCO")
                                {
                                    var datePlusFour = associate.AssociateHireDate.AddMonths(4);
                                    var lessThanDate = new DateTime(datePlusFour.Year, datePlusFour.Month, 1);

                                    // Have been here less than 3 full months and worked over 190 hours, so minimum is $2500
                                    if (DateTime.Now < lessThanDate && totalHours > 190)
                                    {
                                        if (salary < 2500)
                                        {
                                            salary = 2500;
                                        }
                                    }

                                }



                            }

                            <td class="text-center" id="@associate.AssociateSSN-validated">0</td>
                            <td class="text-center" id="@associate.AssociateSSN-commTotal">@commTotal</td>
                            <td class="text-center">@bonusTotal.ToString("C")</td>
                            <td class="text-center" id="@associate.AssociateSSN-commSubTotal">@commSubTotal</td>
                            
                            @if (associate.AssociatePayscale != "FL")
                            {
                                <td class="text-center">@totalHours</td>
                                <td class="text-center">@rate</td>
                                <td class="text-center">@salary.ToString("C")</td>
                            }
                            <td class="text-center" id="@associate.AssociateSSN-payDue">@commissionDue</td>
                            <td class="text-center" style="color:red;">@draws.ToString("C")</td>
                            <td class="text-center" id="@associate.AssociateSSN-commDue">@commissionDue</td>
                            <td class="text-center" style="color:red;" id="@associate.AssociateSSN-overdraw">@commissionDue</td>
                            <td class="text-center" style="color:red;" id="@associate.AssociateSSN-training"></td>

                            @{

                                TotalUnits += associate.AssociateDealCounts.TotalDealCount;
                                TotalBonus += bonusTotal;
                                TotalHours += totalHours;
                                TotalSalary += salary;
                                TotalDraws += draws;

                            }

                        </tr>
                        <tr id="collapse-@associate.AssociateSSN" class="collapse out" style="background-color:#f5f5f5;">
                            <td colspan="17">
                                <h4>@associate.AssociateLastName Commission</h4>

                                @if (associate.AssociateDeals != null)// && associate.AssociateDeals.Count > 0)
                                {
                                    <table class="table table-bordered table-striped" style="font-size:11px">
                                        <thead>
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-center"></th>
                                                <th class="text-center">Deal #</th>
                                                <th class="text-center"></th>
                                                <th class="text-center">Customer</th>
                                                <th class="text-center">Stk #</th>
                                                <th class="text-center">N/U</th>
                                                @*<th class="text-center">V/I</th>
                                                    <th class="text-center">Deal Count</th>*@
                                                <th class="text-center">&nbsp;</th>
                                                <th class="text-center">Comm</th>
                                                <th class="text-center">BPP</th>
                                                <th class="text-center">Trade</th>
                                                <th class="text-center">Fin Inc</th>
                                                <th class="text-center">VSC</th>
                                                <th class="text-center">Maint</th>
                                                <th class="text-center">
                                                    @if (associate.AssociatePayscale != "MOCO")
                                                    {
                                                        @:GAP
                            }
                                                </th>
                                                <th class="text-center">&nbsp;</th>
                                                <th class="text-center">After market</th>
                                                <th class="text-center">Manu. Spiff</th>
                                                <th class="text-center">
                                                    @if (associate.AssociatePayscale != "MOCO")
                                                    {
                                                        @:SSI
                            }
                                                </th>
                                                <th class="text-center">
                                                    @if (associate.AssociatePayscale != "MOCO")
                                                    {
                                                        @:Int Survey
                            }
                                                </th>
                                                <th class="text-center">Vol Bonus</th>
                                                <th class="text-center">Total</th>
                                                <th class="text-center">Validated?</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                decimal dealIndex = 0;
                                                decimal validated = 0;
                                                decimal commissionSumTotal = 0;
                                                decimal commissionSubTotal = 0;
                                                decimal commissionOverallTotal = 0;

                                                decimal totalNewCount = 0;
                                                decimal totalUsedCount = 0;
                                                decimal totalBPPCount = 0;
                                                decimal totalTradeCount = 0;
                                                decimal totalFinanceCount = 0;
                                                decimal totalServiceCount = 0;
                                                decimal totalMaintenanceCount = 0;
                                                decimal totalGAPCount = 0;
                                                decimal totalAftermarketCount = 0;



                                                decimal tooFewVSC = 0;

                                            }
                                            @foreach (var deal in associate.AssociateDeals)
                                            {

                                                decimal totalTrade = deal.Trade1Amount + deal.Trade2Amount;
                                                decimal dealValue = deal.NewDealCount + deal.UsedDealCount;

                                                int tradeCount = 0;
                                                if (deal.Trade1Amount > 0)
                                                {
                                                    tradeCount += 1;
                                                }
                                                if (deal.Trade2Amount > 0)
                                                {
                                                    tradeCount += 1;
                                                }


                                                if (deal.MakeCode != "AA")
                                                {
                                                    totalNewCount += deal.NewDealCount;
                                                    totalUsedCount += deal.UsedDealCount;

                                                    dealIndex += dealValue;
                                                }

                                                var approved = Model.DealApprovals.FindAll(x => x.DealKey == deal.DealKey);
                                                if(approved != null && approved.Count > 0)
                                                {
                                                    validated += dealValue;
                                                }


                                                var dealNU = "";
                                                if (deal.VehicleCondition == "NEW")
                                                {
                                                    dealNU = "N";
                                                }
                                                else if (deal.VehicleCondition == "USED")
                                                {
                                                    dealNU = "U";
                                                }
                                                else
                                                {
                                                    dealNU = "U";
                                                }

                                                //IF IT IS A USED, IS IT A HANDYMAN?
                                                if (deal.VehicleCondition == "USED" && deal.VehicleCertification == "HDM" && associate.AssociatePayscale != "MOCO")
                                                {
                                                    dealNU = "H";
                                                    //deal.VehicleCondition = "HANDY";
                                                }

                                                //Determine Value, Internet or Half Value
                                                var valueInternet = "";
                                                if ((deal.BPPAmount >= 295 && deal.VehicleCategory == "L") || (deal.BPPAmount > 495 && deal.VehicleCategory == "R"))
                                                {
                                                    valueInternet = "V";
                                                }
                                                else if (deal.BPPAmount <= 495 && deal.BPPAmount > 250 && deal.VehicleCategory == "R")
                                                {
                                                    valueInternet = "V3";
                                                }
                                                else
                                                {
                                                    valueInternet = "I";
                                                }

                                                if (deal.FinanceCount == 0 && deal.VehicleTerm > 1)
                                                {
                                                    deal.FinanceCount = dealValue;
                                                }

                                                if (deal.VehicleCondition == "USED" && deal.BPPAmount >= 495 && deal.VehiclePrice < 10000)
                                                {
                                                    valueInternet = "V";
                                                }
                                                else if (deal.VehicleCondition == "USED" && deal.BPPAmount >= 495 && deal.VehiclePrice >= 10000)
                                                {
                                                    valueInternet = "V";
                                                }

                                                var dealPayscale = associate.AssociatePayscales.Find(o => o.ps_NewUsedHandy == deal.VehicleCondition);

                                                decimal baseCommission = 0;
                                                decimal bppCommission = 0;
                                                decimal tradeInCommission = 0;
                                                decimal financeCommission = 0;
                                                decimal serviceCommission = 0;
                                                decimal maintenanceCommission = 0;
                                                decimal GAPCommission = 0;
                                                decimal aftermarketCommission = 0;
                                                decimal commissionTotal = 0;
                                                decimal SSICommission = 0;
                                                decimal volumeCommission = 0;
                                                decimal spiffCommission = 0;
                                                decimal internalSurveyCommission = 0;


                                                totalBPPCount += deal.BPPCount;
                                                totalTradeCount += tradeCount * dealValue;// deal.TradeCount;
                                                totalFinanceCount += deal.FinanceCount;
                                                totalServiceCount += deal.ServiceContractCount;
                                                totalMaintenanceCount += deal.MaintenanceContractCount;
                                                totalGAPCount += deal.GAPCount;
                                                //totalAftermarketCount += deal.AftermarketCount;


                                                if (dealPayscale != null)
                                                {

                                                    if (deal.MakeCode != "AA")
                                                    {

                                                        if (dealPayscale.ps_PlanCode == "FL")
                                                        {
                                                            tooFewVSC = dealPayscale.ps_LessServiceContracts;
                                                        }

                                                        baseCommission = dealPayscale.ps_BaseCommission * dealValue;


                                                        if (valueInternet == "V")
                                                        {
                                                            bppCommission = dealPayscale.ps_FullBPP * dealValue;
                                                        }
                                                        else if (valueInternet == "V3")
                                                        {
                                                            bppCommission = dealPayscale.ps_HalfBPP * dealValue;
                                                        }
                                                        else
                                                        {
                                                            bppCommission = 0;
                                                        }

                                                        tradeInCommission = dealPayscale.ps_TradeIn * (tradeCount * dealValue);// deal.TradeCount;

                                                        if (dealNU == "N")
                                                        {
                                                            var spiff = Model.ManufacturerSpiffs.Find(o => o.Manufacturer.Trim().ToUpper() == deal.VehicleMake.Trim().ToUpper());

                                                            if (spiff != null && spiff.SpiffPaid.Trim().ToUpper() == "PAID")
                                                            {
                                                                spiffCommission = dealPayscale.ps_ManufacturerSpiffGuarantee * dealValue;
                                                            }
                                                        }

                                                        if (associate.AssociatePayscale != "MOCO")
                                                        {
                                                            GAPCommission = dealPayscale.ps_GAP * deal.GAPCount;

                                                            if (associate.AssociateSSI == null)
                                                            {
                                                                associate.AssociateSSI = "NO";
                                                            }
                                                            if (associate.AssociateSSI.ToUpper() == "YES")
                                                            {
                                                                SSICommission = dealPayscale.ps_ManufacturerSalesSatisfaction * dealValue;
                                                            }
                                                            else
                                                            {
                                                                SSICommission = 0;
                                                            }

                                                            if (dealNU == "U" || dealNU == "H")
                                                            {
                                                                internalSurveyCommission = dealPayscale.ps_InternalSurvey * dealValue;
                                                            }
                                                        }

                                                        if (associate.AssociatePayscaleSetup.Count > 0)
                                                        {
                                                            var payscaleSetup = associate.AssociatePayscaleSetup[0];

                                                            if (dealIndex < payscaleSetup.ps_VolumeBonusLevel1High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel1 * dealValue;
                                                            }
                                                            else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel2Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel2High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel2 * dealValue;
                                                            }
                                                            else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel3Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel3High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel3 * dealValue;
                                                            }
                                                            else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel4Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel4High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel4 * dealValue;
                                                            }
                                                            else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel5Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel5High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel5 * dealValue;
                                                            }
                                                            else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel6Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel6High + 1)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel6 * dealValue;
                                                            }
                                                            else
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel7 * dealValue;
                                                            }
                                                        }
                                                        else
                                                        {

                                                            if (dealIndex < 6)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel1 * dealValue;
                                                            }
                                                            else if (dealIndex >= 6 && dealIndex < 11)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel2 * dealValue;
                                                            }
                                                            else if (dealIndex >= 11 && dealIndex < 16)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel3 * dealValue;
                                                            }
                                                            else if (dealIndex >= 16 && dealIndex < 21)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel4 * dealValue;
                                                            }
                                                            else if (dealIndex >= 21 && dealIndex < 26)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel5 * dealValue;
                                                            }
                                                            else if (dealIndex >= 26 && dealIndex < 31)
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel6 * dealValue;
                                                            }
                                                            else
                                                            {
                                                                volumeCommission = dealPayscale.ps_VolumeBonusLevel7 * dealValue;
                                                            }
                                                        }
                                                    }
                                                    financeCommission = dealPayscale.ps_FinanceLease * deal.FinanceCount;

                                                    serviceCommission = dealPayscale.ps_ServiceContract * deal.ServiceContractCount;

                                                    maintenanceCommission = dealPayscale.ps_Maintenance * deal.MaintenanceContractCount;

                                                    //This should be per aftermarket item

                                                    if (deal.AftermarketCount > 0)
                                                    {
                                                        var aftermarketItems = SalesCommission.Business.SqlQueries.GetAftermarketItemsByDealKey(deal.DealKey, new DateTime(Model.YearId, Model.MonthId, 1), true);
                                                        decimal aftermarketCount = 0;
                                                        foreach (var item in aftermarketItems)
                                                        {
                                                            var profit = item.AftermarketPrice - item.AftermarketCost;
                                                            decimal points = 0;

                                                            if (item.AftermarketProfitPerPoint == 0)
                                                            {
                                                                item.AftermarketProfitPerPoint = 1;
                                                            }

                                                            if (item.AftermarketProfitPerPoint > 0)
                                                            {
                                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                {
                                                                    points = 0;
                                                                }
                                                                else if (profitPerPoint < item.AftermarketPoints)
                                                                {
                                                                    points = Math.Truncate(profitPerPoint);
                                                                }
                                                                else
                                                                {
                                                                    points = item.AftermarketPoints;
                                                                }
                                                            }

                                                            aftermarketCount += (points);
                                                        }
                                                        aftermarketCommission = dealPayscale.ps_AftermarketPerItem * (aftermarketCount * dealValue);
                                                        totalAftermarketCount += aftermarketItems.Count;
                                                    }

                                                    commissionTotal = baseCommission + bppCommission + tradeInCommission + financeCommission + serviceCommission + maintenanceCommission + GAPCommission + aftermarketCommission + spiffCommission + SSICommission + volumeCommission + internalSurveyCommission;

                                                    commissionSumTotal += commissionTotal;
                                                }

                                                <tr>
                                                    <td><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank">@dealIndex</a></td>
                                                    <td class="text-center"><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank">@deal.DealKey</a></td>
                                                    <td class="text-center"></td>
                                                    <td class="text-center">@deal.CustomerLastName</td>
                                                    <td class="text-center">@deal.StockNumber</td>
                                                    <td class="text-center">@dealNU</td>
                                                    @*<td class="text-center">@valueInternet</td>
                                                        <td class="text-center">@dealValue</td>*@
                                                    <td class="text-center"></td>
                                                    <td class="text-center">@baseCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@bppCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@tradeInCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@financeCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@serviceCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@maintenanceCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">
                                                        @if (associate.AssociatePayscale != "MOCO")
                                                        {
                                                            @GAPCommission.ToString("C", nfi)
                                                        }
                                                    </td>
                                                    <td class="text-center"></td>
                                                    <td class="text-center">@aftermarketCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@spiffCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">
                                                        @if (associate.AssociatePayscale != "MOCO")
                                                        {
                                                            @SSICommission.ToString("C", nfi)
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        @if (associate.AssociatePayscale != "MOCO")
                                                        {
                                                            @internalSurveyCommission.ToString("C", nfi)
                                                        }
                                                    </td>
                                                    <td class="text-center">@volumeCommission.ToString("C", nfi)</td>
                                                    <td class="text-center">@commissionTotal.ToString("C", nfi)</td>
                                                    <td class="text-center">
                                                        @if(approved != null && approved.Count > 0)
                                                        {
                                                            @approved[0].ApprovalDate.ToShortDateString();
                                                        }
                                                    </td>
                                                </tr>

                                            }
                                        </tbody>

                                        @{


                                            var newPercent = "";
                                            var usedPercent = "";

                                            var BPPPercent = "";
                                            var TradePercent = "";
                                            var FinancePercent = "";
                                            var ServicePercent = "";
                                            var MaintenancePercent = "";
                                            var GAPPercent = "";
                                            var AftermarketPercent = "";

                                            if (dealIndex > 0)
                                            {
                                                newPercent = (totalNewCount / dealIndex).ToString("P", nfi);
                                                usedPercent = (totalUsedCount / dealIndex).ToString("P", nfi);

                                                BPPPercent = (totalBPPCount / dealIndex).ToString("P", nfi);
                                                TradePercent = (totalTradeCount / dealIndex).ToString("P", nfi);
                                                FinancePercent = (totalFinanceCount / dealIndex).ToString("P", nfi);
                                                ServicePercent = (totalServiceCount / dealIndex).ToString("P", nfi);
                                                MaintenancePercent = (totalMaintenanceCount / dealIndex).ToString("P", nfi);
                                                GAPPercent = (totalGAPCount / dealIndex).ToString("P", nfi);
                                                AftermarketPercent = (totalAftermarketCount / dealIndex).ToString("P", nfi);
                                            }

                                            decimal totalTooFewVSC = 0;

                                            if (totalServiceCount > 0 && totalServiceCount < 3)
                                            {
                                                totalTooFewVSC = totalServiceCount * tooFewVSC;
                                            }

                                            commissionSubTotal = commissionSumTotal + bonusTotal + totalTooFewVSC;

                                            decimal baseAmount = 0;

                                            if (salary > commissionSubTotal)
                                            {
                                                baseAmount = salary;

                                            }
                                            else
                                            {
                                                baseAmount = commissionSubTotal;
                                            }

                                            commissionOverallTotal = baseAmount + draws;
                                            decimal Overdraw = 0;

                                        }


                                        <tfoot>
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-right" colspan="3">Counts:</th>
                                                <th class="text-center" colspan="2">New: @totalNewCount</th>
                                                <th class="text-center" colspan="2">Used:@totalUsedCount</th>
                                                <th class="text-center"></th>
                                                @*<th class="text-center"></th>*@
                                                <th class="text-center">@totalBPPCount</th>
                                                <th class="text-center">@totalTradeCount</th>
                                                <th class="text-center">@totalFinanceCount</th>
                                                <th class="text-center">@totalServiceCount</th>
                                                <th class="text-center">@totalMaintenanceCount</th>
                                                <th class="text-center">
                                                    @if (associate.AssociatePayscale != "MOCO")
                                                    {
                                                        @totalGAPCount
                                                    }
                                                </th>
                                                <th class="text-center"></th>
                                                <th class="text-center">@totalAftermarketCount</th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-right" colspan="2">Sum Total:</th>
                                                <th class="text-center">@commissionSumTotal.ToString("C")</th>
                                            </tr>
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-right" colspan="3">Percentages:</th>
                                                <th class="text-center" colspan="2">New: @newPercent</th>
                                                <th class="text-center" colspan="2">Used: @usedPercent</th>
                                                @*<th class="text-center"></th>*@
                                                <th class="text-center"></th>
                                                <th class="text-center">@BPPPercent</th>
                                                <th class="text-center">@TradePercent</th>
                                                <th class="text-center">@FinancePercent</th>
                                                <th class="text-center">@ServicePercent</th>
                                                <th class="text-center">@MaintenancePercent</th>
                                                <th class="text-center">
                                                    @if (associate.AssociatePayscale != "MOCO")
                                                    {
                                                        @GAPPercent
                                                    }
                                                </th>
                                                <th class="text-center"></th>
                                                <th class="text-center">@AftermarketPercent</th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-right" colspan="2">Bonus:</th>
                                                <th class="text-center">@bonusTotal.ToString("C")</th>
                                            </tr>
                                            @if (associate.AssociatePayscale == "FL")
                                            {
                                                <tr style="background-color:#d9edf7">
                                                    <th class="text-center" colspan="18"></th>
                                                    <th class="text-right" colspan="2">Less than 3 VSC:</th>
                                                    <th class="text-center">@totalTooFewVSC.ToString("C")</th>
                                                </tr>
                                            }
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-center" colspan="18"></th>
                                                <th class="text-right" colspan="2">Comm Sub Total:</th>
                                                <th class="text-center">@commissionSubTotal.ToString("C")</th>
                                            </tr>
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-center" colspan="18"></th>
                                                <th class="text-right" colspan="2">Comm/Salary/Hourly:</th>
                                                <th class="text-center">@baseAmount.ToString("C")</th>
                                            </tr>
                                            <tr style="background-color:#d9edf7">
                                                <th class="text-center" colspan="18"></th>
                                                <th class="text-right" colspan="2">Draws:</th>
                                                <th class="text-center">@draws.ToString("C")</th>
                                            </tr>
                                            <tr style="background-color:#d9edf7;font-size:16px;">
                                                <th class="text-center" colspan="18"></th>
                                                <th class="text-right" colspan="2">Comm Due:</th>
                                                <th class="text-center">@commissionOverallTotal.ToString("C")</th>
                                            </tr>
                                        </tfoot>
                                        @{
                                            CommTotal += commissionSumTotal;
                                            CommSubTotal += commissionSubTotal;
                                            TotalCommDue += commissionOverallTotal;
                                            TotalBaseAmount += baseAmount;

                                            if (baseAmount - commissionSubTotal == 0 && commissionOverallTotal < 0)
                                            {
                                                Overdraw = commissionOverallTotal;
                                                Overdraw = (Overdraw * -1);
                                            }
                                            else
                                            {
                                                Overdraw = (baseAmount - commissionSubTotal);
                                            }



                                            Overdraw = (Overdraw * -1);

                                            double trainingDays = 0;

                                            trainingDays = (new DateTime(Model.YearId, Model.MonthId, 1) - associate.AssociateHireDate).TotalDays;

                                            if (trainingDays < 90)
                                            {
                                                TotalTraining += Overdraw;
                                                TotalTrainingCount += 1;
                                            }
                                            else
                                            {
                                                if (Overdraw != 0)
                                                {
                                                    TotalOverdraw += Overdraw;
                                                    TotalOverdrawCount += 1;
                                                }
                                            }
                                            TotalAssociateCount += 1;
                                        }
                                    </table>
                                    <script type="text/javascript">
                                                $('#@associate.AssociateSSN-commTotal').html('@commissionSumTotal.ToString("C")');
                                                $('#@associate.AssociateSSN-commSubTotal').html('@commissionSubTotal.ToString("C")');
                                                $('#@associate.AssociateSSN-commDue').html('@commissionOverallTotal.ToString("C")');
                                        $('#@associate.AssociateSSN-payDue').html('@baseAmount.ToString("C")');
                                        $('#@associate.AssociateSSN-validated').html('@validated');

                                        if ('@Overdraw' == '0.0' || '@Overdraw' == '0.000' || '@Overdraw' == '0') {
                                                    $('#@associate.AssociateSSN-overdraw').html('');
                                                }
                                                else {
                                                    if(parseFloat('@trainingDays') < parseFloat('90'))
                                                    {
                                                        $('#@associate.AssociateSSN-training').html('@Overdraw.ToString("C")');
                                                        $('#@associate.AssociateSSN-overdraw').html('');
                                                    }
                                                    else
                                                    {
                                                        $('#@associate.AssociateSSN-overdraw').html('@Overdraw.ToString("C")');
                                                    }
                                                }
                                    </script>
                                                TotalValidatedUnits += validated;
                                            }


                            </td>
                        </tr>
                                                
                                            }
                    @{
                        //TotalOverdraw = (TotalOverdraw * -1);                        
                    }
                </tbody>
                <tfoot>
                    <tr style="background-color:#d9edf7">
                        <th class="">Totals</th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center">@TotalUnits</th>
                        <th class="text-center">@TotalValidatedUnits</th>
                        <th class="text-center">@CommTotal.ToString("C")</th>
                        <th class="text-center">@TotalBonus.ToString("C")</th>
                        <th class="text-center">@CommSubTotal.ToString("C")</th>
@if (Model.StoreId != "clearwater")
{
                        <th class="text-center">@TotalHours</th>
                        <th class="text-center"></th>
                        <th class="text-center">@TotalSalary.ToString("C")</th>
}
                        <th class="text-center">@TotalBaseAmount.ToString("C")</th>
                        <th class="text-center" style="color:red;">@TotalDraws.ToString("C")</th>
                        <th class="text-center">@TotalCommDue.ToString("C")</th>
                        <th class="text-center" style="color:red;">@TotalOverdraw.ToString("C")</th>
                        <th class="text-center" style="color:red;">@TotalTraining.ToString("C")</th>
                    </tr>

                    @{ 
                        var TotalTrainingOverdraw = TotalOverdraw + TotalTraining;
                    }

                    <tr style="background-color:#d9edf7">
                        <th class=""></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        @if (Model.StoreId != "clearwater")
                        {
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                        }
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;"></th>
                        <th class="text-center"></th>
                        <th class="text-center" colspan="2" style="color:red;">@TotalTrainingOverdraw.ToString("C")</th>
                    </tr>
                    <tr style="background-color:#d9edf7">
                        <th class="">@TotalAssociateCount Associates</th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        @if (Model.StoreId != "clearwater")
                        {
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                        }
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;"></th>
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;">@TotalOverdrawCount</th>
                        <th class="text-center" style="color:red;">@TotalTrainingCount</th>
                    </tr>
                </tfoot>
            </table>
                            StoreTotalAssociateCount += TotalAssociateCount;
                            StoreTotalOverdrawCount += TotalOverdrawCount;
                            StoreTotalTrainingCount += TotalTrainingCount;

                            StoreTotalUnits += TotalUnits;
                            StoreTotalValidatedUnits += TotalValidatedUnits;
                            StoreCommTotal += CommTotal;

                            StoreTotalBonus += TotalBonus;
                            StoreCommSubTotal += CommSubTotal;
                            StoreTotalHours += TotalHours;
                            StoreTotalSalary += TotalSalary;
                            StoreTotalDraws += TotalDraws;
                            StoreTotalCommDue += TotalCommDue;
                            StoreTotalBaseAmount += TotalBaseAmount;
                            StoreTotalOverdraw += TotalOverdraw;
                            StoreTotalTraining += TotalTraining;

                        }

        @if (departments.Count > 1)
        {
            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th class="" style="width:325px;"></th>
                        <th class="text-center">Total<br />Units</th>
                        <th class="text-center">Units<br/>Val</th>
                        <th class="text-center">Comm Total</th>
                        <th class="text-center">Bonus</th>
                        <th class="text-center">Total Comm<br />Earned</th>
                        <th class="text-center">Hours</th>
                        <th class="text-center">Rate</th>
                        <th class="text-center">Min Wage Std</th>
                        <th class="text-center">Pay Amount</th>
                        <th class="text-center">Draws</th>
                        <th class="text-center">Amount Due</th>
                        <th class="text-center">Overdraw</th>
                        <th class="text-center">Training</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr style="background-color:#d9edf7">
                        <th class="">Store Totals</th>
                        <th class="text-center">@StoreTotalUnits</th>
                        <th class="text-center">@StoreTotalValidatedUnits</th>
                        <th class="text-center">@StoreCommTotal.ToString("C")</th>
                        <th class="text-center">@StoreTotalBonus.ToString("C")</th>
                        <th class="text-center">@StoreCommSubTotal.ToString("C")</th>
                        <th class="text-center">@StoreTotalHours</th>
                        <th class="text-center"></th>
                        <th class="text-center">@StoreTotalSalary.ToString("C")</th>
                        <th class="text-center">@StoreTotalBaseAmount.ToString("C")</th>
                        <th class="text-center" style="color:red;">@StoreTotalDraws.ToString("C")</th>
                        <th class="text-center">@StoreTotalCommDue.ToString("C")</th>
                        <th class="text-center" style="color:red;">@StoreTotalOverdraw.ToString("C")</th>
                        <th class="text-center" style="color:red;">@StoreTotalTraining.ToString("C")</th>
                    </tr>
                    @{ 
                        var StoreTotalOverdrawTraining = StoreTotalOverdraw + StoreTotalTraining;
                    }

                    <tr style="background-color:#d9edf7">
                        <th class=""></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;"></th>
                        <th class="text-center"></th>
                        <th class="text-center" colspan="2" style="color:red;">@StoreTotalOverdrawTraining.ToString("C")</th>
                    </tr>
                    <tr style="background-color:#d9edf7">
                        <th class="">@StoreTotalAssociateCount Associates</th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;"></th>
                        <th class="text-center"></th>
                        <th class="text-center" style="color:red;">@StoreTotalOverdrawCount</th>
                        <th class="text-center" style="color:red;">@StoreTotalTrainingCount</th>
                    </tr>
                </tfoot>
            </table>
                }


</div>

}


