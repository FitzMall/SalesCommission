@model SalesCommission.Models.AssociateCommissionModel

@{
    ViewBag.Title = "Associate Commission";
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.CurrencySymbol = "";
    //nfi.PercentSymbol = "";

    System.Globalization.NumberFormatInfo rev = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    rev.CurrencyDecimalDigits = 0;
    rev.PercentDecimalDigits = 1;


    decimal TotalDrawAmount = 0;

    var bIsAssociate = false;

    var bShowValues = false;
    if (DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 28))
    {
        bShowValues = true;
    }

    var bShowLevel = false;
    if (DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 24))
    {
        bShowLevel = true;
    }

    if ((bool)Session["IsCommissionAdmin"] == true)
    {
        bShowValues = true;
    }
    else
    {

    }

    if (Model.AssociateInformation.AssociateNumber != null && Session["AssociateId"] != null)
    {
        if (Model.AssociateInformation.AssociateNumber.Trim().ToLower() == Session["AssociateId"].ToString().Trim().ToLower())
        {
            bIsAssociate = true;
        }
    }
}

@section CSS
{

    <script src="~/Scripts/jquery-ui.js"></script>
    <link href="~/Scripts/jquery-ui.css" rel="stylesheet" />
}
<style type="text/css">

    .commission-table {
        font-size: 11px;
    }

    .table thead>tr>th, .table tbody>tr>th, .table tfoot>tr>th, .table thead>tr>td, .table tbody>tr>td, .table tfoot>tr>td
    {
        padding:6px;
    }

    @@media print {
        .navbar {
            display: none;
        }

        body{
            padding-top:0px;
        }

        .jumbotron {
            display: none;
        }

        a[href]:after {
            content: "";
        }

        .btn-primary {
            display: none;
        }

    .commission-table {
        font-size: 10px;
    }
    .table thead>tr>th, .table tbody>tr>th, .table tfoot>tr>th, .table thead>tr>td, .table tbody>tr>td, .table tfoot>tr>td
    {
        padding:4px;
        line-height:1.0em;
    }
    .associate-approval {background-color:#efefef}
    hr {
        margin-top:0px;
        margin-bottom: 0px;
    }
        @@page {
            size: portrait;
            margin: 2cm;
        }
    }

        h5.editInfo{
        color:#428bca;
    }

    h5.editInfo:hover{
        text-decoration:underline;
        color: #428bca;
        cursor: pointer;
    }
</style>

@if (Model.AssociateInformation == null)
{
    <h2>The associate you requested could not be found.</h2>
}
else if (Model.AssociateInformation.AssociateDeals == null)
{
    <h2>The associate you requested has no deals for this month and year.</h2>
}
else if ((bool)Session["IsCommissionAdmin"] == false && (bool)Session["IsAssociateAdmin"] == false && (Session["AssociateId"].ToString().ToUpper() != Model.AssociateId.ToUpper()))
{
                <h2>You are not authorized to view this Associate's Commission</h2>
}
else
{
    decimal hoursPayAmount = 0;
    decimal totalUnits = 0;
    var payscaleName = "";
    var payLevelName = "";

    var nextMonthId = 0;
    var previousMonthId = 0;
    var nextMonthYearId = 0;
    var previousMonthYearId = 0;

    var currentMonth = new DateTime(Model.YearId, Model.MonthId, 1);
    var previousMonth = currentMonth.AddMonths(-1);
    var nextMonth = currentMonth.AddMonths(1);

    previousMonthId = previousMonth.Month;
    nextMonthId = nextMonth.Month;

    previousMonthYearId = previousMonth.Year;
    nextMonthYearId = nextMonth.Year;

    foreach (var scale in SalesCommission.Business.Enums.Payscales)
    {
        if (Model.AssociateInformation.AssociatePayscale == scale.PayscaleID)
        {
            payscaleName = scale.Name;
            break;
        }
    }

    foreach (var level in SalesCommission.Business.Enums.PayLevels)
    {
        if (Model.AssociateInformation.AssociateLevel == level.PayLevelID)
        {
            payLevelName = level.Name;
            break;
        }
    }

    var ssiMet = "Yes";
    var associateScorecards = SalesCommission.Business.SqlQueries.GetAssociateScoreCardHistoryByDate(Model.AssociateInformation.AssociateSSN, Model.YearId, Model.MonthId);
    if (associateScorecards != null && associateScorecards.Count > 0)
    {
        var scorecard = associateScorecards[0];

        if (scorecard.MeetsSSIObjective != null && scorecard.MeetsSSIObjective.ToLower() == "true")
        {
            ssiMet = "Yes";
        }
        else
        {
            ssiMet = "No";
        }
    }

    <div class="row" style="margin-top:15px;">
        <div class="col-md-8">
            <h2>Commission for @Model.AssociateInformation.AssociateFullName for @Model.MonthId/@Model.YearId</h2>
        </div>
        <div class="col-md-2 text-right" style="margin-top:15px;">
            <input type="button" class="btn btn-primary" value="Print" onclick="window.print();return false;" />
        </div>
        <div class="col-md-2">
            <a href="@applicationPath/Commission/NewScoreCard/@Model.AssociateId/@Model.MonthId/@Model.YearId" class="btn btn-primary"  style="margin-top:15px;float:right">View Score Card</a>

        </div>
    </div>
    <div class="row">
        <div class="col-md-6 text-left">
            <a href="@applicationPath/Commission/NewAssociate/@Model.AssociateId/@previousMonthId/@previousMonthYearId" class="btn btn-primary" style="margin-top:15px;">< Previous Commission</a>
        </div>
        <div class="col-md-6 text-right">
            @if (nextMonth <= DateTime.Now)
            {
                <a href="@applicationPath/Commission/NewAssociate/@Model.AssociateId/@nextMonthId/@nextMonthYearId" class="btn btn-primary" style="margin-top:15px;float:right">Next Commission ></a>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-xs-4">
            <p><strong>Hire Date:</strong> @Model.AssociateInformation.AssociateHireDate.ToShortDateString()</p>
            @if (Model.AssociateInformation.AssociateStatus != "NA" && Model.AssociateInformation.AssociateStatus != "" && Model.AssociateInformation.AssociateStatus != null)
            {
                <p><strong>Status:</strong> @Model.AssociateInformation.AssociateStatus</p>
                if (Model.AssociateInformation.AssociateStatus != "Mentee")
                {
                    <p><strong>Mentor:</strong> @Model.AssociateInformation.AssociateMentor</p>
                }
            }
            @if (Model.AssociateInformation.AssociateStatus == "Mentee")
            {
                <p><strong>Training End Date:</strong> @Model.AssociateInformation.AssociateGraduationDate.ToShortDateString()</p>
            }            
            <p><strong>SSI:</strong> @ssiMet</p>
@if ((bool)Session["IsCommissionAdmin"] == true)
{
            <p><strong>Department:</strong> @Model.AssociateInformation.AssociateDepartmentDescription</p>
}
        </div>
        <div class="col-xs-4">
            <p><strong>Prior Units</strong></p>
            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th>Month</th>
                        <th>Units</th>                        
                    </tr>
                </thead>
                <tbody>
                    @if (Model.AssociateInformation.AssociateUnits != null && Model.AssociateInformation.AssociateUnits.Count > 0)
                    {
                        var sortedUnits = Model.AssociateInformation.AssociateUnits.OrderByDescending(x => x.UnitDate).ToList();

                        for (var i = 0; i < 3; i++)
                        {
                            totalUnits += sortedUnits[i].UnitCount;
                            <tr>
                                @if (i == 0)
                                {
                                    <td>Current</td>
                                }
                                else
                                {
                                    <td>@sortedUnits[i].UnitDate.Month/@sortedUnits[i].UnitDate.Year</td>
                                }
                                <td>@sortedUnits[i].UnitCount</td>
                            </tr>
                        }
                    }


                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th>@totalUnits</th>
                    </tr>
                </tfoot>
            </table>            
        </div>
        
        <div class="col-xs-4">
            <h4>Unearned Commissions</h4>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
@if ((bool)Session["IsCommissionAdmin"] == true || DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 1).AddMonths(1))
{
        <div class="col-xs-3">
            <h4>Advances (Draws)</h4>

            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th>Date</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.AssociateInformation.AssociateDraws != null)
                    {
                        foreach (var draw in Model.AssociateInformation.AssociateDraws)
                        {
                            <tr>
                                <td>@draw.DrawDate.ToShortDateString()</td>
                                <td>@draw.DrawAmount.ToString("C")</td>
                            </tr>
                            TotalDrawAmount += draw.DrawAmount;
                        }
                    }
                    @{
                        TotalDrawAmount = (TotalDrawAmount * -1);
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th>@TotalDrawAmount.ToString("C")</th>
                    </tr>
                </tfoot>
            </table>
        </div>
}
        <div class="col-xs-3">
            <h4>Bonus</h4>
            @{
                decimal TotalBonusAmount = 0;
            }
            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th>Date</th>
                        <th>Comment</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.AssociateInformation.AssociateBonus != null)
                    {
                        foreach (var bonus in Model.AssociateInformation.AssociateBonus)
                        {
                            <tr>
                                <td>@bonus.BonusDate</td>
                                <td>@bonus.BonusComments</td>
                                <td>@bonus.BonusAmount.ToString("C")</td>
                            </tr>
                            TotalBonusAmount += bonus.BonusAmount;
                        }
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th></th>
                        <th></th>
                        <th>@TotalBonusAmount.ToString("C")</th>
                    </tr>
                </tfoot>
            </table>

@if ((bool)Session["IsCommissionAdmin"] == true)
{
            <h5 class="editInfo" rel="@Model.AssociateInformation.AssociateNumber.Trim()"><i class="fa fa-pencil" aria-hidden="true"></i> Bonus and Advances (Draws)</h5>    
}
        </div>

        <div class="col-xs-3">

@{
    decimal hoursWorked = 0;

    if (Model.AssociateInformation.AssociateHours != null && Model.AssociateInformation.AssociateHours.Count > 0)
    {
        hoursWorked = Model.AssociateInformation.AssociateHours[0].Hours;
        hoursPayAmount = Math.Round((hoursWorked * @Model.AssociateInformation.AssociateWage));
    }

    var minimumAmount = 2500;

    if(Model.AssociateInformation.AssociateLocation == "FAM" || Model.AssociateInformation.AssociateLocation == "FTN")
    {
        minimumAmount = 2000;
    }

    // Minimum Salary, if person worked 180 hours, then minimum is $2500, less that 180hours then (# hours/180)*2500
    if (hoursWorked >= 180)
    {
        if (hoursPayAmount < minimumAmount)
        {
            hoursPayAmount = minimumAmount;
        }
    }
    else
    {
        var calculatedSalary = (hoursWorked / 180) * minimumAmount;
        if (hoursPayAmount < calculatedSalary)
        {
            hoursPayAmount = calculatedSalary;
        }

    }

}

@if ((bool)Session["IsCommissionAdmin"] == true)
{
            <h4>Hours</h4>

            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th>Hours</th>
                        @*<th>Rate</th>
                        <th>Amount</th>*@
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@hoursWorked</td>
                        @*<td>@Model.AssociateInformation.AssociateWage</td>
                        <td>@hoursPayAmount.ToString("C")</td>*@
                    </tr>
                </tbody>
            </table>
}
        </div>
    </div>
    <div class="row" @*style="page-break-after: always;"*@>
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h4>@Model.AssociateInformation.AssociateLastName Earned Commissions</h4>
            @if (Model.AssociateInformation.AssociateDeals.Count > 0)
            {
            <table class="table table-bordered table-striped commission-table">
                <thead>
                    <tr style="background-color:#d9edf7">
                        <th class="text-center"></th>
                        <th class="text-center">Deal #</th>
@if ((bool)Session["IsCommissionAdmin"] == true)
{
                        <th class="text-center">UE</th>
}
else
{
    <th class="text-center"></th>
}
                        <th class="text-center">Customer</th>
                        <th class="text-center">Stk #</th>
                        <th class="text-center">N/U</th>
                        @*<th class="text-center">V/I</th>
                        <th class="text-center">Deal Count</th>*@
                        <th class="text-center">&nbsp;</th>
                        <th class="text-center">Comm</th>
                        <th class="text-center">BPP</th>
                        <th class="text-center">Trade</th>
                        <th class="text-center">Fin Inc</th>
                        <th class="text-center">VSC</th>
                        <th class="text-center">Maint</th>
                        <th class="text-center">GAP</th>
                        <th class="text-center">&nbsp;</th>
                        <th class="text-center">
                            <a href="" id="aftermarket-Key">After market <i class="fa fa-key" aria-hidden="true"></i></a>
                            @{ 
                                var aftermarketModel = new SalesCommission.Models.AftermarketInputModel();
                                aftermarketModel.YearId = Model.YearId;
                                aftermarketModel.MonthId = Model.MonthId;

                                aftermarketModel = SalesCommission.Business.SqlQueries.GetAftermarketInputsByDate(aftermarketModel);
                            }
                            
                            @if (aftermarketModel != null)
                            {
                                <table class="table table-striped table-bordered" id="aftermarket-Key-table" style="display:none;position:absolute;width:50%;left: 15%; bottom:0%; border:4px ridge #ccc">
                                    <thead>
                                        <tr style="background-color:#d9edf7">
                                            <th class="text-left">Aftermarket Item</th>
                                            <th class="text-center">Points</th>
                                            @*<th class="text-center">Profit per Point</th>*@
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var input in aftermarketModel.AftermarketInputs)
                                        {
                                            <tr>
                                                <td class="text-left">@input.AftermarketDescription</td>

                                                @if (input.AftermarketFieldId > 15)
                                                {
                                                    <td class="text-center">.25 to 1.0</td>
                                                }
                                                else
                                                {
                                                    if (Model.AssociateInformation.AssociateLocation == "FTN" && input.AftermarketFieldId == 3)
                                                    {
                                                        <td class="text-center">3.00</td>
                                                    }
                                                    else
                                                    {
                                                    <td class="text-center">@input.AftermarketPoints</td>
                                                    }
                                                }
                                                @*<td class="text-center">@input.AftermarketProfitPerPoint</td>*@                                                        
                                            </tr>
                                        }

                                    </tbody>
                                    <tfoot></tfoot>

                                </table>
                            }

                            <script type="text/javascript">
                                $('#aftermarket-Key').hover(function (ev) {
                                    $('#aftermarket-Key-table').stop(true, true).fadeIn();
                                }, function (ev) {
                                    $('#aftermarket-Key-table').stop(true, true).fadeOut();
                                }).mousemove(function (ev) {
                                    $('#aftermarket-Key-table').css({ left: ev.layerX + 10, top: ev.layerY + 10 });
                                });
                            </script> 

                        </th>
                        <th class="text-center">Vol Bonus</th>
                        <th class="text-center">&nbsp;</th>
                        <th class="text-center">Total</th>                        
                        <th class="text-center associate-approval">Approved</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal dealIndex = 0;
                        decimal commissionSumTotal = 0;
                        decimal commissionSubTotal = 0;
                        decimal commissionOverallTotal = 0;

                        decimal totalNewCount = 0;
                        decimal totalUsedCount = 0;
                        decimal totalBPPCount = 0;
                        decimal totalTradeCount = 0;
                        decimal totalFinanceCount = 0;
                        decimal totalServiceCount = 0;
                        decimal totalMaintenanceCount = 0;
                        decimal totalGAPCount = 0;
                        decimal totalAftermarketCount = 0;
                        decimal totalAftermarketItemsCount = 0;

                        decimal tooFewVSC = 0;

                    }
                    @foreach (var deal in Model.AssociateInformation.AssociateDeals)
                    {

                        decimal totalTrade = deal.Trade1Amount + deal.Trade2Amount;
                        decimal dealValue = deal.NewDealCount + deal.UsedDealCount;

                        int tradeCount = 0;
                        if (deal.Trade1Amount > 0)
                        {
                            tradeCount += 1;
                        }
                        if (deal.Trade2Amount > 0)
                        {
                            tradeCount += 1;
                        }

                        if (deal.MakeCode != "AA")
                        {
                            totalNewCount += deal.NewDealCount;
                            totalUsedCount += deal.UsedDealCount;

                            dealIndex += dealValue;
                        }

                        var dealNU = "";
                        if (deal.VehicleCondition == "NEW")
                        {
                            dealNU = "N";
                        }
                        else if (deal.VehicleCondition == "USED")
                        {
                            dealNU = "U";
                        }
                        else
                        {
                            dealNU = "U";
                        }

                        //IF IT IS A USED, IS IT A HANDYMAN?
                        if (deal.VehicleCondition == "USED" && deal.VehicleCertification == "HDM" && Model.AssociateInformation.AssociatePayscale != "MOCO")
                        {
                            dealNU = "H";
                            deal.VehicleCondition = "HANDY";
                        }

                        //Determine Value, Internet or Half Value
                        var valueInternet = "";
                        if ((deal.BPPAmount >= 295 && deal.VehicleCategory == "L") || (deal.BPPAmount > 495 && deal.VehicleCategory == "R"))
                        {
                            valueInternet = "V";
                        }
                        else if (deal.BPPAmount <= 495 && deal.BPPAmount > 250 && deal.VehicleCategory == "R")
                        {
                            valueInternet = "V3";
                        }
                        else
                        {
                            valueInternet = "I";
                        }

                        if (Model.AssociateInformation.AssociateLocation == "FTN")
                        {
                            if (deal.ServiceContractAmount < 500)
                            {
                                deal.ServiceContractCount = 0;
                            }
                        }

                        if (deal.FinanceCount == 0 && deal.VehicleTerm > 1)
                        {
                            deal.FinanceCount = dealValue;
                        }

                        if ((deal.VehicleCondition == "USED" || deal.VehicleCondition == "HANDY") && deal.BPPAmount >= 495 && deal.VehiclePrice < 10000)
                        {
                            valueInternet = "V";
                        }
                        else if (deal.VehicleCondition == "USED" && deal.BPPAmount >= 495 && deal.VehiclePrice >= 10000)
                        {
                            valueInternet = "V";
                        }

                        if (Model.AssociateInformation.AssociateLocation == "FOC" && deal.VehicleCondition == "USED" && deal.BPPAmount >= 375)
                        {
                            valueInternet = "V";
                        }
                        else if (Model.AssociateInformation.AssociateLocation == "FOC" && deal.VehicleCondition == "USED" && deal.BPPAmount < 375)
                        {
                            valueInternet = "I";
                        }


                        if (Model.AssociateInformation.AssociateLocation == "FOC" && deal.VehicleCondition == "NEW" && (deal.MakeCode == "CD" || deal.MakeCode == "VW") && deal.BPPAmount >= 375)
                        {
                            valueInternet = "V";
                        }
                        else if (Model.AssociateInformation.AssociateLocation == "FOC" && deal.VehicleCondition == "NEW" && (deal.MakeCode == "CD" || deal.MakeCode == "VW") && deal.BPPAmount < 375)
                        {
                            valueInternet = "I";
                        }

                        if (Model.AssociateInformation.AssociateLocation == "FTN")
                        {
                            if ((deal.VehicleCondition == "NEW" && deal.BPPAmount >= 495) || (deal.BPPAmount >= 295 && deal.VehicleCategory == "L") || (deal.VehicleCondition == "USED" && deal.BPPAmount >= 295 && deal.VehiclePrice < 10000) || (deal.VehicleCondition == "USED" && deal.BPPAmount >= 495 && deal.VehiclePrice >= 10000))
                            {
                                valueInternet = "V";
                            }
                            else
                            {
                                valueInternet = "I";
                            }
                        }


                        var dealPayscale = Model.AssociateInformation.AssociatePayscales.Find(o => o.ps_NewUsedHandy == deal.VehicleCondition);

                        decimal baseCommission = 0;
                        decimal bppCommission = 0;
                        decimal tradeInCommission = 0;
                        decimal financeCommission = 0;
                        decimal serviceCommission = 0;
                        decimal maintenanceCommission = 0;
                        decimal GAPCommission = 0;
                        decimal aftermarketCommission = 0;
                        decimal commissionTotal = 0;
                        decimal volumeCommission = 0;

                        decimal baseCommissionCount = 0;
                        decimal bppCommissionCount = 0;
                        decimal tradeInCommissionCount = 0;
                        decimal financeCommissionCount = 0;
                        decimal serviceCommissionCount = 0;
                        decimal maintenanceCommissionCount = 0;
                        decimal GAPCommissionCount = 0;
                        decimal aftermarketCommissionCount = 0;
                        decimal commissionTotalCount = 0;
                        decimal volumeCommissionCount = 0;

                        totalBPPCount += deal.BPPCount;
                        if (deal.BPPCount > 0 && valueInternet == "I")
                        {
                            totalBPPCount -= deal.BPPCount;
                        }

                        totalTradeCount += tradeCount * dealValue;//deal.TradeCount;
                        totalFinanceCount += deal.FinanceCount;
                        totalServiceCount += deal.ServiceContractCount;
                        totalMaintenanceCount += deal.MaintenanceContractCount;
                        totalGAPCount += deal.GAPCount;
                        //totalAftermarketCount += deal.AftermarketCount;


                        if (dealPayscale != null)
                        {

                            if (deal.MakeCode != "AA")
                            {

                                if (dealPayscale.ps_PlanCode == "FL")
                                {
                                    tooFewVSC = dealPayscale.ps_LessServiceContracts;
                                }

                                baseCommission = dealPayscale.ps_BaseCommission * dealValue;
                                baseCommissionCount = dealValue;

                                if (valueInternet == "V")
                                {
                                    bppCommission = dealPayscale.ps_FullBPP * dealValue;
                                    bppCommissionCount = dealValue;
                                }
                                else if (valueInternet == "V3")
                                {
                                    bppCommission = dealPayscale.ps_HalfBPP * dealValue;
                                    bppCommissionCount = dealValue;
                                }
                                else
                                {
                                    bppCommission = 0;
                                    bppCommissionCount = 0;
                                }

                                tradeInCommission = dealPayscale.ps_TradeIn * (tradeCount * dealValue);// deal.TradeCount;
                                tradeInCommissionCount = (tradeCount * dealValue);

                                if (Model.AssociateInformation.AssociatePayscaleSetup.Count > 0)
                                {
                                    var payscaleSetup = Model.AssociateInformation.AssociatePayscaleSetup[0];

                                    if (dealIndex < payscaleSetup.ps_VolumeBonusLevel1High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel1 * dealValue;
                                    }
                                    else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel2Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel2High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel2 * dealValue;
                                    }
                                    else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel3Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel3High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel3 * dealValue;
                                    }
                                    else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel4Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel4High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel4 * dealValue;
                                    }
                                    else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel5Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel5High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel5 * dealValue;
                                    }
                                    else if (dealIndex >= payscaleSetup.ps_VolumeBonusLevel6Low && dealIndex < payscaleSetup.ps_VolumeBonusLevel6High + 1)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel6 * dealValue;
                                    }
                                    else
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel7 * dealValue;
                                    }
                                }
                                else
                                {

                                    if (dealIndex < 6)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel1 * dealValue;
                                    }
                                    else if (dealIndex >= 6 && dealIndex < 11)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel2 * dealValue;
                                    }
                                    else if (dealIndex >= 11 && dealIndex < 16)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel3 * dealValue;
                                    }
                                    else if (dealIndex >= 16 && dealIndex < 21)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel4 * dealValue;
                                    }
                                    else if (dealIndex >= 21 && dealIndex < 26)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel5 * dealValue;
                                    }
                                    else if (dealIndex >= 26 && dealIndex < 31)
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel6 * dealValue;
                                    }
                                    else
                                    {
                                        volumeCommission = dealPayscale.ps_VolumeBonusLevel7 * dealValue;
                                    }
                                }
                            }
                            financeCommission = dealPayscale.ps_FinanceLease * deal.FinanceCount;
                            financeCommissionCount = deal.FinanceCount;

                            serviceCommission = dealPayscale.ps_ServiceContract * deal.ServiceContractCount;
                            serviceCommissionCount = deal.ServiceContractCount;

                            maintenanceCommission = dealPayscale.ps_Maintenance * deal.MaintenanceContractCount;
                            maintenanceCommissionCount = deal.MaintenanceContractCount;

                            GAPCommission = dealPayscale.ps_GAP * deal.GAPCount;
                            GAPCommissionCount = deal.GAPCount;

                            //This should be per aftermarket item

                            if (deal.AftermarketCount > 0)
                            {
                                var aftermarketItems = SalesCommission.Business.SqlQueries.GetAftermarketItemsByDealKey(deal.DealKey, new DateTime(Model.YearId, Model.MonthId, 1), true);
                                decimal aftermarketCount = 0;

                                foreach (var item in aftermarketItems)
                                {
                                    var profit = item.AftermarketPrice - item.AftermarketCost;
                                    decimal points = 0;

                                    if (Model.AssociateInformation.AssociateLocation == "FAM")
                                    {

                                        if (item.AftermarketId >= 16) // FOR FREDERICK ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                        {
                                            var profitPerPoint = (profit / 100);

                                            var wholePoints = Math.Truncate(profitPerPoint);
                                            var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                            decimal partialPoints = 0;

                                            if (partialProfit >= 25 && partialProfit < 40)
                                            {
                                                partialPoints = .25m;
                                            }
                                            else if (partialProfit >= 40 && partialProfit < 75)
                                            {
                                                partialPoints = .5m;
                                            }
                                            else if (partialProfit >= 75)
                                            {
                                                partialPoints = 1;
                                            }

                                            points = wholePoints + partialPoints;

                                        }
                                        else
                                        {
                                            if (item.AftermarketProfitPerPoint == 0)
                                            {
                                                item.AftermarketProfitPerPoint = 1;
                                            }

                                            if (item.AftermarketProfitPerPoint > 0)
                                            {
                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                {
                                                    points = 0;
                                                }
                                                else if (profitPerPoint < item.AftermarketPoints)
                                                {
                                                    points = Math.Truncate(profitPerPoint);
                                                }
                                                else
                                                {
                                                    points = item.AftermarketPoints;
                                                }
                                            }
                                        }

                                    }
                                    else if (Model.AssociateInformation.AssociateLocation == "FTN")
                                    {

                                        if (item.AftermarketId >= 16) // FOR CHAMERBERSBURG ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                        {
                                            var profitPerPoint = (profit / 100);

                                            var wholePoints = Math.Truncate(profitPerPoint);
                                            var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                            decimal partialPoints = 0;

                                            if (partialProfit >= 25 && partialProfit < 50)
                                            {
                                                partialPoints = .25m;
                                            }
                                            else if (partialProfit >= 50 && partialProfit < 100)
                                            {
                                                partialPoints = .5m;
                                            }

                                            points = wholePoints + partialPoints;

                                        }
                                        else
                                        {
                                            if (item.AftermarketProfitPerPoint == 0)
                                            {
                                                item.AftermarketProfitPerPoint = 1;
                                            }

                                            //FOR CHAMBERSBURG -- ZurichShield is 3 points
                                            if (item.AftermarketId == 3)
                                            {
                                                item.AftermarketPoints = 3;
                                            }

                                            if (item.AftermarketProfitPerPoint > 0)
                                            {
                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                {
                                                    points = 0;
                                                }
                                                else if (profitPerPoint < item.AftermarketPoints)
                                                {
                                                    points = Math.Truncate(profitPerPoint);
                                                }
                                                else
                                                {
                                                    points = item.AftermarketPoints;
                                                }
                                            }
                                        }

                                    }
                                    else
                                    {
                                        if (item.AftermarketProfitPerPoint == 0)
                                        {
                                            item.AftermarketProfitPerPoint = 1;
                                        }

                                        if (item.AftermarketId < 16)
                                        {
                                            if (item.AftermarketProfitPerPoint > 0)
                                            {
                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                {
                                                    points = 0;
                                                }
                                                else if (profitPerPoint < item.AftermarketPoints)
                                                {
                                                    points = Math.Truncate(profitPerPoint);
                                                }
                                                else
                                                {
                                                    points = item.AftermarketPoints;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (profit > 74)
                                            {
                                                points = 1;
                                            }
                                            else if (profit > 39 && profit < 75)
                                            {
                                                points = 0.5m;
                                            }
                                            else if (profit > 0 && profit < 40)
                                            {
                                                points = 0.25m;
                                            }
                                            else
                                            {
                                                points = 0;
                                            }

                                        }
                                    }

                                    aftermarketCount += (points);


                                }

                                aftermarketCommission = dealPayscale.ps_AftermarketPerItem * (aftermarketCount * dealValue);
                                aftermarketCommissionCount = aftermarketCount;
                                totalAftermarketCount += aftermarketCount;//aftermarketItems.Count;
                                totalAftermarketItemsCount += aftermarketItems.Count;
                            }


                            commissionTotal = baseCommission + bppCommission + tradeInCommission + financeCommission + serviceCommission + maintenanceCommission + GAPCommission + aftermarketCommission + volumeCommission;

                            commissionSumTotal += commissionTotal;
                        }

                        decimal dealMoneyDue = 0;
                        var itemMoneyDue = Model.MoneyDue.FindAll(x => x.StockNumber.Trim() == deal.StockNumber.Trim());

                        if (itemMoneyDue != null)
                        {
                            foreach (var money in itemMoneyDue)
                            {
                                dealMoneyDue += money.ControlBalance;
                            }
                        }

                        var moneyDueBGColor = "";
                        var moneyDueWarning = deal.DealKey + " Details";

                        if (dealMoneyDue > 0)
                        {
                            moneyDueBGColor = "background-color: #d2070769";
                            moneyDueWarning = "There is $" + dealMoneyDue.ToString("C", nfi) + " due on this deal, notify F and I Manager.";
                        }
                        else
                        {
                            moneyDueWarning = "";
                        }

                        var titleStatus = "";
                        var itemTitleDue = Model.TitleDue.FindAll(x => x.VIN.Trim() == deal.Trade1VIN.Trim() || x.VIN.Trim() == deal.Trade2VIN.Trim());

                        if (itemTitleDue != null && itemTitleDue.Count > 0)
                        {
                            var titleDue = itemTitleDue[0];
                            var ManagerNoStatus = true;

                            //if (titleDue.TitleDueBank)
                            //{
                            //    titleStatus += "Title Due from Bank, ";
                            //    ManagerNoStatus = false;
                            //}
                            if (titleDue.TitleDueCustomer == true)
                            {
                                titleStatus += "Title Due from Customer, ";
                                ManagerNoStatus = false;
                            }
                            //if (titleDue.TitleDueInterco)
                            //{
                            //    titleStatus += "Title Due from Interco, ";
                            //    ManagerNoStatus = false;
                            //}
                            //if (titleDue.TitleDueAuction)
                            //{
                            //    titleStatus += "Title Due from Auction, ";
                            //    ManagerNoStatus = false;
                            //}

                            //if (titleDue.LienDueBank)
                            //{
                            //    titleStatus += "Lien Due from Bank, ";
                            //    ManagerNoStatus = false;
                            //}
                            if (titleDue.LienDueCustomer)
                            {
                                titleStatus += "Lien Due from Customer, ";
                                ManagerNoStatus = false;
                            }

                            if (titleDue.OdomDueCustomer)
                            {
                                titleStatus += "Odom Due from Customer, ";
                                ManagerNoStatus = false;
                            }

                            if (titleDue.POADueCust)
                            {
                                titleStatus += "POA Due, ";
                                ManagerNoStatus = false;
                            }
                            if (titleDue.PayoffDueCust)
                            {
                                titleStatus += "Payoff Due, ";
                                ManagerNoStatus = false;
                            }
                            //if (titleDue.WaitingOutSTTitle)
                            //{
                            //    titleStatus += "Waiting Out/ST Title, ";
                            //    ManagerNoStatus = false;
                            //}
                            if (titleDue.DuplicateTitleAppliedFor)
                            {
                                titleStatus += "Dup Title Applied For, ";
                                ManagerNoStatus = false;
                            }
                            //if (titleDue.Other)
                            //{
                            //    titleStatus += "Other, ";
                            //    ManagerNoStatus = false;
                            //}

                            if (ManagerNoStatus && !titleDue.ClearTitle)
                            {
                                titleStatus = "No Status";
                            }

                            titleStatus = titleStatus.TrimEnd(' ').TrimEnd(',');
                        }

                        var titleDueBGColor = "";
                        var titleDueWarning = deal.DealKey + " Details";

                        if (titleStatus != "")
                        {
                            titleDueBGColor = "background-color: #d26e0769";
                            titleDueWarning = "There is a " + titleStatus + " on this deal, notify F and I Manager.";
                        }




                        <tr>
                            @if ((bool)Session["IsCommissionAdmin"] == true)
                                                    {
                                <td><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank">@dealIndex</a></td>
                                <td class="text-center" style="@moneyDueBGColor @titleDueBGColor"><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank" title="@moneyDueWarning @titleDueWarning">@deal.DealKey</a></td>
                            }
                            else
                            {
                                <td>@dealIndex</td>
                                <td class="text-center" style="@moneyDueBGColor">@deal.DealKey</td>
                    }

                            <td class="text-center">
                                @if ((bool)Session["IsCommissionAdmin"] == true)
                                {
                                    <input type="checkbox" name="chk-@deal.DealKey" id="chk-@deal.DealKey" />
                                }
                            </td>
                            <td class="text-center">@deal.CustomerLastName</td>
                            <td class="text-center">@deal.StockNumber</td>
                            <td class="text-center">@dealNU</td>
                            @*<td class="text-center">@valueInternet</td>
                    <td class="text-center">@dealValue</td>*@
                            <td class="text-center"></td>
                            @*@if (bShowValues)
                            {*@
                                <td class="text-center">@baseCommission.ToString("C", nfi)</td>
                                <td class="text-center">@bppCommission.ToString("C", nfi)</td>
                                <td class="text-center">@tradeInCommission.ToString("C", nfi)</td>
                                <td class="text-center">@financeCommission.ToString("C", nfi)</td>
                                <td class="text-center">@serviceCommission.ToString("C", nfi)</td>
                                <td class="text-center">@maintenanceCommission.ToString("C", nfi)</td>
                                <td class="text-center">@GAPCommission.ToString("C", nfi)</td>
                                <td class="text-center"></td>
                                <td class="text-center">
                                    <a href="" id="link-@deal.DealKey">@aftermarketCommission.ToString("C", nfi)</a>


                                    @if (deal.AftermarketCount > 0)
                                    {
                                        <table class="table table-striped table-bordered" id="aftermarket-@deal.DealKey" style="display:none;position:absolute;width:40%;left: 25%; border:4px ridge #ccc">
                                            <thead>
                                                <tr style="background-color:#d9edf7">
                                                    <th>Item</th>
                                                    @*<th class="text-center">Price</th>*@
                                                    @*<th class="text-center">Sold</th>*@
                                                    @*<th class="text-center">Profit</th>*@
                                                    <th class="text-center">Points</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @{
                                                    var aftermarketItems = SalesCommission.Business.SqlQueries.GetAftermarketItemsByDealKey(deal.DealKey, new DateTime(Model.YearId, Model.MonthId, 1), true);
                                                    decimal aftermarketCount = 0;
                                                }


                                                    @foreach (var item in aftermarketItems)
                                                    {
                                                        var profit = item.AftermarketPrice - item.AftermarketCost;
                                                        decimal points = 0;

                                                        if (Model.AssociateInformation.AssociateLocation == "FAM")
                                                        {

                                                            if (item.AftermarketId >= 16) // FOR FREDERICK ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                                            {
                                                                var profitPerPoint = (profit / 100);

                                                                var wholePoints = Math.Truncate(profitPerPoint);
                                                                var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                                                decimal partialPoints = 0;

                                                                if (partialProfit >= 25 && partialProfit < 40)
                                                                {
                                                                    partialPoints = .25m;
                                                                }
                                                                else if (partialProfit >= 40 && partialProfit < 75)
                                                                {
                                                                    partialPoints = .5m;
                                                                }
                                                                else if (partialProfit >= 75)
                                                                {
                                                                    partialPoints = 1;
                                                                }


                                                                points = wholePoints + partialPoints;

                                                            }
                                                            else
                                                            {
                                                                if (item.AftermarketProfitPerPoint == 0)
                                                                {
                                                                    item.AftermarketProfitPerPoint = 1;
                                                                }

                                                                if (item.AftermarketProfitPerPoint > 0)
                                                                {
                                                                    var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                    if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                    {
                                                                        points = 0;
                                                                    }
                                                                    else if (profitPerPoint < item.AftermarketPoints)
                                                                    {
                                                                        points = Math.Truncate(profitPerPoint);
                                                                    }
                                                                    else
                                                                    {
                                                                        points = item.AftermarketPoints;
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else if (Model.AssociateInformation.AssociateLocation == "FTN")
                                                        {

                                                            if (item.AftermarketId >= 16) // FOR CHAMERBERSBURG ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                                            {
                                                                var profitPerPoint = (profit / 100);

                                                                var wholePoints = Math.Truncate(profitPerPoint);
                                                                var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                                                decimal partialPoints = 0;

                                                                if (partialProfit >= 25 && partialProfit < 50)
                                                                {
                                                                    partialPoints = .25m;
                                                                }
                                                                else if (partialProfit >= 50 && partialProfit < 100)
                                                                {
                                                                    partialPoints = .5m;
                                                                }

                                                                points = wholePoints + partialPoints;

                                                            }
                                                            else
                                                            {
                                                                if (item.AftermarketProfitPerPoint == 0)
                                                                {
                                                                    item.AftermarketProfitPerPoint = 1;
                                                                }

                                                                //FOR CHAMBERSBURG -- ZurichShield is 3 points
                                                                if(item.AftermarketId == 3)
                                                                {
                                                                    item.AftermarketPoints = 3;
                                                                }

                                                                if (item.AftermarketProfitPerPoint > 0)
                                                                {
                                                                    var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                    if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                    {
                                                                        points = 0;
                                                                    }
                                                                    else if (profitPerPoint < item.AftermarketPoints)
                                                                    {
                                                                        points = Math.Truncate(profitPerPoint);
                                                                    }
                                                                    else
                                                                    {
                                                                        points = item.AftermarketPoints;
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            if (item.AftermarketProfitPerPoint == 0)
                                                            {
                                                                item.AftermarketProfitPerPoint = 1;
                                                            }

                                                            if (item.AftermarketProfitPerPoint > 0)
                                                            {
                                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                {
                                                                    points = 0;
                                                                }
                                                                else if (profitPerPoint < item.AftermarketPoints)
                                                                {
                                                                    points = Math.Truncate(profitPerPoint);
                                                                }
                                                                else
                                                                {
                                                                    points = item.AftermarketPoints;
                                                                }
                                                            }
                                                        }

                                                        aftermarketCount += (points);

                                                <tr>
                                                    <th>@item.AftermarketName</th>
                                                    @*<th class="text-center">@item.AftermarketCost</th>*@
                                                    @*<th class="text-center">@item.AftermarketPrice</th>*@
                                                    @*<th class="text-center">@profit</th>*@
                                                    <th class="text-center">@points</th>
                                                </tr>
                                                    }
                                            </tbody>
                                            <tfoot></tfoot>

                                        </table>
                                    }



                                </td>
                                <td class="text-center">@volumeCommission.ToString("C", nfi)</td>
                                <td class="text-center"></td>
                                <td class="text-center">@commissionTotal.ToString("C", nfi)</td>

                            @*}
                            else
                            {
                                <td class="text-center">@baseCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@bppCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@tradeInCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@financeCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@serviceCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@maintenanceCommissionCount.ToString("#.##")</td>
                                <td class="text-center">@GAPCommissionCount.ToString("#.##")</td>
                                <td class="text-center"></td>
                                <td class="text-center">@aftermarketCommissionCount.ToString("#.##")</td>
                                <td class="text-center"></td>
                                <td class="text-center"></td>
                                <td class="text-center"></td>
                            }*@

                            <script type="text/javascript">
                                $('#link-@deal.DealKey').hover(function (ev) {
                                    $('#aftermarket-@deal.DealKey').stop(true, true).fadeIn();
                                }, function (ev) {
                                    $('#aftermarket-@deal.DealKey').stop(true, true).fadeOut();
                                }).mousemove(function (ev) {
                                    $('#aftermarket-@deal.DealKey').css({ left: ev.layerX + 10, top: ev.layerY + 10 });
                                });
                            </script>
                            <td class="text-center associate-approval">
                                @if (bIsAssociate)
                                {
                                    if (Model.DealApprovals != null)
                                    {
                                        var dealApproval = Model.DealApprovals.Find(x => x.DealKey == deal.DealKey);

                                        if (dealApproval != null)
                                        {
                                            @:@dealApproval.ApprovalDate.ToShortDateString()
                                        }
                                        else
                                        {
                                            <input type="checkbox" name="chk-@deal.DealKey-approval" id="chk-@deal.DealKey-approval" />
                                            <script type="text/javascript">
                                                $('#chk-@deal.DealKey-approval').bind('click', function () {

                                                    var url = '@applicationPath/Commission/UpdateDealApproval?dealKey=@deal.DealKey&yearId=@Model.YearId&monthId=@Model.MonthId';
                                                    $.ajax({
                                                        url: url,
                                                        success: $('#chk-@deal.DealKey-approval').attr("disabled", true),
                                                        type: 'POST',
                                                        dataType: 'json'
                                                    });
                                                });
                                            </script>
                                        }
                                    }

                                }
                                else
                                {
                                    if (Model.DealApprovals != null)
                                    {
                                        var dealApproval = Model.DealApprovals.Find(x => x.DealKey == deal.DealKey);

                                        if (dealApproval != null)
                                        {
                                            @:@dealApproval.ApprovalDate.ToShortDateString()
                                        }
                                    }

                                }
                            </td>
                        </tr>

                    }
                </tbody>



                @{



                    var newPercent = "0";
                    var usedPercent = "0";

                    var BPPPercent = "0";
                    var TradePercent = "0";
                    var FinancePercent = "0";
                    var ServicePercent = "0";
                    var MaintenancePercent = "0";
                    var GAPPercent = "0";
                    var AftermarketPercent = "0";

                    if (dealIndex > 0)
                    {
                        newPercent = (totalNewCount / dealIndex).ToString("P", nfi);
                        usedPercent = (totalUsedCount / dealIndex).ToString("P", nfi);

                        BPPPercent = (totalBPPCount / dealIndex).ToString("P", nfi);
                        TradePercent = (totalTradeCount / dealIndex).ToString("P", nfi);
                        FinancePercent = (totalFinanceCount / dealIndex).ToString("P", nfi);
                        ServicePercent = (totalServiceCount / dealIndex).ToString("P", nfi);
                        MaintenancePercent = (totalMaintenanceCount / dealIndex).ToString("P", nfi);
                        GAPPercent = (totalGAPCount / dealIndex).ToString("P", nfi);
                        AftermarketPercent = (totalAftermarketItemsCount / dealIndex).ToString("P", nfi);
                    }

                    decimal totalTooFewVSC = 0;

                    //if(totalServiceCount > 0 && totalServiceCount < 3)
                    //{
                    //    totalTooFewVSC = totalServiceCount * tooFewVSC;
                    //}



                    decimal SSIDeductionAmount = 0;
                    if (ssiMet == "No")
                    {
                        SSIDeductionAmount = 50 * totalNewCount;
                        SSIDeductionAmount = SSIDeductionAmount * -1;
                    }


                    commissionSubTotal = commissionSumTotal + TotalBonusAmount + totalTooFewVSC + SSIDeductionAmount;


                    decimal baseAmount = 0;

                    if (hoursPayAmount > commissionSubTotal)
                    {
                        baseAmount = hoursPayAmount;
                    }
                    else
                    {
                        baseAmount = commissionSubTotal;
                    }

                    commissionOverallTotal = baseAmount + TotalDrawAmount;

                    }


                <tfoot>
                    <tr style="background-color:#d9edf7">
                        <th class="text-right" colspan="3">Counts:</th>
                        <th class="text-center" colspan="2">New: @totalNewCount</th>
                        <th class="text-center" colspan="2">Used:@totalUsedCount</th>
                        <th class="text-center"></th>
                        @*<th class="text-center"></th>*@
                        <th class="text-center">@totalBPPCount</th>
                        <th class="text-center">@totalTradeCount</th>
                        <th class="text-center">@totalFinanceCount</th>
                        <th class="text-center">@totalServiceCount</th>
                        <th class="text-center">@totalMaintenanceCount</th>
                        <th class="text-center">@totalGAPCount</th>
                        <th class="text-center"></th>
                        <th class="text-center">                            
                            <a href="" id="aftermarket-Total">@totalAftermarketCount</a>



                                <table class="table table-striped table-bordered" id="aftermarket-Total-table" style="display:none;position:absolute;width:50%;left: 15%; bottom:0%; border:4px ridge #ccc">
                                    <thead>
                                        <tr style="background-color:#d9edf7">
                                            <th></th>
                                            <th class="text-center">Deal</th>
                                            <th>Item</th>
                                            @*<th class="text-center">Price</th>*@
                                            @*<th class="text-center">Sold</th>*@
                                            @*<th class="text-center">Profit</th>*@
                                            <th class="text-center">Points</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{ var aftermarketIndex = 1;}
                                        @foreach (var deal in Model.AssociateInformation.AssociateDeals)
                                        {
                                            if (deal.AftermarketCount > 0)
                                            {
                                                var aftermarketItems = SalesCommission.Business.SqlQueries.GetAftermarketItemsByDealKey(deal.DealKey, new DateTime(Model.YearId, Model.MonthId, 1), true);
                                                decimal aftermarketCount = 0;

                                                foreach (var item in aftermarketItems)
                                                {
                                                    var profit = item.AftermarketPrice - item.AftermarketCost;
                                                    decimal points = 0;

                                                    if (Model.AssociateInformation.AssociateLocation == "FAM")
                                                    {

                                                        if(item.AftermarketId >= 16) // FOR FREDERICK ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                                        {
                                                            var profitPerPoint = (profit / 100);

                                                            var wholePoints = Math.Truncate(profitPerPoint);
                                                            var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                                            decimal partialPoints = 0;

                                                            if(partialProfit >= 25 && partialProfit < 40)
                                                            {
                                                                partialPoints = .25m;
                                                            }
                                                            else if (partialProfit >= 40 && partialProfit < 75)
                                                            {
                                                                partialPoints = .5m;
                                                            }
                                                            else if (partialProfit >= 75)
                                                            {
                                                                partialPoints = 1;
                                                            }


                                                            points = wholePoints + partialPoints;

                                                        }
                                                        else
                                                        {
                                                            if (item.AftermarketProfitPerPoint == 0)
                                                            {
                                                                item.AftermarketProfitPerPoint = 1;
                                                            }

                                                            if (item.AftermarketProfitPerPoint > 0)
                                                            {
                                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                {
                                                                    points = 0;
                                                                }
                                                                else if (profitPerPoint < item.AftermarketPoints)
                                                                {
                                                                    points = Math.Truncate(profitPerPoint);
                                                                }
                                                                else
                                                                {
                                                                    points = item.AftermarketPoints;
                                                                }
                                                            }
                                                        }

                                                    }
                                                    else if (Model.AssociateInformation.AssociateLocation == "FTN")
                                                    {

                                                        if (item.AftermarketId >= 16) // FOR CHAMERBERSBURG ONLY, 16-19 are 1 point for every $100 profit, then fractions
                                                        {
                                                            var profitPerPoint = (profit / 100);

                                                            var wholePoints = Math.Truncate(profitPerPoint);
                                                            var partialProfit = (profitPerPoint - Math.Truncate(profitPerPoint)) * 100;

                                                            decimal partialPoints = 0;

                                                            if (partialProfit >= 25 && partialProfit < 50)
                                                            {
                                                                partialPoints = .25m;
                                                            }
                                                            else if (partialProfit >= 50 && partialProfit < 100)
                                                            {
                                                                partialPoints = .5m;
                                                            }

                                                            points = wholePoints + partialPoints;

                                                        }
                                                        else
                                                        {
                                                            if (item.AftermarketProfitPerPoint == 0)
                                                            {
                                                                item.AftermarketProfitPerPoint = 1;
                                                            }

                                                            //FOR CHAMBERSBURG -- ZurichShield is 3 points
                                                            if (item.AftermarketId == 3)
                                                            {
                                                                item.AftermarketPoints = 3;
                                                            }

                                                            if (item.AftermarketProfitPerPoint > 0)
                                                            {
                                                                var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                                if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                                {
                                                                    points = 0;
                                                                }
                                                                else if (profitPerPoint < item.AftermarketPoints)
                                                                {
                                                                    points = Math.Truncate(profitPerPoint);
                                                                }
                                                                else
                                                                {
                                                                    points = item.AftermarketPoints;
                                                                }
                                                            }
                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (item.AftermarketProfitPerPoint == 0)
                                                        {
                                                            item.AftermarketProfitPerPoint = 1;
                                                        }

                                                        if (item.AftermarketProfitPerPoint > 0)
                                                        {
                                                            var profitPerPoint = (profit / item.AftermarketProfitPerPoint);

                                                            if (profitPerPoint < item.AftermarketPoints && item.AftermarketPoints == 1)
                                                            {
                                                                points = 0;
                                                            }
                                                            else if (profitPerPoint < item.AftermarketPoints)
                                                            {
                                                                points = Math.Truncate(profitPerPoint);
                                                            }
                                                            else
                                                            {
                                                                points = item.AftermarketPoints;
                                                            }
                                                        }
                                                    }
                                                    aftermarketCount += (points);

                                                    <tr>
                                                        <th class="text-center">@aftermarketIndex</th>
                                                        <th class="text-center">@deal.DealKey</th>
                                                        <th>@item.AftermarketName</th>
                                                        @*<th class="text-center">@item.AftermarketCost</th>*@
                                                        @*<th class="text-center">@item.AftermarketPrice</th>*@
                                                        @*<th class="text-center">@profit</th>*@
                                                        <th class="text-center">@points</th>
                                                    </tr>

                                                    aftermarketIndex += 1;
                                                }
                                            }

                                        }

                                    </tbody>
                                    <tfoot></tfoot>

                                </table>
                                     
                            <script type="text/javascript">
                                $('#aftermarket-Total').hover(function (ev) {
                                    $('#aftermarket-Total-table').stop(true, true).fadeIn();
                                }, function (ev) {
                                    $('#aftermarket-Total-table').stop(true, true).fadeOut();
                                }).mousemove(function (ev) {
                                    $('#aftermarket-Total-table').css({ left: ev.layerX + 10, top: ev.layerY + 10 });
                                });
                            </script>                            
                        </th>                        
                        
@if (bShowValues)
{
    <th class="text-right" colspan="2">Sum Total:</th>
    <th class="text-center">@commissionSumTotal.ToString("C")</th>
    <th class="text-center"></th>
}
else
{
    <th class="text-center"></th>
    <th class="text-center"></th>
    <th class="text-center"></th>
}
                    </tr>
                    <tr style="background-color:#d9edf7">
                        <th class="text-right" colspan="3">Percentages:</th>
                        <th class="text-center" colspan="2">New: @newPercent</th>
                        <th class="text-center" colspan="2">Used: @usedPercent</th>
                        @*<th class="text-center"></th>*@
                        <th class="text-center"></th>
                        <th class="text-center">@BPPPercent</th>
                        <th class="text-center">@TradePercent</th>
                        <th class="text-center">@FinancePercent</th>
                        <th class="text-center">@ServicePercent</th>
                        <th class="text-center">@MaintenancePercent</th>
                        <th class="text-center">@GAPPercent</th>
                        <th class="text-center"></th>
                        <th class="text-center">@AftermarketPercent</th>

@if (bShowValues)
{
                        <th class="text-right" colspan="2">Bonus:</th>
                        <th class="text-center">@TotalBonusAmount.ToString("C")</th>
                        <th class="text-center"></th>
}
else
{
    <th class="text-center"></th>
        <th class="text-center"></th>
        <th class="text-center"></th>
}
                    </tr>
                    @*@if (Model.AssociateInformation.AssociatePayscale == "FL")
                    {
                    <tr style="background-color:#d9edf7">
                        <th class="text-center" colspan="18"></th>
                        <th class="text-right" colspan="2">Less than 3 VSC:</th>
                        <th class="text-center">@totalTooFewVSC.ToString("C")</th>
                    </tr>
                    }*@
@if (bShowValues)
{
    if (ssiMet.ToLower() == "no")
    {
        <tr style="background-color:#d9edf7">
            <th class="text-center" colspan="16"></th>
            <th class="text-right" colspan="2">SSI Deduction:</th>
            <th class="text-center">@SSIDeductionAmount.ToString("C")</th>
            <th class="text-center"></th>
        </tr>
    }

                    <tr style="background-color:#d9edf7">
                        <th class="text-center" colspan="16"></th>
                        <th class="text-right" colspan="2">Comm Sub Total:</th>
                        <th class="text-center">@commissionSubTotal.ToString("C")</th>
                        <th class="text-center"></th>
                    </tr>
}
                    @if ((bool)Session["IsCommissionAdmin"] == true || DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 1).AddMonths(1))
                    {
                        if (bShowValues)
                        {
                        <tr style="background-color:#d9edf7">
                            <th class="text-center" colspan="16"></th>
                            <th class="text-right" colspan="2">Greater of Comm or Salary:</th>
                            <th class="text-center">@baseAmount.ToString("C")</th>
                            <th class="text-center"></th>
                        </tr>
                        <tr style="background-color:#d9edf7">
                            <th class="text-center" colspan="16"></th>
                            <th class="text-right" colspan="2">Advances (Draws):</th>
                            <th class="text-center">@TotalDrawAmount.ToString("C")</th>
                            <th class="text-center"></th>
                        </tr>
                        <tr style="background-color:#d9edf7; font-size:16px;">
                            <th class="text-center" colspan="16"></th>
                            <th class="text-right" colspan="2">Comm Due:</th>
                            <th class="text-center">@commissionOverallTotal.ToString("C")</th>
                            <th class="text-center"></th>
                        </tr>
                            }
                        }
                </tfoot>

            </table>
                    }
        </div>
    </div>
            }

@section Scripts
{
    

<script type="text/javascript">

    $(document).ready(function () {

        $('#select-anchor').change(function () {
            var targetPosition = $("#" + $(this).val()).offset().top - 50;
            $('html,body').animate({ scrollTop: targetPosition }, 'slow');
        });

        var dialogWidth = 0;

        dialogWidth = ($(window).width() * .75);

        if ($(window).width() > 1199) {
            dialogWidth = 800;
        }

        $('body').on('click','.editInfo', function (event) {

            var id = $(this).attr('rel');
            var url = "@applicationPath/Commission/BonusAndDraws/" + id + "/@Model.MonthId/@Model.YearId";
            var dialogBox = $("<div>");

            $(dialogBox).dialog({
                resizable: false,
                height:"auto",
                width: dialogWidth,
                position: { my: "center", at: "top+25%", of: window },
                title: 'Associate Bonus and Advances (Draws)',
                modal: true,
                open: function (event, ui) {
                    $(this).load(url);
                    //$('#BonusDraws').validate();
                },
                buttons: {
                    "Save": function () {
                        var $this = this;
                        var form = $('#BonusDraws', $this);
                        //if (!$(form).valid()) {
                        //    return false;
                        //}

                        $.ajax({
                            async: false,
                            type: 'POST',
                            url: form.attr("action"),
                            data: $(form).serialize(),
                            success: $($this).dialog("close").dialog("destroy").remove()
                        });

                        location.reload();
                   },

                    "Close": function () {
                        $(this).dialog("close");
                        $(this).empty();
                    }
                }
            });
            $(dialogBox).dialog('open');
        });


    });


</script>    
    }

