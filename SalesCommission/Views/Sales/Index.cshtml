@model SalesCommission.Models.SalesLogReportModel

@{
    ViewBag.Title = "Sales Dashboard";
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }
}

<style type="text/css">
    .ftd-entry {
        display: none;
    }
    .comments-entry {
        display: none;
    }
    th.text-center.extra-left {
        border-left: 3px solid #dddddd;
    }
    td.text-center.extra-left {
        border-left: 3px solid #dddddd;
    }
    th .extra-right, td .extra-right {
        border-right: 2px;
    }

    table.dataTable thead>tr>th.sorting_asc, table.dataTable thead>tr>th.sorting_desc, table.dataTable thead>tr>th.sorting, table.dataTable thead>tr>td.sorting_asc, table.dataTable thead>tr>td.sorting_desc, table.dataTable thead>tr>td.sorting {
        padding-right: 20px;
    }

    table.dataTable thead .sorting:after, table.dataTable thead .sorting_asc:after, table.dataTable thead .sorting_desc:after, table.dataTable thead .sorting_asc_disabled:after, table.dataTable thead .sorting_desc_disabled:after {
        position: absolute;
        bottom: 0px;
        right: 1px;
        display: block;
        font-family: 'Glyphicons Halflings';
        opacity: 0.5;
    }
    .tooltip-inner {
        white-space:pre;
        max-width: none;
    }
    .table thead>tr>th, .table tbody>tr>th, .table tfoot>tr>th, .table thead>tr>td, .table tbody>tr>td, .table tfoot>tr>td
    {
        padding:6px;
    }

    @@media (min-width: 1200px) {
        .container {
            max-width: 80%;
        }
    }
</style>

<div class="jumbotron">
    <h1>Sales Dashboard</h1>
    <div class="row">
        <div class="col-sm-8">
            <h3>Select a Store and Date:</h3>
        </div>
        <div class="col-sm-4" style="background-color:lightgrey">
            <h3>Quick Deal Lookup</h3>
        </div>

    </div>
@using (Html.BeginForm())
{
        <div class="row">
            <div class="col-sm-8">
                <div class="row">
                    <div class="col-sm-4">
                        @Html.DropDownListFor(n => n.StoreId, new SelectList(SalesCommission.Business.Enums.Stores, "StoreId", "Name"), "- Select a Store -", new { @class = "form-control form-inline" })
                    </div>
                    <div class="col-sm-3">
                        @Html.DropDownListFor(n => n.MonthId, new SelectList(SalesCommission.Business.Enums.Months, "MonthId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                    <div class="col-sm-3">
                        @Html.DropDownListFor(n => n.YearId, new SelectList(SalesCommission.Business.Enums.Years, "YearId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <input type="checkbox" name="chkIncludeHandyman" id="chkIncludeHandyman" @(Model.IncludeHandyman == true ? "checked" : "") /> <span style="font-size:14px;">Include Handyman Deals</span>
                        <input type="checkbox" name="chkShowChargebacks" id="chkShowChargebacks" @(Model.ShowChargebacks == true ? "checked" : "") /> <span style="font-size:14px;">Show Chargebacks</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-8">
                        <button class="btn btn-primary" type="submit" value="submit" name="Submit">Submit</button>
                    </div>
                </div>
            </div>
            <div class="col-sm-4" style="background-color:lightgrey">
                <div class="row">
                    <div class="col-sm-6" style="background-color:lightgrey">
                        <h5>Deal Number</h5>
                        @Html.TextBoxFor(n => n.DealNumber, new { @class = "form-control form-inline", style = "margin-bottom:11px;" })
                    </div>
                    <div class="col-sm-6" style="background-color:lightgrey">
                        <h5>Customer</h5>
                        @Html.TextBoxFor(n => n.CustomerName, new { @class = "form-control form-inline", style = "margin-bottom:11px;" })                        
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6" style="background-color:lightgrey">
                        <button class="btn btn-primary" style="vertical-align: top" type="submit" value="submit" name="Submit">Get Deal</button>
                    </div>
                    <div class="col-sm-6" style="background-color:lightgrey">
                        
                    </div>
                </div>
            </div>
                
        </div>


}
@if (Model.SalesReportDetails != null)
            {


                using (Html.BeginForm())
                {
    <div class="row">
        <div class="col-sm-12">
            <h4 class="ftd-toggle">Month End Factory To Dealer Cash <i class="fa fa-chevron-down" aria-hidden="true"></i></h4>    
            

        </div>
            
    </div>
            
                <div class="row">
        <div class="col-sm-12 ftd-entry" style="background-color:lightgrey; padding:10px;">
            @Html.HiddenFor(n => n.StoreId)
            @Html.HiddenFor(n => n.MonthId)
            @Html.HiddenFor(n => n.YearId)
            @Html.HiddenFor(n => n.IncludeHandyman)


            <table class="table table-bordered" style="background-color:#fff;font-size:14px;">
                <tr style="background-color:#d9edf7">
                    <th class="text-center">Make</th>
                    <th class="text-center">Month End Factory To Dealer Cash</th>
                    <th class="text-center">Month End CPO Dealer Cash</th>
                    <th class="text-center">Comments/Program Codes</th>
                </tr>
                @{
            var index = 1;
            var locationCode = "";
        }
                @foreach (var detail in Model.SalesReportDetails)
        {

            var brandCode = detail.BrandId;

            if (brandCode != "UU")
            {
                foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                {
                    if (mapping.StoreId == Model.StoreId)
                    {
                        locationCode = mapping.LocationId;
                        break;
                    }
                }
                var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode);

                if (factoryToDealerCash == null)
                {
                    factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                }

                        <tr>
                            <td class="text-center" style="vertical-align:middle">
                                @detail.MakeName
                                <input type="hidden" name="brandId-@index" id="brandId-@index" value="@detail.BrandId" />
                            </td>
                            <td class="text-center" style="vertical-align:middle">
                                <input type="text" id="ftdAmt-@index" name="ftdAmt-@index" value="@factoryToDealerCash.FTDAmount"/>
                            </td>
                            <td class="text-center" style="vertical-align:middle">
                                <input type="text" id="ftdCPOAmt-@index" name="ftdCPOAmt-@index" value="@factoryToDealerCash.FTDCPOAmount" />
                            </td>
                            <td class="text-center" width="70%">
                                <textarea id="ftdComments-@index" name="ftdComments-@index" style="max-width:500px;" cols="200">@factoryToDealerCash.FTDComment</textarea>
                            </td>
                        </tr>

                        index += 1;
                    }
}

                @if (Model.FactoryToDealerCash != null && Model.FactoryToDealerCash.Count > 0)
{
    var ftd = Model.FactoryToDealerCash[0];

                    <tr class="text-center">
                        <td colspan="4">
                            <p>Last Updated by @ftd.UpdatedBy on @ftd.UpdateDate.ToShortDateString()</p>
                        </td>
                    </tr>

                }

                <tr class="text-center">
                    <td colspan="4">
                        <button class="btn btn-primary" type="submit" value="Save" name="btnSave">Save FTD</button>
                    </td>
                </tr>
            </table>
            <input type="hidden" name="indexValue" id="indexValue" value="@index" />
            <input type="hidden" name="locationCode" id="locationCode" value="@locationCode" />


        </div>
    </div>
                        }
                    }

@if (Model.SalesReportDetails != null)
{

    using (Html.BeginForm())
    {
        var locationCode = "";
        <div class="row">
            <div class="col-sm-12">
                <h4 class="comments-toggle">Manager Comments <i class="fa fa-chevron-down" aria-hidden="true"></i>
                
                @foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                {
                    if (mapping.StoreId == Model.StoreId)
                    {
                        locationCode = mapping.LocationId;
                        break;
                    }
                }


                @foreach (var item in Model.FactoryToDealerCash)
                {
                    if (item.ManagerComment != null && item.ManagerComment != "" && item.StoreId == locationCode)
                    {
                        <i class="fa fa-comments-o" aria-hidden="true"></i>
                        
                        break;
                        
                    }
                }
                </h4>
            </div>

        </div>
        <div class="row">
            <div class="col-sm-12 comments-entry" style="background-color:lightgrey; padding:10px;">
                @Html.HiddenFor(n => n.StoreId)
                @Html.HiddenFor(n => n.MonthId)
                @Html.HiddenFor(n => n.YearId)
                @Html.HiddenFor(n => n.IncludeHandyman)

                <table class="table table-bordered" style="background-color:#fff;font-size:14px;">
                    <tr style="background-color:#d9edf7">
                        <th class="text-center">Make</th>
                        <th class="text-center">Manager Comments</th>
                    </tr>
                    @{
                var index = 1;
                
            }
                    @foreach (var detail in Model.SalesReportDetails)
            {

                var brandCode = detail.BrandId;

                foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                {
                    if (mapping.StoreId == Model.StoreId)
                    {
                        locationCode = mapping.LocationId;
                        break;
                    }
                }
                var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode);

                if (factoryToDealerCash == null)
                {
                    factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                }

                            <tr>
                                <td class="text-center" style="vertical-align:middle">
                                    @detail.MakeName
                                    <input type="hidden" name="brandId-@index" id="brandId-@index" value="@detail.BrandId" />
                                </td>
                                <td class="text-center" width="80%">
                                    <textarea id="ftdComments-@index" name="managerComments-@index" style="max-width:600px;" cols="300">@factoryToDealerCash.ManagerComment</textarea>
                                </td>
                            </tr>

                        index += 1;

                    }


                    <tr class="text-center">
                        <td colspan="3">                            
                            <button class="btn btn-primary" type="submit" value="Save" name="btnSaveComments">Save Comments</button>
                        </td>
                    </tr>
                </table>
                <input type="hidden" name="indexValue" id="indexValue" value="@index" />
                <input type="hidden" name="locationCode" id="locationCode" value="@locationCode" />

            </div>
        </div>
                            }
                        }

    </div>
@if (Model.SalesReportDetails != null)
{
    var currentSelectedDate = new DateTime(Model.YearId, Model.MonthId, 1);
    var grossChangeDate = new DateTime(2020, 1, 31);

    <div class="row">
        <div class="col-md-12">
            <h3>Sales Log Report</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h5><strong>* Calculations only include Showroom validated deals *</strong></h5>
        </div>
    </div>

    <div class="row">
        <table class="table table-bordered table-striped" id="section1">
            <thead>
                <tr style="background-color:#d9edf7">
                    <th class="text-center">Make</th>
                    
                    <th class="text-center" colspan="4">Deal Counts</th>
                    
                    @*<th class="text-center">Show Val Deals</th>
                    <th class="text-center">Unval Deals</th>
                    <th class="text-center">Off Val</th>*@

                    <th class="text-center">Leases</th>
                    <th class="text-center">&nbsp;CPO&nbsp;</th>
                    <th class="text-center">Handyman</th>
                    <th class="text-center">NextCar</th>
                    <th class="text-center">Front Gross</th>
                    <th class="text-center">ME FTD</th>
                    @*<th class="text-center">Other</th>*@
                    <th class="text-center">Fin Inc</th>
                    <th class="text-center">VSC</th>
                    <th class="text-center">MC</th>
                    <th class="text-center">GAP</th>
                    <th class="text-center">BPP/AFT</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Memo: FTD</th>
                    <th class="text-center">DX Inc</th>
                    <th class="text-center">Front PVR</th>
                    <th class="text-center">Back PVR</th>
                    <th class="text-center">Total PVR</th>                    
                </tr>
                <tr style="background-color:#d9edf7">
                    <th  class="text-center"style="padding:2px; font-size:10px"></th>
                    <th  class="text-center"style="padding:2px; font-size:10px">T</th>
                    <th  class="text-center"style="padding:2px; font-size:10px">SV</th>
                    <th  class="text-center"style="padding:2px; font-size:10px">SUV</th>
                    <th  class="text-center"style="padding:2px; font-size:10px">OUV</th>
                    <th colspan="4" class="text-center" style="padding:2px; font-size:10px"></th>
                    <th colspan="2" class="text-center" style="padding:2px; font-size:10px">Front</th>
                    <th colspan="5" class="text-center" style="padding:2px; font-size:10px">Back</th>
                    <th colspan="6" style="padding:2px; font-size:10px"></th>
                </tr>
            </thead>
            <tbody>
                @{
                    var TotalDealCount = 0;
                    var TotalUnValidatedCount = 0;
                    var TotalOfficeValidatedCount = 0;

                    double TotalDealGrossAmount = 0;
                    double TotalFinIncAmount = 0;
                    double TotalVSCAmount = 0;
                    double TotalMCAmount = 0;
                    double TotalFTDAmount = 0;

                    double TotalMEFTDAmount = 0;
                    double TotalGapAmount = 0;
                    double TotalOtherAmount = 0;
                    double TotalTotalAmount = 0;
                    double TotalDXAmount = 0;
                    double TotalPVRAmount = 0;
                    var TotalHoldbackCount = 0;
                    double TotalValuePercentage = 0;
                    double TotalValidatedDealsCount = 0;
                    double TotalFrontPVRAmount = 0;
                    double TotalBackPVRAmount = 0;
                    double TotalUsedDeals = 0;
                    double TotalValidatedUsedDeals = 0;
                    double TotalBackGrossItemAmount = 0;

                    double TotalNextCarCount = 0;
                    double TotalHandymanCount = 0;
                    double TotalCPOCount = 0;
                    double TotalLeaseCount = 0;
                    double TotalPotentialHandyman = 0;
                    double TotalPotentialCPO = 0;
                    double TotalPotentialLease = 0;

                    var UsedMakeId = "";
                    var AllMakeIds = "";
                    var index = 0;
                    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
                    nfi.CurrencyDecimalDigits = 0;
                    nfi.PercentDecimalDigits = 1;
                    nfi.PercentPositivePattern = 1;
                    nfi.CurrencySymbol = "";
                    //nfi.PercentSymbol = "";

                    var newDetails = Model.SalesReportDetails.FindAll(x => x.BrandId != "UU").OrderBy(x => x.MakeName).ToList(); ;
                    var usedDetails = Model.SalesReportDetails.FindAll(x => x.BrandId == "UU").OrderBy(x => x.MakeName).ToList(); ;

                    newDetails.AddRange(usedDetails);

                    Model.SalesReportDetails = newDetails;
                }

                @foreach (var detail in Model.SalesReportDetails)
                {
                    if (detail.BrandId != "AA")
                    {
                        TotalDealCount = TotalDealCount + detail.DealCount;
                    }
                    if (detail.BrandId == "UU")
                    {
                        UsedMakeId = detail.MakeId;
                        TotalUsedDeals = detail.DealCount;
                        TotalValidatedUsedDeals = detail.DealCount - detail.UnValidatedCount;

                    }
                }
                

                @foreach (var detail in Model.SalesReportDetails)
                {
                    double MonthEndFTDAmount = 0;
                    double CPOMonthEndFTDAmount = 0;

                    var brandCode = detail.BrandId;
                    var locationCode = "";

                    foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                    {
                        if (mapping.StoreId == Model.StoreId)
                        {
                            locationCode = mapping.LocationId;
                            break;
                        }
                    }

                    var usedId = 0;
                    var usedBrand = "";
                    if (detail.AutoMall.ToUpper() == "CLEARWATER")
                    {
                        switch (detail.MakeId) {
                            case "41":  //Chrysler
                                usedId = 94;//96;
                                break;
                            case "43": //Hyundai
                                usedId = 70;
                                break;
                            case "42": //Jeep
                                usedId = 94;
                                break;
                            case "44": //Subaru
                                usedId = 95;
                                break;
                            //case "96":  //Chrysler
                            //    usedBrand = "CH";
                            //    break;
                            case "70": //Hyundai
                                usedBrand = "HY";
                                break;
                            case "94": //Jeep
                                usedBrand = "JE,CH";
                                break;
                            case "95": //Subaru
                                usedBrand = "SU";
                                break;
                        }

                        var usedDealListing = Model.SalesReportDetails.Find(o => o.MakeId == usedId.ToString());
                        if (usedDealListing != null)
                        {
                            TotalValidatedUsedDeals = usedDealListing.DealCount - usedDealListing.UnValidatedCount;

                        }

                        UsedMakeId = usedId.ToString();

                    }

                    if (brandCode == "UU" && locationCode == "CJE")
                    {
                        brandCode = detail.MakeName;
                    }
                    else if (brandCode == "UU")
                    {
                        brandCode = "Used";
                    }
                    var objectivesStandards = Model.ObjectivesAndStandards.Find(o => o.LocationId == locationCode + brandCode);

                    if (objectivesStandards == null)
                    {
                        objectivesStandards = new SalesCommission.Models.ObjectivesAndStandards();
                    }

                    var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode);

                    if (factoryToDealerCash == null)
                    {
                        factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                        MonthEndFTDAmount = 0;
                    }
                    else
                    {
                        MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                        //detail.FTDAmount = detail.FTDAmount + (double) factoryToDealerCash.FTDAmount;
                        detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }

                    if (brandCode == "Used")
                    {
                        foreach (var ftd in Model.FactoryToDealerCash)
                        {
                            MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                        }
                        detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }
                    else if (detail.BrandId == "UU" && locationCode == "CJE")
                    {

                        var brands = usedBrand.Split(',');

                        foreach (var brand in brands)
                        {
                            var ftd = Model.FactoryToDealerCash.Find(o => o.BrandId == brand);
                            if (ftd != null)
                            {
                                MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                                detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                            }
                        }
                    }

                    var validatedDeals = detail.DealCount - detail.UnValidatedCount;

                     <tr>


                         <td class="text-center">
                            <a data-toggle="collapse" id="@detail.MakeName.Replace(" ","")" style="cursor: pointer;" data-target="#collapse-@index">@detail.MakeName <i class="fa fa-caret-down" aria-hidden="true"></i></a>
                        </td>
                        
                         <td class="text-center">@detail.DealCount</td>
                         <td class="text-center">@validatedDeals</td>
                        <td class="text-center"><a href="@applicationPath/Sales/UnvalidatedDeals/@detail.MakeId/@Model.MonthId/@Model.YearId/">@detail.UnValidatedCount</a></td>
                        <td class="text-center"><a href="@applicationPath/Sales/OfficeValidateDeals/@detail.MakeId/@Model.MonthId/@Model.YearId">@(validatedDeals - detail.OfficeValidatedCount)</a></td>

                        @{
                            var leasePercent = ((double)detail.LeaseCount / (double)validatedDeals).ToString("P", nfi);
                            var handyPercent = ((double)detail.HandymanCount / (double)validatedDeals).ToString("P", nfi);
                            var cpoPercent = ((double)detail.CPOCount / TotalValidatedUsedDeals).ToString("P", nfi);
                            var nextCarPercent = ((double)detail.NextCarCount / TotalValidatedUsedDeals).ToString("P", nfi);
                    }

                        @if (brandCode.Contains("Used"))
                        {
                            if (locationCode == "CJE")
                            {
                                TotalPotentialCPO += validatedDeals;
                            }
                            TotalPotentialHandyman += validatedDeals;
                            TotalHandymanCount += detail.HandymanCount;
                            TotalNextCarCount += detail.NextCarCount;
                            <td class="text-center">-</td>


                            if (detail.MakeId == "87")
                            {
                                TotalPotentialCPO = TotalValidatedUsedDeals;
                                TotalCPOCount = detail.CPOCount;
                                <td class="text-center"><a href="@applicationPath/Sales/CPODeals/@UsedMakeId/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="CPO % = @detail.CPOCount / @TotalValidatedUsedDeals Used Deals">@detail.CPOCount<br />@cpoPercent</a></td>
                            }
                            else
                            {
                                <td class="text-center">-</td>
                            }
                            <td class="text-center"><a href="@applicationPath/Sales/HandymanDeals/@detail.MakeId/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="Handy % = @detail.HandymanCount / @validatedDeals Deals">@detail.HandymanCount<br />@handyPercent</a></td>
                            <td class="text-center"><a href="@applicationPath/Sales/NextCarDeals/@detail.MakeId/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="NextCar % = @detail.NextCarCount / @TotalValidatedUsedDeals Deals">@detail.NextCarCount<br />@nextCarPercent</a></td>
                        }
                        else
                        {

                            if (locationCode != "CJE")
                            {
                                TotalPotentialCPO = TotalValidatedUsedDeals;
                            }
                            TotalCPOCount += detail.CPOCount;
                            TotalPotentialLease += validatedDeals;
                            TotalLeaseCount += detail.LeaseCount;
                            <td class="text-center"><a href="@applicationPath/Sales/LeaseDeals/@detail.MakeId/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="Lease % = @detail.LeaseCount / @validatedDeals Deals">@detail.LeaseCount<br />@leasePercent</a></td>
                            <td class="text-center"><a href="@applicationPath/Sales/CPODeals/@UsedMakeId/@Model.MonthId/@Model.YearId/@detail.MakeName" data-toggle="tooltip" title="CPO % = @detail.CPOCount / @TotalValidatedUsedDeals Used Deals">@detail.CPOCount<br />@cpoPercent</a></td>
                            <td class="text-center">-</td>
                            <td class="text-center">-</td>
                        }
                         

                        <td class="text-center">@detail.DealGrossAmount.ToString("C", nfi)</td>

                        <td class="text-center">@MonthEndFTDAmount.ToString("C", nfi)</td>
                        @*<td class="text-center">@detail.OtherAmount.ToString("C", nfi)</td>*@
                         <td class="text-center">@detail.FinIncAmount.ToString("C", nfi)</td>
                        <td class="text-center">@detail.VSCAmount.ToString("C", nfi)</td>
                         <td class="text-center">@detail.MCAmount.ToString("C", nfi)</td>
                        <td class="text-center">@detail.GapAmount.ToString("C", nfi)</td>
                         <td class="text-center">@detail.BackGrossItemAmount.ToString("C", nfi)</td>
                            <td class="text-center">@detail.TotalAmount.ToString("C", nfi)</td>
                         <td class="text-center">@detail.FTDAmount.ToString("C", nfi)</td>
                        <td class="text-center">@detail.DXAmount.ToString("C", nfi)</td>

                        @{ 

                            var backGrossAmount = detail.FinIncAmount + detail.VSCAmount + detail.GapAmount + detail.MCAmount; // + BPP + Nitrogen + Zurich + TireWheel + Security + OtherAftermarket

                            if (currentSelectedDate > grossChangeDate)
                            {
                                backGrossAmount += detail.BackGrossItemAmount;
                            }

                            var brandFrontPVR = Math.Round((detail.DealGrossAmount + MonthEndFTDAmount) / validatedDeals); //+ detail.OtherAmount+ detail.FTDAmount 
                            var brandBackPVR = Math.Round((backGrossAmount) / validatedDeals);
                            var brandPVR = Math.Round((detail.DealGrossAmount  + MonthEndFTDAmount + backGrossAmount) / validatedDeals); //+ detail.OtherAmount+ detail.FTDAmount
                        }
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="Front PVR = $@(detail.DealGrossAmount + MonthEndFTDAmount) over @validatedDeals deals">@brandFrontPVR.ToString("C", nfi)</a></td>                        
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="Back PVR = $@(backGrossAmount) over @validatedDeals deals">@brandBackPVR.ToString("C", nfi)</a></td>                        
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="Total PVR = $@(detail.DealGrossAmount + MonthEndFTDAmount + backGrossAmount) over @validatedDeals deals">@brandPVR.ToString("C", nfi)</a></td>
                        @*<td class="text-center">@detail.ValuePercentage.ToString("P")</td>
                        <td class="text-center">@detail.VarianceCount</td>
                        <td class="text-center">@detail.VariancePercentage.ToString("P")</td>*@
                    </tr>


                    <tr id="collapse-@index" class="collapse out" style="background-color:#f5f5f5">
                        <td colspan="22">
                            <h4>@detail.MakeName Deals</h4>
                            <h5><a href="@applicationPath/Sales/OfficeValidateDeals/@detail.MakeId/@Model.MonthId/@Model.YearId">Office To Be Validated</a></h5>
                            <table class="table table-bordered table-striped" style="font-size:12px" id="table-@detail.MakeId">
                                <thead style="font-size:11px">
                                    <tr>
                                        <th></th>
                                        <th class="text-center">Deal</th>
                                        <th class="text-center">Customer</th>
                                        <th class="text-center">Deal Date</th>
                                        <th class="text-center">Days in Stk</th>
                                        <th class="text-center">Stk</th>
                                        <th class="text-center">Model</th>
                                        @*<th class="text-center">V/I</th>*@
                                        <th class="text-center">Deal Gross</th>
                                        <th class="text-center">Fin Inc</th>
                                        <th class="text-center">Bank Fee</th>
                                        <th class="text-center">VSC</th>
                                        <th class="text-center">MC</th>
                                        <th class="text-center">GAP</th>
                                        <th class="text-center">BPP/AFT</th>
                                        <th class="text-center">Total</th>
                                        <th class="text-center">Memo: FTD</th>
                                        <th class="text-center">Associates</th>
                                        <th class="text-center">Fin Src</th>
                                        <th class="text-center">Fin Mgr</th>
                                        <th class="text-center">Sales Mgr</th>
                                        <th class="text-center">Rate Spread</th>
                                        <th class="text-center">Var</th>
                                        <th class="text-center">SV Days</th>
                                        <th class="text-center">OV Days</th>
                                        <th class="text-center">Deal Var</th>
                                    </tr>
                                </thead>
                                <tbody id="tbodyMake-@detail.MakeId">
                                    <tr>
                                        <td id="loadingRow-@detail.MakeId" colspan="24" style="text-align:center"><strong>Loading Deals, please wait...</strong></td>
                                    </tr>
                                    <script type="text/javascript">
                                        $('#@detail.MakeName.Replace(" ","")').bind('click', function () {

                    var url = '@applicationPath/Sales/GetBrandDeals?makeId=@detail.MakeId&yearId=@Model.YearId&monthId=@Model.MonthId';
                                            $.ajax({ url: url, success: DataRetrieved, type: 'POST', dataType: 'json' });
                });
                                    </script>

                                </tbody>
                            </table>
                        </td>
                    </tr>

                                AllMakeIds = AllMakeIds + detail.MakeId + ",";

                                if (detail.BrandId != "AA")
                                {
                                    TotalValidatedDealsCount = TotalValidatedDealsCount + validatedDeals;
                                    TotalUnValidatedCount = TotalUnValidatedCount + detail.UnValidatedCount;
                                    TotalOfficeValidatedCount = TotalOfficeValidatedCount + detail.OfficeValidatedCount;
                                }


                                TotalDealGrossAmount = TotalDealGrossAmount + detail.DealGrossAmount;
                                TotalFinIncAmount = TotalFinIncAmount + detail.FinIncAmount;
                                TotalVSCAmount = TotalVSCAmount + detail.VSCAmount;
                                TotalMCAmount = TotalMCAmount + detail.MCAmount;
                                TotalFTDAmount = TotalFTDAmount + detail.FTDAmount;
                                TotalMEFTDAmount = TotalMEFTDAmount + MonthEndFTDAmount;
                                TotalGapAmount = TotalGapAmount + detail.GapAmount;
                                TotalOtherAmount = TotalOtherAmount + detail.OtherAmount;
                                TotalTotalAmount = TotalTotalAmount + detail.TotalAmount;
                                TotalDXAmount = TotalDXAmount + detail.DXAmount;

                                TotalBackGrossItemAmount = TotalBackGrossItemAmount + detail.BackGrossItemAmount;

                                TotalHoldbackCount = TotalHoldbackCount + detail.HoldbackCount;
                                TotalValuePercentage = (double)TotalHoldbackCount / (double)TotalDealCount;
                                index += 1;
                            }
            </tbody>
            <tfoot>
    <tr>
        @{
            var totalLeasePercent = (TotalLeaseCount / TotalPotentialLease).ToString("P", nfi);
            var totalHandyPercent = (TotalHandymanCount / TotalPotentialHandyman).ToString("P", nfi);
            var totalCPOPercent = (TotalCPOCount / TotalPotentialCPO).ToString("P", nfi);
            var TotalNextCarPercent = (TotalNextCarCount / TotalPotentialHandyman).ToString("P", nfi);
        }
        <th class="text-center"><a data-toggle="collapse" id="Totals" style="cursor: pointer;" data-target="#collapse-total">Totals <i class="fa fa-caret-down" aria-hidden="true"></i></a> </th>
        <th class="text-center">@TotalDealCount</th>
        <th class="text-center">@TotalValidatedDealsCount</th>

        <th class="text-center"><a href="@applicationPath/Sales/UnvalidatedDeals/@AllMakeIds/@Model.MonthId/@Model.YearId">@TotalUnValidatedCount</a></th>
        <th class="text-center"><a href="@applicationPath/Sales/OfficeValidateDeals/@AllMakeIds/@Model.MonthId/@Model.YearId">@(TotalValidatedDealsCount - TotalOfficeValidatedCount)</a></th>
        <th class="text-center"><a href="@applicationPath/Sales/LeaseDeals/@AllMakeIds/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="Lease % = @TotalLeaseCount / @TotalPotentialLease Deals">@TotalLeaseCount<br />@totalLeasePercent</a></th>
        <th class="text-center"><a href="@applicationPath/Sales/CPODeals/@AllMakeIds/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="CPO % = @TotalCPOCount / @TotalPotentialCPO Deals">@TotalCPOCount<br />@totalCPOPercent</a></th>
        <th class="text-center"><a href="@applicationPath/Sales/HandymanDeals/@AllMakeIds/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="Handyman % = @TotalHandymanCount / @TotalPotentialHandyman Deals">@TotalHandymanCount<br />@totalHandyPercent</a></th>
        <th class="text-center"><a href="@applicationPath/Sales/NextCarDeals/@AllMakeIds/@Model.MonthId/@Model.YearId" data-toggle="tooltip" title="NextCar % = @TotalNextCarCount / @TotalPotentialHandyman Deals">@TotalNextCarCount<br />@TotalNextCarPercent</a></th>
        <th class="text-center">@TotalDealGrossAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalMEFTDAmount.ToString("C", nfi)</th>
        @*<th class="text-center">@TotalOtherAmount.ToString("C", nfi)</th>*@
        <th class="text-center">@TotalFinIncAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalVSCAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalMCAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalGapAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalBackGrossItemAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalTotalAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalFTDAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalDXAmount.ToString("C", nfi)</th>
        @{
            var totalBackGrossAmount = TotalFinIncAmount + TotalVSCAmount + TotalGapAmount + TotalMCAmount ; // + BPP + Nitrogen + Zurich + TireWheel + Security + OtherAftermarket

            if(currentSelectedDate > grossChangeDate)
            {
                totalBackGrossAmount += TotalBackGrossItemAmount;
            }

            TotalFrontPVRAmount = Math.Round((TotalDealGrossAmount + TotalMEFTDAmount) / TotalValidatedDealsCount); //+ TotalOtherAmount+ TotalFTDAmount
            TotalBackPVRAmount = Math.Round((totalBackGrossAmount) / TotalValidatedDealsCount);
            TotalPVRAmount = Math.Round((TotalDealGrossAmount + TotalMEFTDAmount + totalBackGrossAmount) / TotalValidatedDealsCount); //+ TotalOtherAmount + TotalFTDAmount
        }

        <th class="text-center">@TotalFrontPVRAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalBackPVRAmount.ToString("C", nfi)</th>
        <th class="text-center">@TotalPVRAmount.ToString("C", nfi)</th>

        @*<th class="text-center">@TotalValuePercentage.ToString("P")</th>
            <th class="text-center">@TotalVarianceCount</th>
            <th class="text-center">@TotalVariancePercentage.ToString("P")</th>*@
    </tr>
    <tr id="collapse-total" class="collapse out" style="background-color:#f5f5f5">
        <td colspan="23">
            <h4>All Deals</h4>
            <h5><a href="@applicationPath/Sales/OfficeValidateDeals?makeId=@AllMakeIds.TrimEnd(',')&yearId=@Model.YearId&monthId=@Model.MonthId">Office Validate Deals</a></h5>
            <table class="table table-bordered table-striped" style="font-size:12px" id="TotalDeals">
                <thead style="font-size:11px">
                    <tr>
                        <th></th>
                        <th class="text-center">Deal</th>
                        <th class="text-center">Customer</th>
                        <th class="text-center">Deal Date</th>
                        <th class="text-center">Days in Stk</th>
                        <th class="text-center">Stk</th>
                        <th class="text-center">Model</th>
                        @*<th class="text-center">V/I</th>*@
                        <th class="text-center">Deal Gross</th>
                        <th class="text-center">Fin Inc</th>
                        <th class="text-center">Bank Fee</th>
                        <th class="text-center">VSC</th>
                        <th class="text-center">MC</th>
                        <th class="text-center">GAP</th>
                        <th class="text-center">BPP/AFT</th>
                        <th class="text-center">Total</th>
                        <th class="text-center">Memo: FTD</th>
                        <th class="text-center">Associates</th>
                        <th class="text-center">Fin Src</th>
                        <th class="text-center">Fin Mgr</th>
                        <th class="text-center">Sales Mgr</th>
                        <th class="text-center">Rate Spread</th>
                        <th class="text-center">Var</th>
                        <th class="text-center">SV Days</th>
                        <th class="text-center">OV Days</th>
                        <th class="text-center">Deal Var</th>
                    </tr>
                </thead>
                <tbody id="tbodyMake-total">
                    <tr>
                        <td id="loadingRow-total" colspan="24" style="text-align:center"><strong>Loading Deals, please wait...</strong></td>
                    </tr>
                    <script type="text/javascript">
                        $('#Totals').bind('click', function () {

                            var url = '@applicationPath/Sales/GetBrandDeals?makeId=@AllMakeIds.TrimEnd(',')&yearId=@Model.YearId&monthId=@Model.MonthId';
                            $.ajax({ url: url, success: DataRetrieved, type: 'POST', dataType: 'json' });
                        });

                    </script>

                </tbody>
                <tfoot></tfoot>
            </table>
        </td>
    </tr>
    @if (Model.Chargebacks != null && Model.Chargebacks.Count > 0 && Model.ShowChargebacks)
    {
        decimal chargebackTotal = 0;
        decimal financeAmountTotal = 0;
        decimal grossAmountTotal = 0;
        decimal gapAmountTotal = 0;
        decimal serviceContractAmountTotal = 0;
        decimal otherAmountTotal = 0;


        foreach (var chargeback in Model.Chargebacks)
        {
            decimal PMGrossTotal = 0;
            PMGrossTotal += chargeback.ROAmount + chargeback.CertFeeAmount + chargeback.RebateAdjustmentAmount + chargeback.CustomerWorkOrderAmount + chargeback.OtherAdjustmentAmount;
            PMGrossTotal += chargeback.UsedROAmount + chargeback.UsedCertFeeAmount + chargeback.UsedRebateAdjustmentAmount + chargeback.UsedCustomerWorkOrderAmount + chargeback.UsedOtherAdjustmentAmount;

            chargebackTotal += chargeback.FinanceAmount + chargeback.FrontGrossAmount + chargeback.UsedFrontGrossAmount + chargeback.GAPAmount + chargeback.ServiceContractAmount + chargeback.OtherAmount + PMGrossTotal;
            financeAmountTotal += chargeback.FinanceAmount;
            grossAmountTotal += chargeback.FrontGrossAmount + chargeback.UsedFrontGrossAmount + PMGrossTotal;
            gapAmountTotal += chargeback.GAPAmount;
            serviceContractAmountTotal += chargeback.ServiceContractAmount;
            otherAmountTotal += chargeback.OtherAmount;
        }

        //chargebackTotal = chargebackTotal * -1;
        //financeAmountTotal = financeAmountTotal * -1;
        //grossAmountTotal = grossAmountTotal * -1;
        //gapAmountTotal = gapAmountTotal * -1;
        //serviceContractAmountTotal = serviceContractAmountTotal * -1;
        //otherAmountTotal = otherAmountTotal * -1;

        if (Model.ShowChargebacks)
        {
                        <tr style="background-color:#d9edf7">

                            <th class="text-center"><a href="@applicationPath/Sales/Chargebacks/@Model.StoreId/@Model.MonthId/@Model.YearId">Chargebacks</a></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center">@grossAmountTotal.ToString("C", nfi)</th>
                            <th class="text-center">@otherAmountTotal.ToString("C", nfi)</th>
                            <th class="text-center">@financeAmountTotal.ToString("C", nfi)</th>
                            <th class="text-center">@serviceContractAmountTotal.ToString("C", nfi)</th>
                            <th class="text-center"></th>
                            <th class="text-center">@gapAmountTotal.ToString("C", nfi)</th>
                            <th class="text-center">@chargebackTotal.ToString("C", nfi)</th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                        </tr>


            TotalDealGrossAmount += (double) grossAmountTotal;
            TotalMEFTDAmount += (double) otherAmountTotal;
            TotalFinIncAmount += (double) financeAmountTotal;
            TotalVSCAmount += (double) serviceContractAmountTotal;

            TotalGapAmount += (double) gapAmountTotal;
            TotalTotalAmount += (double) chargebackTotal;
            
            TotalFrontPVRAmount = Math.Round((TotalDealGrossAmount + TotalMEFTDAmount) / TotalValidatedDealsCount); //+ TotalOtherAmount+ TotalFTDAmount
            TotalBackPVRAmount = Math.Round((totalBackGrossAmount) / TotalValidatedDealsCount);
            TotalPVRAmount = Math.Round((TotalDealGrossAmount + TotalMEFTDAmount + totalBackGrossAmount) / TotalValidatedDealsCount); //+ TotalOtherAmount + TotalFTDAmount

                        <tr style="background-color:#d9edf7">
                            <th class="text-center">Totals</th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center">@TotalDealGrossAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalMEFTDAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalFinIncAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalVSCAmount.ToString("C", nfi)</th>
                            <th class="text-center"></th>
                            <th class="text-center">@TotalGapAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalTotalAmount.ToString("C", nfi)</th>
                            <th class="text-center"></th>
                            <th class="text-center"></th>
                            <th class="text-center">@TotalFrontPVRAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalBackPVRAmount.ToString("C", nfi)</th>
                            <th class="text-center">@TotalPVRAmount.ToString("C", nfi)</th>
                        </tr>

                    }


                }
            </tfoot>
        </table>
    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <table class="table table-bordered table-striped" id="section2">
            <thead>
                <tr style="background-color:#d9edf7">
                    <th class="text-center">Make</th>
                    <th class="text-center">Val Deals</th>
                    <th class="text-center extra-left" colspan="2">Finance %</th>
                    <th class="text-center extra-left" colspan="2">Finance $</th>
                    <th class="text-center extra-left" colspan="2">VSC %</th>
                    <th class="text-center extra-left" colspan="2">VSC $</th>
                    <th class="text-center extra-left" colspan="2">GAP % Fin</th>
                    <th class="text-center extra-left" colspan="2">GAP per Unit</th>
                    <th class="text-center extra-left" colspan="2">A/M %</th>
                    <th class="text-center extra-left" colspan="2">A/M per Unit</th>
                    <th class="text-center extra-left" colspan="2">BPP %</th>
                    <th class="text-center extra-left" colspan="2">BPP Coll %</th>
                    <th class="text-center extra-left extra-right" colspan="2">Trade %</th>
                </tr>
                <tr style="background-color:#d9edf7">
                    <th colspan="2"></th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    
                </tr>
            </thead>
            <tbody>
                @{ 
                double totalFinanceCount = 0;
                double totalFinanceAmount = 0;
                double totalVSCCount = 0;
                double totalVSCAmount = 0;
                double totalGAPCount = 0;
                double totalGAPAmount = 0;
                double totalAftermarketCount = 0;
                double totalOtherAmount = 0;
                double totalBPPCount = 0;
                double totalBPPCollectionPercent = 0;
                double totalTradeCount = 0;
                }

                @foreach (var detail in Model.SalesReportDetails)
                {
                    var brandCode = detail.BrandId;
                    var locationCode = "";

                    foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                    {
                        if (mapping.StoreId == Model.StoreId)
                        {
                            locationCode = mapping.LocationId;
                            break;
                        }
                    }

                    if (brandCode == "UU" && locationCode == "CJE")
                    {
                        brandCode = detail.MakeName;
                    }
                    else if (brandCode == "UU")
                    {
                        brandCode = "Used";
                    }
                    var objectivesStandards = Model.ObjectivesAndStandards.Find(o => o.LocationId == locationCode + brandCode);

                    if (objectivesStandards == null)
                    {
                        objectivesStandards = new SalesCommission.Models.ObjectivesAndStandards();
                    }

                    var validatedDeals = detail.DealCount - detail.UnValidatedCount;

                    var finCntPercent = detail.FinanceIncCount / validatedDeals;
                    var vscPercent = detail.VSCCount / validatedDeals;
                    var gapPercent = detail.GAPCount / detail.FinanceIncCount;
                    var bppPercent = detail.BPPCount / validatedDeals;
                    var aftermarketPercent = detail.AftermarketCount / validatedDeals;
                    var tradePercent = detail.TradeCount / validatedDeals;

                    double finIncPerUnit = 0;
                    if (detail.FinanceIncCount > 0)
                    {
                        finIncPerUnit = detail.FinIncAmount / detail.FinanceIncCount;
                    }

                    double vscPerUnit = 0;
                    if (detail.VSCCount > 0)
                    {
                        vscPerUnit = detail.VSCAmount / detail.VSCCount;
                    }

                    double gapPerUnit = 0;
                    if (detail.GAPCount > 0)
                    {
                        gapPerUnit = detail.GapAmount / detail.GAPCount;
                    }

                    double aftermarketPerUnit = 0;
                    if (detail.AftermarketCount > 0)
                    {
                        aftermarketPerUnit = detail.OtherAmount / validatedDeals;
                    }

                    totalFinanceCount += detail.FinanceIncCount;
                    totalFinanceAmount += detail.FinIncAmount;
                    totalVSCCount += detail.VSCCount;
                    totalVSCAmount += detail.VSCAmount;
                    totalGAPCount += detail.GAPCount;
                    totalGAPAmount += detail.GapAmount;
                    totalAftermarketCount += detail.AftermarketCount;
                    totalOtherAmount += detail.OtherAmount;
                    totalBPPCount += detail.BPPCount;
                    totalBPPCollectionPercent = 0;
                    totalTradeCount += detail.TradeCount;

                    <tr>
                        <td class="text-center">
                            @detail.MakeName
                        </td>
                        <td class="text-center">@validatedDeals</td>
                        <td class="text-center extra-left">@objectivesStandards.FinCntPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/Finance/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="Finance % = @detail.FinanceIncCount of @validatedDeals deals">@finCntPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.FinCntPerCnt</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/Finance/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="Finance Per Unit = $@detail.FinIncAmount over @detail.FinanceIncCount deals">@finIncPerUnit.ToString("C", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.VSCPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/VSC/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="VSC % = @detail.VSCCount of @validatedDeals deals">@vscPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.VSCPerCnt</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/VSC/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="VSC Per Unit = $@detail.VSCAmount over @detail.VSCCount deals">@vscPerUnit.ToString("C", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.GAPPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/GAP/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="GAP % Fin = @detail.GAPCount of @detail.FinanceIncCount deals">@gapPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.GAPPerCnt</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/GAP/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="GAP Per Unit = $@detail.GapAmount over @detail.GAPCount deals">@gapPerUnit.ToString("C", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.AftermarketPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/Aftermarket/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="Aftermarket % = @detail.AftermarketCount of @validatedDeals deals">@aftermarketPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.AftermarketPerCnt</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/Aftermarket/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="Aftermarket Per Unit = $@detail.OtherAmount over @validatedDeals deals">@aftermarketPerUnit.ToString("C", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.BPPPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/BPP/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="BPP % = @detail.BPPCount of @validatedDeals deals">@bppPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.BPPCollectionPercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/BPP/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="BPP Coll %">@detail.BPPCollectionPercent.ToString("P", nfi)</a></td>
                        <td class="text-center extra-left">@objectivesStandards.TradePercent</td>
                        <td class="text-center"><a href="@applicationPath/Sales/DealListing/Trade/@detail.MakeId/@Model.MonthId/@Model.YearId/" data-toggle="tooltip" title="Trade % = @detail.TradeCount of @validatedDeals deals">@tradePercent.ToString("P", nfi)</a></td>
                        @*<td class="text-center">@detail.ValuePercentage.ToString("P")</td>
                            <td class="text-center">@detail.VarianceCount</td>
                            <td class="text-center">@detail.VariancePercentage.ToString("P")</td>*@
                    </tr>
                }
            </tbody>
            <tfoot>

                @{ 
                    var totalfinCntPercent = totalFinanceCount / TotalValidatedDealsCount;
                    var totalvscPercent = totalVSCCount / TotalValidatedDealsCount;
                    var totalgapPercent = totalGAPCount / totalFinanceCount;
                    var totalbppPercent = totalBPPCount / TotalValidatedDealsCount;
                    var totalaftermarketPercent = totalAftermarketCount / TotalValidatedDealsCount;
                    var totaltradePercent = totalTradeCount / TotalValidatedDealsCount;

                    double totalfinIncPerUnit = 0;
                    if (totalFinanceCount > 0)
                    {
                        totalfinIncPerUnit = totalFinanceAmount / totalFinanceCount;
                    }

                    double totalvscPerUnit = 0;
                    if (totalVSCCount > 0)
                    {
                        totalvscPerUnit = totalVSCAmount / totalVSCCount;
                    }

                    double totalgapPerUnit = 0;
                    if (totalGAPCount > 0)
                    {
                        totalgapPerUnit = totalGAPAmount / totalGAPCount;
                    }

                    double totalaftermarketPerUnit = 0;
                    if (totalAftermarketCount > 0)
                    {
                        totalaftermarketPerUnit = totalOtherAmount / TotalValidatedDealsCount;
                    }
                }

                <tr>
                    <th class="text-center">Totals</th>
                    <th class="text-center">@TotalValidatedDealsCount</th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="Finance % = @totalFinanceCount of @TotalValidatedDealsCount deals">@totalfinCntPercent.ToString("P", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="Finance Per Unit = $@totalFinanceAmount over @totalFinanceCount deals">@totalfinIncPerUnit.ToString("C", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="VSC % = @totalVSCCount of @TotalValidatedDealsCount deals">@totalvscPercent.ToString("P", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="VSC Per Unit = $@totalVSCAmount over @totalVSCCount deals">@totalvscPerUnit.ToString("C", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="GAP % Fin = @totalGAPCount of @totalFinanceCount deals">@totalgapPercent.ToString("P", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="GAP Per Unit = $@totalGAPAmount over @totalGAPCount deals">@totalgapPerUnit.ToString("C", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="Aftermarket % = @totalAftermarketCount of @TotalValidatedDealsCount deals">@totalaftermarketPercent.ToString("P", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="Aftermarket Per Unit = $@totalOtherAmount over @TotalValidatedDealsCount deals">@totalaftermarketPerUnit.ToString("C", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="BPP % = @totalBPPCount of @TotalValidatedDealsCount deals">@totalbppPercent.ToString("P", nfi)</a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="BPP Coll %"></a></th>
                    <th class="text-center" colspan="2"><a href="#" data-toggle="tooltip" title="Trade % = @totalTradeCount of @TotalValidatedDealsCount deals">@totaltradePercent.ToString("P", nfi)</a></th>
                </tr>
            </tfoot>
        </table>
    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>

    <div class="row">
        <table class="table table-bordered table-striped" id="section3">
            <thead>
                <tr  style="background-color:#d9edf7">
                    <th class="text-center">Make</th>
                    <th class="text-center">Val Deals</th>
                    <th class="text-center">MTD Tracking</th>
                    <th class="text-center extra-left" colspan="2">Man Obj</th>
                    <th class="text-center extra-left">Man OBJ Var</th>
                    <th class="text-center extra-left" colspan="2">Fitz Obj</th>
                    <th class="text-center extra-left">Fitz Obj Var</th>
                    <th class="text-center extra-left" colspan="2">GPUR Obj</th>
                    <th class="text-center extra-left">GPUR Var</th>
                    <th class="text-center">Total GP Obj</th>
                    <th class="text-center">PV Exc</th>
                    <th class="text-center">PV Exc %</th>
                    <th class="text-center">Status 5</th>
                </tr>
                <tr style="background-color:#d9edf7">
                    <th></th>
                    <th></th>
                    <th></th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left"></th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left"></th>
                    <th class="text-center extra-left" style="padding:2px; font-size:10px">S</th>
                    <th class="text-center" style="padding:2px; font-size:10px">A</th>
                    <th class="text-center extra-left"></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>

            </thead>
            <tbody>
                @{
                    var TotalVarianceCount = 0;
                    decimal TotalGrossProfit = 0;
                    double TotalVariancePercentage = 0;
                    int TotalStatus5Count = 0;

                    decimal MTDTracking = 0;
                    decimal currentDayOfMonth = 0;
                    decimal daysInMonth = 0;
                    decimal MTDfactor = 0;

                    if (Model.FiscalMonth != null && Model.FiscalMonth.Count > 0)
                    {
                        var fiscalMonth = Model.FiscalMonth[0];

                        currentDayOfMonth = fiscalMonth.CurrentDay;
                        daysInMonth = fiscalMonth.DaysInMonth;
                        MTDfactor = fiscalMonth.Factor;
                    }

                    var bottomLocationCode = "";

                    foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                    {
                        if (mapping.StoreId == Model.StoreId)
                        {
                            bottomLocationCode = mapping.LocationId;
                            break;
                        }
                    }



                    var showChryslerStore = false;
                    var validatedDealsCH = 0;
                    var dealCountCH = 0;
                    decimal manufacturerObjectiveCH = 0;
                    decimal manObjectiveVarianceCH = 0;
                    decimal fitzgeraldObjectiveCH = 0;
                    decimal fitzObjectiveVarianceCH = 0;
                    var status5CountCH = 0;

                    foreach (var detail in Model.SalesReportDetails)
                    {

                        if (detail.MakeId == "42" || detail.MakeId == "89" || detail.MakeId == "90" || detail.MakeId == "41" || detail.MakeId == "88")
                        {
                            validatedDealsCH += (detail.DealCount - detail.UnValidatedCount);
                            dealCountCH += detail.DealCount;
                            showChryslerStore = true;
                        }


                    }
                    //Check to see if there are deals for CH, DO and JE, total all the information
                    if (showChryslerStore)
                    {


                        var objectivesStandards = Model.ObjectivesAndStandards.Find(o => o.LocationId == bottomLocationCode + "CH");

                        if (objectivesStandards == null)
                        {
                            objectivesStandards = new SalesCommission.Models.ObjectivesAndStandards();
                        }

                        manufacturerObjectiveCH = objectivesStandards.ManufacturerObjective;
                        fitzgeraldObjectiveCH = objectivesStandards.FitzgeraldObjective;
                        manObjectiveVarianceCH = objectivesStandards.ManufacturerObjective - validatedDealsCH;
                        fitzObjectiveVarianceCH = objectivesStandards.FitzgeraldObjective - validatedDealsCH;

                        if (currentDayOfMonth > 0)
                        {
                            MTDTracking = Math.Round((dealCountCH / currentDayOfMonth) * MTDfactor * daysInMonth);
                        }


                        <tr>
                            <td class="text-center">
                                @if (bottomLocationCode == "CJE")
                                {
                                    <span>CH, JE</span>
                                }
                                else
                                {
                                <span>CH, DO, JE</span>
                                }
                            </td>

                            <td class="text-center">@validatedDealsCH</td>
                            <td class="text-center"><a href="#" data-toggle="tooltip" title="MTD = @dealCountCH / @currentDayOfMonth * @MTDfactor * @daysInMonth">@MTDTracking</a></td>
                            <td class="text-center extra-left">@manufacturerObjectiveCH</td>
                            <td class="text-center">@validatedDealsCH</td>
                            <td class="text-center extra-left">@manObjectiveVarianceCH</td>
                            <td class="text-center extra-left">@fitzgeraldObjectiveCH</td>
                            <td class="text-center">@validatedDealsCH</td>
                            <td class="text-center extra-left">@fitzObjectiveVarianceCH</td>

                            <td class="text-center extra-left">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center extra-left">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center"><a href="http://JJFServer/Status5/Home/Index/@bottomLocationCode/NEW" target="_blank">@status5CountCH</a></td>
                        </tr>
                            
                    }


                    }
                @foreach (var detail in Model.SalesReportDetails)
                {
                    var brandCode = detail.BrandId;
                    var conditionCode = "";

                    if (brandCode == "UU" && bottomLocationCode == "CJE")
                    {
                        brandCode = detail.MakeName;
                        conditionCode = "USED";
                        MTDfactor = 1;
                    }
                    else if (brandCode == "UU")
                    {
                        brandCode = "Used";
                        conditionCode = "USED";
                    }
                    else
                    {
                        conditionCode = "NEW";
                    }

                    var objectivesStandards = Model.ObjectivesAndStandards.Find(o => o.LocationId == bottomLocationCode + brandCode);

                    if (objectivesStandards == null)
                    {
                        objectivesStandards = new SalesCommission.Models.ObjectivesAndStandards();
                    }

                    var status5Count = 0;

                    if (brandCode == "Used")
                    {
                        var status5List = Model.Status5.FindAll(o => o.NewUsedStatus == "USED");
                        if (status5List != null && status5List.Count > 0)
                        {
                            foreach (var status5 in status5List)
                            {
                                status5Count += status5.VehicleCount;
                            }
                        }
                        MTDfactor = 1;
                    }
                    else
                    {
                        var status5List = Model.Status5.FindAll(o => o.MakeName.Contains(detail.MakeName.ToUpper()) && o.NewUsedStatus == "NEW");
                        if (status5List != null && status5List.Count > 0)
                        {
                            foreach (var status5 in status5List)
                            {
                                status5Count += status5.VehicleCount;
                            }
                        }
                        else
                        {
                            status5Count = 0;
                        }
                    }

                    double MonthEndFTDAmount = 0;
                    var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == bottomLocationCode + brandCode);

                    if (factoryToDealerCash == null)
                    {
                        factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                        MonthEndFTDAmount = 0;
                    }
                    else
                    {
                        MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                        //detail.FTDAmount = detail.FTDAmount + (double) factoryToDealerCash.FTDAmount;
                        detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }

                    var validatedDeals = detail.DealCount - detail.UnValidatedCount;
                    var GPURActual = Math.Round((detail.DealGrossAmount + detail.FinIncAmount + detail.VSCAmount + detail.GapAmount + MonthEndFTDAmount) / validatedDeals); //+ detail.OtherAmount+ detail.FTDAmount


                    var manObjectiveVariance = validatedDeals - objectivesStandards.ManufacturerObjective;
                    var fitzObjectiveVariance = validatedDeals - objectivesStandards.FitzgeraldObjective;
                    var gpurObjectiveVariance = GPURActual - (double)objectivesStandards.GPURObjective;

                    //var lostMonies = (double)(objectivesStandards.GPURObjective * objectivesStandards.ManufacturerObjective) - (GPURActual * validatedDeals);
                    var TotalGPObjective = (objectivesStandards.FitzgeraldObjective * objectivesStandards.GPURObjective);

                    if (currentDayOfMonth > 0)
                    {
                        MTDTracking = Math.Round((detail.DealCount / currentDayOfMonth) * MTDfactor * daysInMonth);
                    }

                    <tr>
                        <td class="text-center">
                            @detail.MakeName
                        </td>

                        @if (detail.MakeId == "42" || detail.MakeId == "89" || detail.MakeId == "90" || detail.MakeId == "41" || detail.MakeId == "88")
                        {
                            <td class="text-center">@validatedDeals</td>
                            <td class="text-center">-</td>
                            <td class="text-center extra-left">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center extra-left">-</td>
                            <td class="text-center extra-left">-</td>
                            <td class="text-center">-</td>
                            <td class="text-center extra-left">-</td>
                        }
                        else
                        {
                            <td class="text-center">@validatedDeals</td>
                            <td class="text-center"><a href="#" data-toggle="tooltip" title="MTD = @detail.DealCount / @currentDayOfMonth * @MTDfactor * @daysInMonth">@MTDTracking</a></td>
                            <td class="text-center extra-left">@objectivesStandards.ManufacturerObjective</td>
                            <td class="text-center">@validatedDeals</td>
                            <td class="text-center extra-left">@manObjectiveVariance</td>
                            <td class="text-center extra-left">@objectivesStandards.FitzgeraldObjective</td>
                            <td class="text-center">@validatedDeals</td>
                            <td class="text-center extra-left">@fitzObjectiveVariance</td>
                        }

                        <td class="text-center extra-left">@objectivesStandards.GPURObjective</td>
                        <td class="text-center">@GPURActual</td>
                        <td class="text-center extra-left">@gpurObjectiveVariance</td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="Total GP Obj = (@objectivesStandards.FitzgeraldObjective * @objectivesStandards.GPURObjective)">@TotalGPObjective.ToString("C", nfi)</a></td>
                        <td class="text-center">@detail.VarianceCount</td>
                        <td class="text-center">@detail.VariancePercentage.ToString("P", nfi)</td>

                        @{
                            var status5LocationCode = bottomLocationCode;
                        }

                        @if(bottomLocationCode == "FMM")
                        {
                            status5LocationCode = "FOC";
                        }

                        <td class="text-center"><a href="http://JJFServer/Status5/Home/Index/@status5LocationCode/@conditionCode" target="_blank">@status5Count</a></td>
                        @*<td class="text-center">@detail.ValuePercentage.ToString("P")</td>
                <td class="text-center">@detail.VarianceCount</td>
                <td class="text-center">@detail.VariancePercentage.ToString("P")</td>*@
                    </tr>


                    TotalVarianceCount = TotalVarianceCount + detail.VarianceCount;
                    TotalVariancePercentage = (double)TotalVarianceCount / (double)TotalDealCount;
                    TotalStatus5Count = TotalStatus5Count + status5Count;
                    TotalGrossProfit = TotalGrossProfit + TotalGPObjective;
                }


            </tbody>
            <tfoot>
                <tr>
                    <th class="text-center">Totals</th>
                    <th class="text-center">@TotalValidatedDealsCount</th>
                    <th class="text-center"></th>
                    <th class="text-center" colspan="2"></th>
                    <th class="text-center"></th>
                    <th class="text-center" colspan="2"></th>
                    <th class="text-center"></th>
                    <th class="text-center" colspan="2"></th>
                    <th class="text-center"></th>
                    <th class="text-center">@TotalGrossProfit</th>
                    <th class="text-center">@TotalVarianceCount</th>
                    <th class="text-center">@TotalVariancePercentage.ToString("P", nfi)</th>
                    <th class="text-center"><a href="http://JJFServer/Status5/Home/Index/@bottomLocationCode/ALL" target="_blank">@TotalStatus5Count</a></th>
                </tr>   
            </tfoot>
        </table>
    </div>

            <script type="text/javascript">

                function DataRetrieved(data) {
                    // Do something with data
                    var outputHTML = ""
                    var bTotal = false;
                    var makeId = data[0].MakeId;

                    for (var i = 0; i < data.length; i++) {
                        var obj = data[i];

                        if (obj.MakeId != makeId)
                        {
                            bTotal = true;
                        }

                        var bgStyle = "";
                        if (obj.VarianceAmount < -99 && obj.VarianceReason != "") {
                            bgStyle = "style=background-color:#fcf8e3;";
                        }

                        else if (obj.VarianceAmount < -99 && obj.VarianceReason == "") {
                            bgStyle = "style=background-color:#f2dede;";
                        }

                        outputHTML += '<tr>';
                        outputHTML += '<td class="text-center">' + (i+1) + '.</td>';
                        outputHTML += '<td class="text-center"><a href="@applicationPath/Sales/DealDetail/' + obj.DealKey + '">' + obj.DealKey + '</a></td>';
                        outputHTML += '<td class="text-center">' + obj.BuyerLastName + ', ' + obj.CustomerName.replace(obj.BuyerLastName, "") + '</td>';
                        var myDate = new Date(parseInt(obj.DealDate.substr(6)));                        
                        outputHTML += '<td class="text-center">' + (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear(); + '</td>';
                        outputHTML += '<td class="text-center">' + obj.DaysInStock + '</td>';
                        outputHTML += '<td class="text-center">' + obj.StockNumber + '</td>';
                        outputHTML += '<td class="text-center">' + obj.Carline + '</td>';
                        //outputHTML += '<td class="text-center">' + obj.ValueInternet + '</td>';
                        outputHTML += '<td class="text-center">' + obj.DealGrossAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.FinIncAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.BankFee.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.VSCAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.MaintenanceContractAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';                        
                        outputHTML += '<td class="text-center">' + obj.GapAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.BackGrossItemAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">';

                        var totalAmount = obj.DealGrossAmount + obj.FinIncAmount + obj.VSCAmount + obj.MaintenanceContractAmount + obj.GapAmount + obj.BankFee;//+ obj.FTDAmount + obj.OtherAmount;

                        var selectedDate = new Date("@Model.YearId-@Model.MonthId-1");
                        var startDate = new Date("2019-1-31");

                        if (selectedDate > startDate) {
                            totalAmount = totalAmount + obj.BackGrossItemAmount;
                        }

                        outputHTML += totalAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)");
                        outputHTML += '</td>';

                        outputHTML += '<td class="text-center">' + obj.FTDAmount.toFixed(0).toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        outputHTML += '<td class="text-center">' + obj.SalesAssociate1;

                        if (obj.SalesAssociate2 != null) {
                            outputHTML += '<br />' + obj.SalesAssociate2;
                        }

                        outputHTML += '</td>';

                        if (obj.FinInstCode == null)
                        {
                            obj.FinInstCode = "";
                        }
                        outputHTML += '<td class="text-center">' + obj.FinInstCode + '</td>';

                        if (obj.FinanceManager == null) {
                            obj.FinanceManager = "";
                        }
                        outputHTML += '<td class="text-center">' + obj.FinanceManager + '</td>';
                        outputHTML += '<td class="text-center">' + obj.SalesManager + '</td>';
                        outputHTML += '<td class="text-center">' + (obj.APR - obj.BuyRate).toFixed(1) + '</td>';

                        outputHTML += '<td class="text-center"' + bgStyle + '>' + obj.VarianceAmount.toString().replace(/\B(?=(\d{3})+\b)/g, ",").replace(/-(.*)/, "($1)") + '</td>';
                        
                        var check = '<i class="fa fa-check" aria-hidden="true"></i>';



                        if (obj.ShowroomValidatedBy != "" && obj.ShowroomValidatedBy != null) {

                            
                            var date1 = new Date(parseInt(obj.DealDate.substr(6)));
                            var date2 = new Date(parseInt(obj.ShowroomValidatedDate.substr(6)));

                            // To calculate the time difference of two dates 
                            var Difference_In_Time = date2.getTime() - date1.getTime();

                            // To calculate the no. of days between two dates 
                            var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                            outputHTML += '<td class="text-center">' + parseInt(Difference_In_Days) + '</td>';
                            //outputHTML += '<td class="text-center">' + check + '</td>';
                        }
                        else {
                            outputHTML += '<td class="text-center"></td>';
                        }

                        if (obj.OfficeValidatedBy != "" && obj.OfficeValidatedBy != null) {

                            var date1 = new Date(parseInt(obj.ShowroomValidatedDate.substr(6)));
                            var date2 = new Date(parseInt(obj.OfficeValidatedDate.substr(6)));

                            // To calculate the time difference of two dates 
                            var Difference_In_Time = date2.getTime() - date1.getTime();

                            // To calculate the no. of days between two dates 
                            var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
                            outputHTML += '<td class="text-center">' + parseInt(Difference_In_Days) + '</td>';
                            //outputHTML += '<td class="text-center">' + check + '</td>';
                        }
                        else {
                            outputHTML += '<td class="text-center"></td>';
                        }

                        outputHTML += '<td class="text-center">' + obj.DealVariance + '</td>';

                        outputHTML += '</tr>';


                    }

                    if (makeId == 47 || makeId == 20 || makeId == 87) {
                        document.getElementById("tbodyMake-total").innerHTML = outputHTML;
                        document.getElementById("tbodyMake-" + obj.MakeId).innerHTML = outputHTML;

                        $('#TotalDeals').DataTable({
                            searching: true,
                            dom: 'Bfrti',
                            pageLength: -1,
                            buttons: [
                                {
                                    extend: 'copyHtml5', footer: true,
                                },
                                {
                                    extend: 'excelHtml5', footer: true,
                                },
                                {
                                    extend: 'pdfHtml5', footer: true,
                                    orientation: 'landscape'
                                },
                                {
                                    extend: 'print', footer: true,
                                    orientation: 'landscape'
                                }
                            ],
                            columnDefs: [
                              { type: 'any-number', targets: [7, 8, 9, 10, 11, 12, 13, 14, 15, 20] },
                              { type: 'date-us', targets: [3] }
                            ],
                            retrieve: true

                        });

                        $('#table-' + makeId).DataTable({
                            searching: true,
                            dom: 'Bfrti',
                            pageLength: -1,
                            buttons: [
                                {
                                    extend: 'copyHtml5', footer: true,
                                },
                                {
                                    extend: 'excelHtml5', footer: true,
                                },
                                {
                                    extend: 'pdfHtml5', footer: true,
                                    orientation: 'landscape'
                                },
                                {
                                    extend: 'print', footer: true,
                                    orientation: 'landscape'
                                }
                            ],
                            columnDefs: [
                              { type: 'any-number', targets: [7, 8, 9, 10, 11, 12, 13, 14, 15, 20] },
                              { type: 'date-us', targets: [3] }
                            ],
                            retrieve: true
                        });


                    }
                    else {
                        if (bTotal) {
                            document.getElementById("tbodyMake-total").innerHTML = outputHTML;

                            //$('#TotalDeals').destroy();
                            $('#TotalDeals').DataTable({
                                searching: true,
                                dom: 'Bfrti',
                                pageLength: -1,
                                buttons: [
                                    {
                                        extend: 'copyHtml5', footer: true,
                                    },
                                    {
                                        extend: 'excelHtml5', footer: true,
                                    },
                                    {
                                        extend: 'pdfHtml5', footer: true,
                                        orientation: 'landscape'
                                    },
                                    {
                                        extend: 'print', footer: true,
                                        orientation: 'landscape'
                                    }
                                ],
                                columnDefs: [
                                  { type: 'any-number', targets: [7, 8, 9, 10, 11, 12, 13, 14, 15, 20] },
                                  { type: 'date-us', targets: [3] }
                                ],
                                retrieve: true

                            });
                        }
                        else {
                            document.getElementById("tbodyMake-" + obj.MakeId).innerHTML = outputHTML;

                            //$('#table-' + makeId).destroy();
                            $('#table-' + makeId).DataTable({
                                searching: true,
                                dom: 'Bfrti',
                                pageLength: -1,
                                buttons: [
                                    {
                                        extend: 'copyHtml5', footer: true,
                                    },
                                    {
                                        extend: 'excelHtml5', footer: true,
                                    },
                                    {
                                        extend: 'pdfHtml5', footer: true,
                                        orientation: 'landscape'
                                    },
                                    {
                                        extend: 'print', footer: true,
                                        orientation: 'landscape'
                                    }
                                ],
                                columnDefs: [
                                  { type: 'any-number', targets: [7, 8, 9, 10, 11, 12, 13, 14, 15, 20] },
                                  { type: 'date-us', targets: [3] }
                                ],
                                retrieve: true
                            });
                        }
                    }



                }

                $(".ftd-toggle").click(function () {

                    $header = $(this);
                    //getting the next element
                    $content = $(".ftd-entry")
                    //open up the content needed - toggle the slide- if visible, slide up, if not slidedown.
                    $content.slideToggle(500, function () {
                        //execute this after slideToggle is done
                        //change text of header based on visibility of content div
                        //$header.text(function () {
                        //    //change text based on condition
                        //    return $content.is(":visible") ? "Collapse" : "Expand";
                        //});
                    });

                });

                $(".comments-toggle").click(function () {

                    $header = $(this);
                    //getting the next element
                    $content = $(".comments-entry")
                    //open up the content needed - toggle the slide- if visible, slide up, if not slidedown.
                    $content.slideToggle(500, function () {
                        //execute this after slideToggle is done
                        //change text of header based on visibility of content div
                        //$header.text(function () {
                        //    //change text based on condition
                        //    return $content.is(":visible") ? "Collapse" : "Expand";
                        //});
                    });

                });

            </script>
            }
@section scripts
{
     

<script type="text/javascript">
      $(document).ready(function(){
          //$('#section1').DataTable({
          //    searching: false,
          //    paging: false,
          //    autoWidth: false,
          //    info: false
          //});
          
          $('[data-toggle="tooltip"]').tooltip();

          $('#section2').DataTable({
              searching: false,
              dom: 'Bfrt',
                            buttons: [
                                {
                                    extend: 'copyHtml5', footer: true,
                                },
                                {
                                    extend: 'excelHtml5', footer: true,
                                },
                                {
                                    extend: 'pdfHtml5', footer: true,
                                    orientation: 'landscape'
                                },
                                {
                                    extend: 'print', footer: true,
                                    orientation: 'landscape'
                                }
                            ]

          });
          $('#section3').DataTable({
              searching: false,
              dom: 'Bfrt',
              buttons: [
                  {
                      extend: 'copyHtml5', footer: true,
                  },
                  {
                      extend: 'excelHtml5', footer: true,
                  },
                  {
                      extend: 'pdfHtml5', footer: true,
                      orientation: 'landscape'
                  },
                  {
                      extend: 'print', footer: true,
                      orientation: 'landscape'                     
                  }
              ]

          });
      });
    
</script>

}