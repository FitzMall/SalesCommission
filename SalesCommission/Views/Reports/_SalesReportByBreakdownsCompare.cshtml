@model SalesCommission.Models.SalesReportModel

@{ 
    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.PercentPositivePattern = 1;
    nfi.CurrencySymbol = "";

}

<style type="text/css">
    .indent-2{        
        padding-left:10px;
    }
    .indent-3{
        padding-left:20px;
    }
    .indent-4{
        padding-left:30px;
    }
    table.floatThead-table {
        font-size:12px;
    }

    .indent-td2{
        display: block;
        margin-left: 10px;
        margin-right: -2px;
    }
    .indent-td3{
        display: block;
        margin-left: 20px;
        margin-right: -2px;
    }
    .indent-td4{
        display: block;
        margin-left: 30px;
        margin-right: -2px;
    }

</style>


<div class="col-sm-12">
    <hr />  
</div>



    @*<div class="col-sm-12" id="location-associate">
        <h4>Lead Report Results for @Model.ComparisonReportStartDate.ToShortDateString() to @Model.ComparisonReportEndDate.ToShortDateString() for @Model.VehicleType Vehicles</h4>

        <table class="table table-bordered" style="font-size:12px">
            <thead>
                <tr style="background-color:#d9edf7;">
                    <th class="text-center divider-column"></th>
                    <th class="text-center divider-column" colspan="3">Total Leads</th>
                    <th class="text-center divider-column" colspan="3">Walkin Leads</th>
                    <th class="text-center divider-column" colspan="5">Internet Leads</th>
                    <th class="text-center divider-column" colspan="3">Phone Leads</th>
                    <th class="text-center divider-column" colspan="3">Other Leads</th>
                </tr>
                <tr style="background-color:#f5f5f5;">
                    <th class="text-center divider-column breakdown-column">Company Totals</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Engage %</th>
                    <th class="text-center">Time</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>

                </tr>
            </thead>
            <tbody>
                @{
                    decimal CompanyTotalLeadCount = 0;
                    decimal CompanyTotalLeadSoldCount = 0;
                    decimal CompanyTotalLeadSoldPercent = 0;

                    decimal CompanyPhoneLeadCount = 0;
                    decimal CompanyWalkInLeadCount = 0;
                    decimal CompanyInternetLeadCount = 0;

                    decimal CompanyPhoneLeadSoldCount = 0;
                    decimal CompanyWalkInLeadSoldCount = 0;
                    decimal CompanyInternetLeadSoldCount = 0;

                    decimal CompanyPhoneLeadSoldPercent = 0;
                    decimal CompanyWalkInLeadSoldPercent = 0;
                    decimal CompanyInternetLeadSoldPercent = 0;

                    decimal CompanyInternetEngagementCount = 0;
                    decimal CompanyInternetEngagementPercent = 0;

                    decimal CompanyInternetNewLeadCount = 0;
                    decimal CompanyInternetNewLeadSoldCount = 0;
                    decimal CompanyInternetNewLeadSoldPercent = 0;

                    decimal CompanyInternetUsedLeadCount = 0;
                    decimal CompanyInternetUsedLeadSoldCount = 0;
                    decimal CompanyInternetUsedLeadSoldPercent = 0;

                    decimal CompanyInternetHandyLeadCount = 0;
                    decimal CompanyInternetHandyLeadSoldCount = 0;
                    decimal CompanyInternetHandyLeadSoldPercent = 0;

                    decimal CompanyInternetOtherLeadCount = 0;
                    decimal CompanyInternetOtherLeadSoldCount = 0;
                    decimal CompanyInternetOtherLeadSoldPercent = 0;

                    decimal CompanyInternetAdjustedResponseTime = 0;
                    decimal CompanyInternetAvgAdjustedResponseTime = 0;

                    decimal CompanyWalkinAdjustedResponseTime = 0;
                    decimal CompanyWalkinAvgAdjustedResponseTime = 0;

                    decimal CompanyOtherLeadCount = 0;
                    decimal CompanyOtherLeadSoldCount = 0;
                    decimal CompanyOtherLeadSoldPercent = 0;

                }
                @if (Model.ComparisonLeads != null)
                {
                    var otherLeads = Model.ComparisonLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                    CompanyOtherLeadCount = otherLeads.Count;
                    CompanyOtherLeadSoldCount = otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                    var CompanyphoneLeads = Model.ComparisonLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                    CompanyPhoneLeadCount = CompanyphoneLeads.Count;
                    //currentTotalLeadCount += PhoneLeadCount;
                    CompanyPhoneLeadSoldCount = CompanyphoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                    if (CompanyPhoneLeadCount > 0)
                    {
                        CompanyPhoneLeadSoldPercent = CompanyPhoneLeadSoldCount / CompanyPhoneLeadCount;
                    }

                    var CompanywalkinLeads = Model.ComparisonLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                    CompanyWalkInLeadCount = CompanywalkinLeads.Count;
                    //currentTotalLeadCount += WalkInLeadCount;
                    CompanyWalkInLeadSoldCount = CompanywalkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                    if (CompanyWalkInLeadCount > 0)
                    {
                        CompanyWalkInLeadSoldPercent = (CompanyWalkInLeadSoldCount / CompanyWalkInLeadCount);
                    }

                    CompanyWalkinAdjustedResponseTime = CompanywalkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                    var CompanyinternetLeads = Model.ComparisonLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                    CompanyInternetLeadCount = CompanyinternetLeads.Count;
                    //currentTotalLeadCount += InternetLeadCount;

                    CompanyInternetEngagementCount = CompanyinternetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                    CompanyInternetLeadSoldCount = CompanyinternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                    if (CompanyInternetLeadCount > 0)
                    {
                        CompanyInternetLeadSoldPercent = (CompanyInternetLeadSoldCount / CompanyInternetLeadCount);
                        CompanyInternetEngagementPercent = (CompanyInternetEngagementCount / CompanyInternetLeadCount);
                    }

                    if (CompanyOtherLeadCount > 0)
                    {
                        CompanyOtherLeadSoldPercent = (CompanyOtherLeadSoldCount / CompanyOtherLeadCount);
                    }

                    //Here comes the fun, find the new, used and handymans
                    var CompanynewInternetLeads = CompanyinternetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                    if (CompanynewInternetLeads.Count > 0)
                    {
                        CompanyInternetNewLeadCount = CompanynewInternetLeads.Count;
                        CompanyInternetNewLeadSoldCount = CompanynewInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                    }

                    //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                    var CompanyusedInternetLeadsNoHandy = CompanyinternetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                    if (CompanyusedInternetLeadsNoHandy.Count > 0)
                    {
                        CompanyInternetUsedLeadCount = CompanyusedInternetLeadsNoHandy.Count;
                        CompanyInternetUsedLeadSoldCount = CompanyusedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                    }

                    var CompanyhandymanLeads = CompanyinternetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                    if (CompanyhandymanLeads.Count > 0)
                    {
                        CompanyInternetHandyLeadCount = CompanyhandymanLeads.Count;
                        CompanyInternetHandyLeadSoldCount = CompanyhandymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                    }

                    //Unknown leads, will be leads without a Inventory Type of N or U
                    var CompanyunknownLeads = CompanyinternetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                    if (CompanyunknownLeads.Count > 0)
                    {
                        CompanyInternetOtherLeadCount = CompanyunknownLeads.Count;
                        CompanyInternetOtherLeadSoldCount = CompanyunknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                    }

                    CompanyInternetAdjustedResponseTime = CompanyinternetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                    CompanyTotalLeadCount = CompanyPhoneLeadCount + CompanyWalkInLeadCount + CompanyInternetLeadCount + CompanyOtherLeadCount;
                    CompanyTotalLeadSoldCount = CompanyPhoneLeadSoldCount + CompanyWalkInLeadSoldCount + CompanyInternetLeadSoldCount + CompanyOtherLeadSoldCount;
                    if (CompanyTotalLeadCount > 0)
                    {
                        CompanyTotalLeadSoldPercent = CompanyTotalLeadSoldCount / CompanyTotalLeadCount;
                    }

                    if (CompanyPhoneLeadCount > 0)
                    {
                        CompanyPhoneLeadSoldPercent = CompanyPhoneLeadSoldCount / CompanyPhoneLeadCount;
                    }

                    if (CompanyWalkInLeadCount > 0)
                    {
                        CompanyWalkInLeadSoldPercent = CompanyWalkInLeadSoldCount / CompanyWalkInLeadCount;
                        CompanyWalkinAvgAdjustedResponseTime = CompanyWalkinAdjustedResponseTime / CompanyWalkInLeadCount;
                    }

                    if (CompanyInternetLeadCount > 0)
                    {
                        CompanyInternetLeadSoldPercent = CompanyInternetLeadSoldCount / CompanyInternetLeadCount;
                        CompanyInternetAvgAdjustedResponseTime = CompanyInternetAdjustedResponseTime / CompanyInternetLeadCount;
                    }

                    if (CompanyInternetNewLeadCount > 0)
                    {
                        CompanyInternetNewLeadSoldPercent = CompanyInternetNewLeadSoldCount / CompanyInternetNewLeadCount;
                    }

                    if (CompanyInternetUsedLeadCount > 0)
                    {
                        CompanyInternetUsedLeadSoldPercent = CompanyInternetUsedLeadSoldCount / CompanyInternetUsedLeadCount; ;
                    }

                    if (CompanyInternetHandyLeadCount > 0)
                    {
                        CompanyInternetHandyLeadSoldPercent = CompanyInternetHandyLeadSoldCount / CompanyInternetHandyLeadCount; ;
                    }

                    if (CompanyInternetOtherLeadCount > 0)
                    {
                        CompanyInternetOtherLeadSoldPercent = CompanyInternetOtherLeadSoldCount / CompanyInternetOtherLeadCount; ;
                    }


                }
                <tr>

                    <td class="divider-column breakdown-column">Company Totals</a></td>

                    <td class="text-center">@CompanyTotalLeadCount</td>
                    <td class="text-center">@CompanyTotalLeadSoldCount</td>
                    <td class="text-center divider-column">@CompanyTotalLeadSoldPercent.ToString("P", nfi)</td>

                    <td class="text-center">@CompanyWalkInLeadCount</td>
                    <td class="text-center">@CompanyWalkInLeadSoldCount</td>
                    <td class="text-center divider-column">@CompanyWalkInLeadSoldPercent.ToString("P", nfi)</td>

                    <td class="text-center">@CompanyInternetLeadCount</td>
                    <td class="text-center">@CompanyInternetEngagementPercent.ToString("P", nfi)</td>
                    <td class="text-center">@CompanyInternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyInternetLeadSoldCount</td>
                    <td class="text-center divider-column">@CompanyInternetLeadSoldPercent.ToString("P", nfi)</td>

                    <td class="text-center">@CompanyPhoneLeadCount</td>
                    <td class="text-center">@CompanyPhoneLeadSoldCount</td>
                    <td class="text-center divider-column">@CompanyPhoneLeadSoldPercent.ToString("P", nfi)</td>

                    <td class="text-center">@CompanyOtherLeadCount</td>
                    <td class="text-center">@CompanyOtherLeadSoldCount</td>
                    <td class="text-center divider-column">@CompanyOtherLeadSoldCount</td>
                </tr>


            </tbody>
            <tfoot>

            </tfoot>
        </table>


        <table class="table table-bordered sticky-header" style="font-size:12px; border-left: none;">
            <thead>
                <tr style="background-color:#d9edf7;">
                    <th class="text-center divider-column"></th>
                    <th class="text-center divider-column" colspan="3">Total Leads</th>
                    <th class="text-center divider-column" colspan="3">Walkin Leads</th>
                    <th class="text-center divider-column" colspan="5">Internet Leads</th>
                    <th class="text-center divider-column" colspan="3">Phone Leads</th>
                    <th class="text-center divider-column" colspan="3">Other Leads</th>
                </tr>
                <tr style="background-color:#f5f5f5;">
                    <th class="text-center divider-column breakdown-column">Company Totals</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Engage %</th>
                    <th class="text-center">Time</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Sold</th>
                    <th class="text-center divider-column">Sold %</th>

                </tr>
            </thead>
            <tbody>
                @if (Model.ComparisonLeads != null)
                {

                    var breakdownLevel1Values = new List<string>();

                    switch (Model.BreakDownLevel1)
                    {
                        case "associatename":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.Sales_LastName).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "brand":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.VOfInterest_Make.Trim().ToUpper()).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leadgroupname":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadGroupMapping).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leadsourcename":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leadstatusname":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadStatusName).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leadstatustype":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadStatusTypeName).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "locationid":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "salesteam":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.Team).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "make":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.VOfInterest_Make).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "model":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.VOfInterest_Model).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "stock":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.VOfInterest_StockNumber).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "zip":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.PostalCode).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "inventorytype":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.VOfInterest_InventoryType).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leaddate":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadCreatedEastTime.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            break;

                        case "leadtime":
                            breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadCreatedEastTime.Hour.ToString()).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "leadmonthyear":
                            //breakdownLevel1Values = Model.ComparisonLeads.Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            var leadMonthYears = Model.ComparisonLeads.Where(x => x.LeadStatusTypeName.ToUpper() != "SOLD").Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            var soldMonthYears = Model.ComparisonLeads.Where(x => x.LeadStatusTypeName.ToUpper() == "SOLD").Select(x => x.VehicleSoldEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            leadMonthYears.AddRange(soldMonthYears);
                            breakdownLevel1Values = leadMonthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();

                            break;

                        default:
                            // breakdownLevel1Values = Model.AssociateLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                            break;
                    }

                    var breakdown1Index = 0;
                    var breakdown2Index = 0;
                    var BreakDown3Index = 0;
                    var BreakDown4Index = 0;

                    foreach (var breakdown1 in breakdownLevel1Values)
                    {
                        var label1 = breakdown1;

                        var BreakDown1filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                        switch (Model.BreakDownLevel1)
                        {
                            case "associatename":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.Sales_LastName == breakdown1);
                                break;

                            case "brand":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == breakdown1);
                                break;

                            case "leadgroupname":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadGroupMapping == breakdown1);
                                break;

                            case "leadsourcename":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadSourceName == breakdown1);
                                break;

                            case "leadstatusname":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadStatusName == breakdown1);
                                break;

                            case "leadstatustype":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadStatusTypeName == breakdown1);
                                break;

                            case "locationid":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.DealerId.ToString() == breakdown1);

                                foreach (var store in SalesCommission.Business.Enums.VinStores)
                                {
                                    if (store.StoreId == breakdown1)
                                    {
                                        label1 = store.Name;
                                    }
                                }

                                break;

                            case "salesteam":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.Team == breakdown1);
                                break;

                            case "make":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.VOfInterest_Make == breakdown1);
                                break;

                            case "model":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.VOfInterest_Model == breakdown1);
                                break;

                            case "stock":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.VOfInterest_StockNumber == breakdown1);
                                break;


                            case "zip":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.PostalCode == breakdown1);
                                break;

                            case "inventorytype":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.VOfInterest_InventoryType == breakdown1);
                                break;

                            case "leaddate":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == breakdown1);
                                break;

                            case "leadtime":
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == breakdown1);

                                TimeSpan result = TimeSpan.FromHours(Int32.Parse(breakdown1));
                                string fromTimeString = result.ToString("hh':'mm");

                                label1 = fromTimeString;

                                break;


                            case "leadmonthyear":
                                //BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == breakdown1);
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == breakdown1) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == breakdown1)));

                                break;

                            default:
                                BreakDown1filteredLeads = Model.ComparisonLeads.FindAll(x => x.DealerId.ToString() == breakdown1);
                                break;
                        }



                        // START ALL THE MAGIC HERE

                        decimal BreakDown1TotalLeadCount = 0;
                        decimal BreakDown1TotalLeadSoldCount = 0;
                        decimal BreakDown1TotalLeadSoldPercent = 0;

                        decimal BreakDown1PhoneLeadCount = 0;
                        decimal BreakDown1WalkInLeadCount = 0;
                        decimal BreakDown1InternetLeadCount = 0;

                        decimal BreakDown1PhoneLeadSoldCount = 0;
                        decimal BreakDown1WalkInLeadSoldCount = 0;
                        decimal BreakDown1InternetLeadSoldCount = 0;

                        decimal BreakDown1PhoneLeadSoldPercent = 0;
                        decimal BreakDown1WalkInLeadSoldPercent = 0;
                        decimal BreakDown1InternetLeadSoldPercent = 0;

                        decimal BreakDown1InternetEngagementCount = 0;
                        decimal BreakDown1InternetEngagementPercent = 0;

                        decimal BreakDown1InternetNewLeadCount = 0;
                        decimal BreakDown1InternetNewLeadSoldCount = 0;
                        decimal BreakDown1InternetNewLeadSoldPercent = 0;

                        decimal BreakDown1InternetUsedLeadCount = 0;
                        decimal BreakDown1InternetUsedLeadSoldCount = 0;
                        decimal BreakDown1InternetUsedLeadSoldPercent = 0;

                        decimal BreakDown1InternetHandyLeadCount = 0;
                        decimal BreakDown1InternetHandyLeadSoldCount = 0;
                        decimal BreakDown1InternetHandyLeadSoldPercent = 0;

                        decimal BreakDown1InternetOtherLeadCount = 0;
                        decimal BreakDown1InternetOtherLeadSoldCount = 0;
                        decimal BreakDown1InternetOtherLeadSoldPercent = 0;

                        decimal BreakDown1InternetAdjustedResponseTime = 0;
                        decimal BreakDown1InternetAvgAdjustedResponseTime = 0;

                        decimal BreakDown1WalkinAdjustedResponseTime = 0;
                        decimal BreakDown1WalkinAvgAdjustedResponseTime = 0;

                        decimal BreakDown1OtherLeadCount = 0;
                        decimal BreakDown1OtherLeadSoldCount = 0;
                        decimal BreakDown1OtherLeadSoldPercent = 0;

                        // var BreakDown1filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown1Information.DealerId);

                        var BreakDown1otherLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                        BreakDown1OtherLeadCount = BreakDown1otherLeads.Count;
                        BreakDown1OtherLeadSoldCount = BreakDown1otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                        var BreakDown1phoneLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                        BreakDown1PhoneLeadCount = BreakDown1phoneLeads.Count;
                        //currentTotalLeadCount += PhoneLeadCount;
                        BreakDown1PhoneLeadSoldCount = BreakDown1phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                        if (BreakDown1PhoneLeadCount > 0)
                        {
                            BreakDown1PhoneLeadSoldPercent = BreakDown1PhoneLeadSoldCount / BreakDown1PhoneLeadCount;
                        }

                        var BreakDown1walkinLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                        BreakDown1WalkInLeadCount = BreakDown1walkinLeads.Count;
                        //currentTotalLeadCount += WalkInLeadCount;
                        BreakDown1WalkInLeadSoldCount = BreakDown1walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                        if (BreakDown1WalkInLeadCount > 0)
                        {
                            BreakDown1WalkInLeadSoldPercent = (BreakDown1WalkInLeadSoldCount / BreakDown1WalkInLeadCount);
                        }

                        BreakDown1WalkinAdjustedResponseTime = BreakDown1walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                        var BreakDown1internetLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                        BreakDown1InternetLeadCount = BreakDown1internetLeads.Count;
                        //currentTotalLeadCount += InternetLeadCount;

                        BreakDown1InternetEngagementCount = BreakDown1internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                        BreakDown1InternetLeadSoldCount = BreakDown1internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                        if (BreakDown1InternetLeadCount > 0)
                        {
                            BreakDown1InternetLeadSoldPercent = (BreakDown1InternetLeadSoldCount / BreakDown1InternetLeadCount);
                            BreakDown1InternetEngagementPercent = (BreakDown1InternetEngagementCount / BreakDown1InternetLeadCount);
                        }

                        if (BreakDown1OtherLeadCount > 0)
                        {
                            BreakDown1OtherLeadSoldPercent = (BreakDown1OtherLeadSoldCount / BreakDown1OtherLeadCount);
                        }


                        //Here comes the fun, find the new, used and handymans
                        var BreakDown1newInternetLeads = BreakDown1internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                        if (BreakDown1newInternetLeads.Count > 0)
                        {
                            BreakDown1InternetNewLeadCount = BreakDown1newInternetLeads.Count;
                            BreakDown1InternetNewLeadSoldCount = BreakDown1newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                        }

                        //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                        var BreakDown1usedInternetLeadsNoHandy = BreakDown1internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                        if (BreakDown1usedInternetLeadsNoHandy.Count > 0)
                        {
                            BreakDown1InternetUsedLeadCount = BreakDown1usedInternetLeadsNoHandy.Count;
                            BreakDown1InternetUsedLeadSoldCount = BreakDown1usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                        }

                        var BreakDown1handymanLeads = BreakDown1internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                        if (BreakDown1handymanLeads.Count > 0)
                        {
                            BreakDown1InternetHandyLeadCount = BreakDown1handymanLeads.Count;
                            BreakDown1InternetHandyLeadSoldCount = BreakDown1handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                        }

                        //Unknown leads, will be leads without a Inventory Type of N or U
                        var BreakDown1unknownLeads = BreakDown1internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                        if (BreakDown1unknownLeads.Count > 0)
                        {
                            BreakDown1InternetOtherLeadCount = BreakDown1unknownLeads.Count;
                            BreakDown1InternetOtherLeadSoldCount = BreakDown1unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                        }

                        BreakDown1InternetAdjustedResponseTime = BreakDown1internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                        if (BreakDown1PhoneLeadCount > 0)
                        {
                            BreakDown1PhoneLeadSoldPercent = BreakDown1PhoneLeadSoldCount / BreakDown1PhoneLeadCount;
                        }

                        if (BreakDown1WalkInLeadCount > 0)
                        {
                            BreakDown1WalkInLeadSoldPercent = BreakDown1WalkInLeadSoldCount / BreakDown1WalkInLeadCount;
                            BreakDown1WalkinAvgAdjustedResponseTime = BreakDown1WalkinAdjustedResponseTime / BreakDown1WalkInLeadCount;
                        }

                        if (BreakDown1InternetLeadCount > 0)
                        {
                            BreakDown1InternetLeadSoldPercent = BreakDown1InternetLeadSoldCount / BreakDown1InternetLeadCount;
                            BreakDown1InternetAvgAdjustedResponseTime = BreakDown1InternetAdjustedResponseTime / BreakDown1InternetLeadCount;
                        }

                        if (BreakDown1InternetNewLeadCount > 0)
                        {
                            BreakDown1InternetNewLeadSoldPercent = BreakDown1InternetNewLeadSoldCount / BreakDown1InternetNewLeadCount;
                        }

                        if (BreakDown1InternetUsedLeadCount > 0)
                        {
                            BreakDown1InternetUsedLeadSoldPercent = BreakDown1InternetUsedLeadSoldCount / BreakDown1InternetUsedLeadCount; ;
                        }

                        if (BreakDown1InternetHandyLeadCount > 0)
                        {
                            BreakDown1InternetHandyLeadSoldPercent = BreakDown1InternetHandyLeadSoldCount / BreakDown1InternetHandyLeadCount; ;
                        }

                        if (BreakDown1InternetOtherLeadCount > 0)
                        {
                            BreakDown1InternetOtherLeadSoldPercent = BreakDown1InternetOtherLeadSoldCount / BreakDown1InternetOtherLeadCount; ;
                        }


                        BreakDown1TotalLeadCount = BreakDown1PhoneLeadCount + BreakDown1WalkInLeadCount + BreakDown1InternetLeadCount + BreakDown1OtherLeadCount;
                        BreakDown1TotalLeadSoldCount = BreakDown1PhoneLeadSoldCount + BreakDown1WalkInLeadSoldCount + BreakDown1InternetLeadSoldCount + BreakDown1OtherLeadSoldCount;
                        if (BreakDown1TotalLeadCount > 0)
                        {
                            BreakDown1TotalLeadSoldPercent = BreakDown1TotalLeadSoldCount / BreakDown1TotalLeadCount;
                        }


                        <tr class="location-bd1-data-row-@breakdown1Index @label1.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd1-collapse-@breakdown1Index">

                            <td class="divider-column breakdown-column"><a data-toggle="collapse" id="location-bd1-collapse-@breakdown1Index" style="cursor: pointer;" class="location-bd1-collapse-@breakdown1Index-href collapsed" data-target=".location-bd1-collapse-@breakdown1Index">@label1 </a></td>
                            <td class="text-center">@BreakDown1TotalLeadCount</td>
                            <td class="text-center">@BreakDown1TotalLeadSoldCount</td>
                            <td class="text-center divider-column">@BreakDown1TotalLeadSoldPercent.ToString("P", nfi)</td>

                            <td class="text-center">@BreakDown1WalkInLeadCount</td>
                            <td class="text-center">@BreakDown1WalkInLeadSoldCount</td>
                            <td class="text-center divider-column">@BreakDown1WalkInLeadSoldPercent.ToString("P", nfi)</td>

                            <td class="text-center">@BreakDown1InternetLeadCount</td>
                            <td class="text-center">@BreakDown1InternetEngagementPercent.ToString("P", nfi)</td>
                            <td class="text-center">@BreakDown1InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                            <td class="text-center">@BreakDown1InternetLeadSoldCount</td>
                            <td class="text-center divider-column">@BreakDown1InternetLeadSoldPercent.ToString("P", nfi)</td>

                            <td class="text-center">@BreakDown1PhoneLeadCount</td>
                            <td class="text-center">@BreakDown1PhoneLeadSoldCount</td>
                            <td class="text-center divider-column">@BreakDown1PhoneLeadSoldPercent.ToString("P", nfi)</td>

                            <td class="text-center">@BreakDown1OtherLeadCount</td>
                            <td class="text-center">@BreakDown1OtherLeadSoldCount</td>
                            <td class="text-center divider-column">@BreakDown1OtherLeadSoldCount</td>
                        </tr>

                            <script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd1-collapse-@breakdown1Index-href").click(function () {
                                        $('.location-bd1-data-row-@breakdown1Index').toggleClass('selected-row');
                                        $(".location-bd1-collapse-@breakdown1Index-href").toggleClass('changed');
                                    });
                                });
                            </script>


                        var breakdownLevel2Values = new List<string>();

                        switch (Model.BreakDownLevel2)
                        {
                            case "associatename":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.Sales_LastName).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "brand":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VOfInterest_Make.Trim().ToUpper()).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "leadgroupname":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadGroupMapping).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "leadsourcename":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "leadstatusname":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadStatusName).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "leadstatustype":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadStatusTypeName).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "locationid":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "salesteam":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.Team).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "make":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VOfInterest_Make).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "model":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VOfInterest_Model).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "stock":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VOfInterest_StockNumber).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "zip":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.PostalCode).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "inventorytype":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VOfInterest_InventoryType).Distinct().OrderBy(x => x).ToList();
                                break;

                            case "leaddate":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadCreatedEastTime.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                break;

                            case "leadtime":
                                breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadCreatedEastTime.Hour.ToString()).Distinct().OrderBy(x => x).ToList();
                                break;


                            case "leadmonthyear":
                                //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                var leadMonthYears = BreakDown1filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() != "SOLD").Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                var soldMonthYears = BreakDown1filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() == "SOLD").Select(x => x.VehicleSoldEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                leadMonthYears.AddRange(soldMonthYears);
                                breakdownLevel2Values = leadMonthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();

                                break;

                            default:
                                //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                break;
                        }


                        foreach (var breakdown2 in breakdownLevel2Values)
                        {

                            var label2 = breakdown2;

                            var BreakDown2filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                            switch (Model.BreakDownLevel2)
                            {
                                case "associatename":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Sales_LastName == breakdown2);
                                    break;

                                case "brand":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == breakdown2);
                                    break;

                                case "leadgroupname":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadGroupMapping == breakdown2);
                                    break;

                                case "leadsourcename":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceName == breakdown2);
                                    break;

                                case "leadstatusname":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadStatusName == breakdown2);
                                    break;

                                case "leadstatustype":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadStatusTypeName == breakdown2);
                                    break;

                                case "locationid":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.DealerId.ToString() == breakdown2);

                                    //var storeName = storeInformation.StoreId;

                                    foreach (var store in SalesCommission.Business.Enums.VinStores)
                                    {
                                        if (store.StoreId == breakdown2)
                                        {
                                            label2 = store.Name;
                                        }
                                    }

                                    break;

                                case "salesteam":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Team == breakdown2);
                                    break;

                                case "make":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VOfInterest_Make == breakdown2);
                                    break;

                                case "model":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VOfInterest_Model == breakdown2);
                                    break;

                                case "stock":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VOfInterest_StockNumber == breakdown2);
                                    break;

                                case "zip":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.PostalCode == breakdown2);
                                    break;

                                case "inventorytype":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VOfInterest_InventoryType == breakdown2);
                                    break;

                                case "leaddate":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == breakdown2);
                                    break;

                                case "leadtime":
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == breakdown2);

                                    TimeSpan result = TimeSpan.FromHours(Int32.Parse(breakdown2));
                                    string fromTimeString = result.ToString("hh':'mm");

                                    label2 = fromTimeString;

                                    break;

                                case "leadmonthyear":
                                    //BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == breakdown2);
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == breakdown2) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == breakdown2)));

                                    break;

                                default:
                                    BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.DealerId.ToString() == breakdown2);
                                    break;
                            }


                            decimal BreakDown2TotalLeadCount = 0;
                            decimal BreakDown2TotalLeadSoldCount = 0;
                            decimal BreakDown2TotalLeadSoldPercent = 0;

                            decimal BreakDown2PhoneLeadCount = 0;
                            decimal BreakDown2WalkInLeadCount = 0;
                            decimal BreakDown2InternetLeadCount = 0;

                            decimal BreakDown2PhoneLeadSoldCount = 0;
                            decimal BreakDown2WalkInLeadSoldCount = 0;
                            decimal BreakDown2InternetLeadSoldCount = 0;

                            decimal BreakDown2PhoneLeadSoldPercent = 0;
                            decimal BreakDown2WalkInLeadSoldPercent = 0;
                            decimal BreakDown2InternetLeadSoldPercent = 0;

                            decimal BreakDown2InternetEngagementCount = 0;
                            decimal BreakDown2InternetEngagementPercent = 0;

                            decimal BreakDown2InternetNewLeadCount = 0;
                            decimal BreakDown2InternetNewLeadSoldCount = 0;
                            decimal BreakDown2InternetNewLeadSoldPercent = 0;

                            decimal BreakDown2InternetUsedLeadCount = 0;
                            decimal BreakDown2InternetUsedLeadSoldCount = 0;
                            decimal BreakDown2InternetUsedLeadSoldPercent = 0;

                            decimal BreakDown2InternetHandyLeadCount = 0;
                            decimal BreakDown2InternetHandyLeadSoldCount = 0;
                            decimal BreakDown2InternetHandyLeadSoldPercent = 0;

                            decimal BreakDown2InternetOtherLeadCount = 0;
                            decimal BreakDown2InternetOtherLeadSoldCount = 0;
                            decimal BreakDown2InternetOtherLeadSoldPercent = 0;

                            decimal BreakDown2InternetAdjustedResponseTime = 0;
                            decimal BreakDown2InternetAvgAdjustedResponseTime = 0;

                            decimal BreakDown2WalkinAdjustedResponseTime = 0;
                            decimal BreakDown2WalkinAvgAdjustedResponseTime = 0;

                            decimal BreakDown2OtherLeadCount = 0;
                            decimal BreakDown2OtherLeadSoldCount = 0;
                            decimal BreakDown2OtherLeadSoldPercent = 0;

                            // var BreakDown2filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown2Information.DealerId);

                            var BreakDown2otherLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                            BreakDown2OtherLeadCount = BreakDown2otherLeads.Count;
                            BreakDown2OtherLeadSoldCount = BreakDown2otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                            var BreakDown2phoneLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                            BreakDown2PhoneLeadCount = BreakDown2phoneLeads.Count;
                            //currentTotalLeadCount += PhoneLeadCount;
                            BreakDown2PhoneLeadSoldCount = BreakDown2phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                            if (BreakDown2PhoneLeadCount > 0)
                            {
                                BreakDown2PhoneLeadSoldPercent = BreakDown2PhoneLeadSoldCount / BreakDown2PhoneLeadCount;
                            }

                            var BreakDown2walkinLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                            BreakDown2WalkInLeadCount = BreakDown2walkinLeads.Count;
                            //currentTotalLeadCount += WalkInLeadCount;
                            BreakDown2WalkInLeadSoldCount = BreakDown2walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                            if (BreakDown2WalkInLeadCount > 0)
                            {
                                BreakDown2WalkInLeadSoldPercent = (BreakDown2WalkInLeadSoldCount / BreakDown2WalkInLeadCount);
                            }

                            BreakDown2WalkinAdjustedResponseTime = BreakDown2walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                            var BreakDown2internetLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                            BreakDown2InternetLeadCount = BreakDown2internetLeads.Count;
                            //currentTotalLeadCount += InternetLeadCount;
                            BreakDown2InternetEngagementCount = BreakDown2internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                            BreakDown2InternetLeadSoldCount = BreakDown2internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                            if (BreakDown2InternetLeadCount > 0)
                            {
                                BreakDown2InternetLeadSoldPercent = (BreakDown2InternetLeadSoldCount / BreakDown2InternetLeadCount);
                                BreakDown2InternetEngagementPercent = (BreakDown2InternetEngagementCount / BreakDown2InternetLeadCount);
                            }


                            if (BreakDown2OtherLeadCount > 0)
                            {
                                BreakDown2OtherLeadSoldPercent = (BreakDown2OtherLeadSoldCount / BreakDown2OtherLeadCount);
                            }

                            //Here comes the fun, find the new, used and handymans
                            var BreakDown2newInternetLeads = BreakDown2internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                            if (BreakDown2newInternetLeads.Count > 0)
                            {
                                BreakDown2InternetNewLeadCount = BreakDown2newInternetLeads.Count;
                                BreakDown2InternetNewLeadSoldCount = BreakDown2newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                            }

                            //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                            var BreakDown2usedInternetLeadsNoHandy = BreakDown2internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                            if (BreakDown2usedInternetLeadsNoHandy.Count > 0)
                            {
                                BreakDown2InternetUsedLeadCount = BreakDown2usedInternetLeadsNoHandy.Count;
                                BreakDown2InternetUsedLeadSoldCount = BreakDown2usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                            }

                            var BreakDown2handymanLeads = BreakDown2internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                            if (BreakDown2handymanLeads.Count > 0)
                            {
                                BreakDown2InternetHandyLeadCount = BreakDown2handymanLeads.Count;
                                BreakDown2InternetHandyLeadSoldCount = BreakDown2handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                            }

                            //Unknown leads, will be leads without a Inventory Type of N or U
                            var BreakDown2unknownLeads = BreakDown2internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                            if (BreakDown2unknownLeads.Count > 0)
                            {
                                BreakDown2InternetOtherLeadCount = BreakDown2unknownLeads.Count;
                                BreakDown2InternetOtherLeadSoldCount = BreakDown2unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                            }

                            BreakDown2InternetAdjustedResponseTime = BreakDown2internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                            if (BreakDown2PhoneLeadCount > 0)
                            {
                                BreakDown2PhoneLeadSoldPercent = BreakDown2PhoneLeadSoldCount / BreakDown2PhoneLeadCount;
                            }

                            if (BreakDown2WalkInLeadCount > 0)
                            {
                                BreakDown2WalkInLeadSoldPercent = BreakDown2WalkInLeadSoldCount / BreakDown2WalkInLeadCount;
                                BreakDown2WalkinAvgAdjustedResponseTime = BreakDown2WalkinAdjustedResponseTime / BreakDown2WalkInLeadCount;
                            }

                            if (BreakDown2InternetLeadCount > 0)
                            {
                                BreakDown2InternetLeadSoldPercent = BreakDown2InternetLeadSoldCount / BreakDown2InternetLeadCount;
                                BreakDown2InternetAvgAdjustedResponseTime = BreakDown2InternetAdjustedResponseTime / BreakDown2InternetLeadCount;
                            }

                            if (BreakDown2InternetNewLeadCount > 0)
                            {
                                BreakDown2InternetNewLeadSoldPercent = BreakDown2InternetNewLeadSoldCount / BreakDown2InternetNewLeadCount;
                            }

                            if (BreakDown2InternetUsedLeadCount > 0)
                            {
                                BreakDown2InternetUsedLeadSoldPercent = BreakDown2InternetUsedLeadSoldCount / BreakDown2InternetUsedLeadCount; ;
                            }

                            if (BreakDown2InternetHandyLeadCount > 0)
                            {
                                BreakDown2InternetHandyLeadSoldPercent = BreakDown2InternetHandyLeadSoldCount / BreakDown2InternetHandyLeadCount; ;
                            }

                            if (BreakDown2InternetOtherLeadCount > 0)
                            {
                                BreakDown2InternetOtherLeadSoldPercent = BreakDown2InternetOtherLeadSoldCount / BreakDown2InternetOtherLeadCount; ;
                            }


                            BreakDown2TotalLeadCount = BreakDown2PhoneLeadCount + BreakDown2WalkInLeadCount + BreakDown2InternetLeadCount + BreakDown2OtherLeadCount;
                            BreakDown2TotalLeadSoldCount = BreakDown2PhoneLeadSoldCount + BreakDown2WalkInLeadSoldCount + BreakDown2InternetLeadSoldCount + BreakDown2OtherLeadSoldCount;
                            if (BreakDown2TotalLeadCount > 0)
                            {
                                BreakDown2TotalLeadSoldPercent = BreakDown2TotalLeadSoldCount / BreakDown2TotalLeadCount;

                            }


                            <tr class="location-bd1-collapse-@breakdown1Index collapse out location-bd2-data-row-@breakdown2Index @label2.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd2-collapse-@breakdown2Index">

                                <td class="divider-column indent-td2"><a data-toggle="collapse" id="location-bd2-collapse-@breakdown2Index" style="cursor: pointer;" class="location-bd2-collapse-@breakdown2Index-href collapsed indent-2" data-target=".location-bd2-collapse-@breakdown2Index">@label2 </a></td>
                                <td class="text-center">@BreakDown2TotalLeadCount</td>
                                <td class="text-center">@BreakDown2TotalLeadSoldCount</td>
                                <td class="text-center divider-column">@BreakDown2TotalLeadSoldPercent.ToString("P", nfi)</td>


                                <td class="text-center">@BreakDown2WalkInLeadCount</td>
                                <td class="text-center">@BreakDown2WalkInLeadSoldCount</td>
                                <td class="text-center divider-column">@BreakDown2WalkInLeadSoldPercent.ToString("P", nfi)</td>

                                <td class="text-center">@BreakDown2InternetLeadCount</td>
                                <td class="text-center">@BreakDown2InternetEngagementPercent.ToString("P", nfi)</td>
                                <td class="text-center">@BreakDown2InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                                <td class="text-center">@BreakDown2InternetLeadSoldCount</td>
                                <td class="text-center divider-column">@BreakDown2InternetLeadSoldPercent.ToString("P", nfi)</td>

                                <td class="text-center">@BreakDown2PhoneLeadCount</td>
                                <td class="text-center">@BreakDown2PhoneLeadSoldCount</td>
                                <td class="text-center divider-column">@BreakDown2PhoneLeadSoldPercent.ToString("P", nfi)</td>

                                <td class="text-center">@BreakDown2OtherLeadCount</td>
                                <td class="text-center">@BreakDown2OtherLeadSoldCount</td>
                                <td class="text-center divider-column">@BreakDown2OtherLeadSoldCount</td>
                            </tr>

                                <script type="text/javascript">

                                    $(document).ready(function () {
                                        $(".location-bd2-collapse-@breakdown2Index-href").click(function () {
                                            $('.location-bd2-data-row-@breakdown2Index').toggleClass('selected-row');
                                            $(".location-bd2-collapse-@breakdown2Index-href").toggleClass('changed');
                                        });
                                    });
                                </script>

                            var breakdownLevel3Values = new List<string>();

                            switch (Model.BreakDownLevel3)
                            {
                                case "associatename":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.Sales_LastName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "brand":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VOfInterest_Make.Trim().ToUpper()).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "leadgroupname":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadGroupMapping).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "leadsourcename":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "leadstatusname":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadStatusName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "leadstatustype":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadStatusTypeName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "locationid":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "salesteam":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.Team).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "make":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VOfInterest_Make).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "model":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VOfInterest_Model).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "stock":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VOfInterest_StockNumber).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "zip":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.PostalCode).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "inventorytype":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VOfInterest_InventoryType).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "leaddate":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadCreatedEastTime.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                    break;

                                case "leadtime":
                                    breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadCreatedEastTime.Hour.ToString()).Distinct().OrderBy(x => x).ToList();
                                    break;


                                case "leadmonthyear":
                                    //breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                    var leadMonthYears = BreakDown2filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() != "SOLD").Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                    var soldMonthYears = BreakDown2filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() == "SOLD").Select(x => x.VehicleSoldEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                    leadMonthYears.AddRange(soldMonthYears);
                                    breakdownLevel3Values = leadMonthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();

                                    break;

                                default:
                                    //breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                    break;
                            }



                            foreach (var BreakDown3 in breakdownLevel3Values)
                            {
                                var label3 = BreakDown3;
                                var BreakDown3filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                                switch (Model.BreakDownLevel3)
                                {
                                    case "associatename":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Sales_LastName == BreakDown3);
                                        break;

                                    case "brand":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == BreakDown3);
                                        break;

                                    case "leadgroupname":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadGroupMapping == BreakDown3);
                                        break;

                                    case "leadsourcename":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceName == BreakDown3);
                                        break;

                                    case "leadstatusname":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadStatusName == BreakDown3);
                                        break;

                                    case "leadstatustype":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadStatusTypeName == BreakDown3);
                                        break;

                                    case "locationid":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown3);

                                        foreach (var store in SalesCommission.Business.Enums.VinStores)
                                        {
                                            if (store.StoreId == BreakDown3)
                                            {
                                                label3 = store.Name;
                                            }
                                        }

                                        break;

                                    case "salesteam":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Team == BreakDown3);
                                        break;

                                    case "make":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Make == BreakDown3);
                                        break;

                                    case "model":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Model == BreakDown3);
                                        break;

                                    case "stock":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_StockNumber == BreakDown3);
                                        break;


                                    case "zip":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.PostalCode == BreakDown3);
                                        break;

                                    case "inventorytype":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_InventoryType == BreakDown3);
                                        break;

                                    case "leaddate":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == BreakDown3);
                                        break;

                                    case "leadtime":
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == BreakDown3);

                                        TimeSpan result = TimeSpan.FromHours(Int32.Parse(BreakDown3));
                                        string fromTimeString = result.ToString("hh':'mm");

                                        label3 = fromTimeString;

                                        break;

                                    case "leadmonthyear":
                                        //BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown3);

                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown3) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == BreakDown3)));

                                        break;

                                    default:
                                        BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown3);
                                        break;
                                }


                                decimal BreakDown3TotalLeadCount = 0;
                                decimal BreakDown3TotalLeadSoldCount = 0;
                                decimal BreakDown3TotalLeadSoldPercent = 0;

                                decimal BreakDown3PhoneLeadCount = 0;
                                decimal BreakDown3WalkInLeadCount = 0;
                                decimal BreakDown3InternetLeadCount = 0;

                                decimal BreakDown3PhoneLeadSoldCount = 0;
                                decimal BreakDown3WalkInLeadSoldCount = 0;
                                decimal BreakDown3InternetLeadSoldCount = 0;

                                decimal BreakDown3PhoneLeadSoldPercent = 0;
                                decimal BreakDown3WalkInLeadSoldPercent = 0;
                                decimal BreakDown3InternetLeadSoldPercent = 0;

                                decimal BreakDown3InternetEngagementCount = 0;
                                decimal BreakDown3InternetEngagementPercent = 0;

                                decimal BreakDown3InternetNewLeadCount = 0;
                                decimal BreakDown3InternetNewLeadSoldCount = 0;
                                decimal BreakDown3InternetNewLeadSoldPercent = 0;

                                decimal BreakDown3InternetUsedLeadCount = 0;
                                decimal BreakDown3InternetUsedLeadSoldCount = 0;
                                decimal BreakDown3InternetUsedLeadSoldPercent = 0;

                                decimal BreakDown3InternetHandyLeadCount = 0;
                                decimal BreakDown3InternetHandyLeadSoldCount = 0;
                                decimal BreakDown3InternetHandyLeadSoldPercent = 0;

                                decimal BreakDown3InternetOtherLeadCount = 0;
                                decimal BreakDown3InternetOtherLeadSoldCount = 0;
                                decimal BreakDown3InternetOtherLeadSoldPercent = 0;

                                decimal BreakDown3InternetAdjustedResponseTime = 0;
                                decimal BreakDown3InternetAvgAdjustedResponseTime = 0;

                                decimal BreakDown3WalkinAdjustedResponseTime = 0;
                                decimal BreakDown3WalkinAvgAdjustedResponseTime = 0;

                                decimal BreakDown3OtherLeadCount = 0;
                                decimal BreakDown3OtherLeadSoldCount = 0;
                                decimal BreakDown3OtherLeadSoldPercent = 0;

                                // var BreakDown3filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown3Information.DealerId);

                                var BreakDown3otherLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                                BreakDown3OtherLeadCount = BreakDown3otherLeads.Count;
                                BreakDown3OtherLeadSoldCount = BreakDown3otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                var BreakDown3phoneLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                                BreakDown3PhoneLeadCount = BreakDown3phoneLeads.Count;
                                //currentTotalLeadCount += PhoneLeadCount;
                                BreakDown3PhoneLeadSoldCount = BreakDown3phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                if (BreakDown3PhoneLeadCount > 0)
                                {
                                    BreakDown3PhoneLeadSoldPercent = BreakDown3PhoneLeadSoldCount / BreakDown3PhoneLeadCount;
                                }

                                var BreakDown3walkinLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                                BreakDown3WalkInLeadCount = BreakDown3walkinLeads.Count;
                                //currentTotalLeadCount += WalkInLeadCount;
                                BreakDown3WalkInLeadSoldCount = BreakDown3walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                if (BreakDown3WalkInLeadCount > 0)
                                {
                                    BreakDown3WalkInLeadSoldPercent = (BreakDown3WalkInLeadSoldCount / BreakDown3WalkInLeadCount);
                                }

                                BreakDown3WalkinAdjustedResponseTime = BreakDown3walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                var BreakDown3internetLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                                BreakDown3InternetLeadCount = BreakDown3internetLeads.Count;
                                //currentTotalLeadCount += InternetLeadCount;
                                BreakDown3InternetEngagementCount = BreakDown3internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                                BreakDown3InternetLeadSoldCount = BreakDown3internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                if (BreakDown3InternetLeadCount > 0)
                                {
                                    BreakDown3InternetLeadSoldPercent = (BreakDown3InternetLeadSoldCount / BreakDown3InternetLeadCount);
                                    BreakDown3InternetEngagementPercent = (BreakDown3InternetEngagementCount / BreakDown3InternetLeadCount);
                                }


                                if (BreakDown3OtherLeadCount > 0)
                                {
                                    BreakDown3OtherLeadSoldPercent = (BreakDown3OtherLeadSoldCount / BreakDown3OtherLeadCount);
                                }

                                //Here comes the fun, find the new, used and handymans
                                var BreakDown3newInternetLeads = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                                if (BreakDown3newInternetLeads.Count > 0)
                                {
                                    BreakDown3InternetNewLeadCount = BreakDown3newInternetLeads.Count;
                                    BreakDown3InternetNewLeadSoldCount = BreakDown3newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                }

                                //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                                var BreakDown3usedInternetLeadsNoHandy = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                                if (BreakDown3usedInternetLeadsNoHandy.Count > 0)
                                {
                                    BreakDown3InternetUsedLeadCount = BreakDown3usedInternetLeadsNoHandy.Count;
                                    BreakDown3InternetUsedLeadSoldCount = BreakDown3usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                }

                                var BreakDown3handymanLeads = BreakDown3internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                                if (BreakDown3handymanLeads.Count > 0)
                                {
                                    BreakDown3InternetHandyLeadCount = BreakDown3handymanLeads.Count;
                                    BreakDown3InternetHandyLeadSoldCount = BreakDown3handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                }

                                //Unknown leads, will be leads without a Inventory Type of N or U
                                var BreakDown3unknownLeads = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                                if (BreakDown3unknownLeads.Count > 0)
                                {
                                    BreakDown3InternetOtherLeadCount = BreakDown3unknownLeads.Count;
                                    BreakDown3InternetOtherLeadSoldCount = BreakDown3unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                }

                                BreakDown3InternetAdjustedResponseTime = BreakDown3internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                if (BreakDown3PhoneLeadCount > 0)
                                {
                                    BreakDown3PhoneLeadSoldPercent = BreakDown3PhoneLeadSoldCount / BreakDown3PhoneLeadCount;
                                }

                                if (BreakDown3WalkInLeadCount > 0)
                                {
                                    BreakDown3WalkInLeadSoldPercent = BreakDown3WalkInLeadSoldCount / BreakDown3WalkInLeadCount;
                                    BreakDown3WalkinAvgAdjustedResponseTime = BreakDown3WalkinAdjustedResponseTime / BreakDown3WalkInLeadCount;
                                }

                                if (BreakDown3InternetLeadCount > 0)
                                {
                                    BreakDown3InternetLeadSoldPercent = BreakDown3InternetLeadSoldCount / BreakDown3InternetLeadCount;
                                    BreakDown3InternetAvgAdjustedResponseTime = BreakDown3InternetAdjustedResponseTime / BreakDown3InternetLeadCount;
                                }

                                if (BreakDown3InternetNewLeadCount > 0)
                                {
                                    BreakDown3InternetNewLeadSoldPercent = BreakDown3InternetNewLeadSoldCount / BreakDown3InternetNewLeadCount;
                                }

                                if (BreakDown3InternetUsedLeadCount > 0)
                                {
                                    BreakDown3InternetUsedLeadSoldPercent = BreakDown3InternetUsedLeadSoldCount / BreakDown3InternetUsedLeadCount; ;
                                }

                                if (BreakDown3InternetHandyLeadCount > 0)
                                {
                                    BreakDown3InternetHandyLeadSoldPercent = BreakDown3InternetHandyLeadSoldCount / BreakDown3InternetHandyLeadCount; ;
                                }

                                if (BreakDown3InternetOtherLeadCount > 0)
                                {
                                    BreakDown3InternetOtherLeadSoldPercent = BreakDown3InternetOtherLeadSoldCount / BreakDown3InternetOtherLeadCount; ;
                                }


                                BreakDown3TotalLeadCount = BreakDown3PhoneLeadCount + BreakDown3WalkInLeadCount + BreakDown3InternetLeadCount + BreakDown3OtherLeadCount;
                                BreakDown3TotalLeadSoldCount = BreakDown3PhoneLeadSoldCount + BreakDown3WalkInLeadSoldCount + BreakDown3InternetLeadSoldCount + BreakDown3OtherLeadSoldCount;
                                if (BreakDown3TotalLeadCount > 0)
                                {
                                    BreakDown3TotalLeadSoldPercent = BreakDown3TotalLeadSoldCount / BreakDown3TotalLeadCount;
                                }


                                <tr class="location-bd2-collapse-@breakdown2Index collapse out location-bd3-data-row-@BreakDown3Index @label3.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown3Index">

                                    <td class="divider-column indent-td3"><a data-toggle="collapse" id="location-bd3-collapse-@BreakDown3Index" style="cursor: pointer;" class="location-bd3-collapse-@BreakDown3Index-href collapsed indent-3" data-target=".location-bd3-collapse-@BreakDown3Index">@label3 </a></td>

                                    <td class="text-center">@BreakDown3TotalLeadCount</td>
                                    <td class="text-center">@BreakDown3TotalLeadSoldCount</td>
                                    <td class="text-center divider-column">@BreakDown3TotalLeadSoldPercent.ToString("P", nfi)</td>


                                    <td class="text-center">@BreakDown3WalkInLeadCount</td>
                                    <td class="text-center">@BreakDown3WalkInLeadSoldCount</td>
                                    <td class="text-center divider-column">@BreakDown3WalkInLeadSoldPercent.ToString("P", nfi)</td>

                                    <td class="text-center">@BreakDown3InternetLeadCount</td>
                                    <td class="text-center">@BreakDown3InternetEngagementPercent.ToString("P", nfi)</td>
                                    <td class="text-center">@BreakDown3InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                                    <td class="text-center">@BreakDown3InternetLeadSoldCount</td>
                                    <td class="text-center divider-column">@BreakDown3InternetLeadSoldPercent.ToString("P", nfi)</td>

                                    <td class="text-center">@BreakDown3PhoneLeadCount</td>
                                    <td class="text-center">@BreakDown3PhoneLeadSoldCount</td>
                                    <td class="text-center divider-column">@BreakDown3PhoneLeadSoldPercent.ToString("P", nfi)</td>

                                    <td class="text-center">@BreakDown3OtherLeadCount</td>
                                    <td class="text-center">@BreakDown3OtherLeadSoldCount</td>
                                    <td class="text-center divider-column">@BreakDown3OtherLeadSoldCount</td>
                                </tr>

                                    <script type="text/javascript">

                                        $(document).ready(function () {
                                            $(".location-bd3-collapse-@BreakDown3Index-href").click(function () {
                                                $('.location-bd3-data-row-@BreakDown3Index').toggleClass('selected-row');
                                                $(".location-bd3-collapse-@BreakDown3Index-href").toggleClass('changed');
                                            });
                                        });
                                    </script>

                                var breakdownLevel4Values = new List<string>();


                                switch (Model.BreakDownLevel4)
                                {
                                    case "associatename":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Sales_LastName).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "brand":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Make.Trim().ToUpper()).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "leadgroupname":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadGroupMapping).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "leadsourcename":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "leadstatusname":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadStatusName).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "leadstatustype":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadStatusTypeName).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "locationid":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "salesteam":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Team).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "make":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Make).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "model":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Model).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "stock":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_StockNumber).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "zip":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.PostalCode).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "inventorytype":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_InventoryType).Distinct().OrderBy(x => x).ToList();
                                        break;

                                    case "leaddate":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadCreatedEastTime.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                        break;

                                    case "leadtime":
                                        breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadCreatedEastTime.Hour.ToString()).Distinct().OrderBy(x => x).ToList();
                                        break;


                                    case "leadmonthyear":
                                        //breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                        var leadMonthYears = BreakDown3filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() != "SOLD").Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                        var soldMonthYears = BreakDown3filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() == "SOLD").Select(x => x.VehicleSoldEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                        leadMonthYears.AddRange(soldMonthYears);
                                        breakdownLevel4Values = leadMonthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();

                                        break;

                                    default:
                                        //breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                        break;
                                }



                                foreach (var BreakDown4 in breakdownLevel4Values)
                                {
                                    var label4 = BreakDown4;
                                    var BreakDown4filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                                    switch (Model.BreakDownLevel4)
                                    {
                                        case "associatename":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Sales_LastName == BreakDown4);
                                            break;

                                        case "brand":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == BreakDown4);
                                            break;

                                        case "leadgroupname":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadGroupMapping == BreakDown4);
                                            break;

                                        case "leadsourcename":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceName == BreakDown4);
                                            break; ;

                                        case "leadstatusname":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadStatusName == BreakDown4);
                                            break;

                                        case "leadstatustype":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadStatusTypeName == BreakDown4);
                                            break;

                                        case "locationid":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown4);

                                            foreach (var store in SalesCommission.Business.Enums.VinStores)
                                            {
                                                if (store.StoreId == BreakDown4)
                                                {
                                                    label4 = store.Name;
                                                }
                                            }

                                            break;

                                        case "salesteam":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Team == BreakDown4);
                                            break;

                                        case "make":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Make == BreakDown4);
                                            break;

                                        case "model":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Model == BreakDown4);
                                            break;

                                        case "stock":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_StockNumber == BreakDown4);
                                            break;

                                        case "zip":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.PostalCode == BreakDown4);
                                            break;

                                        case "inventorytype":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_InventoryType == BreakDown4);
                                            break;

                                        case "leaddate":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == BreakDown4);
                                            break;

                                        case "leadtime":
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == BreakDown4);

                                            TimeSpan result = TimeSpan.FromHours(Int32.Parse(BreakDown4));
                                            string fromTimeString = result.ToString("hh':'mm");

                                            label4 = fromTimeString;

                                            break;


                                        case "leadmonthyear":
                                            //BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == breakdown4);

                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown4) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == BreakDown4)));

                                            break;

                                        default:
                                            BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown4);
                                            break;
                                    }


                                    decimal BreakDown4TotalLeadCount = 0;
                                    decimal BreakDown4TotalLeadSoldCount = 0;
                                    decimal BreakDown4TotalLeadSoldPercent = 0;

                                    decimal BreakDown4PhoneLeadCount = 0;
                                    decimal BreakDown4WalkInLeadCount = 0;
                                    decimal BreakDown4InternetLeadCount = 0;

                                    decimal BreakDown4PhoneLeadSoldCount = 0;
                                    decimal BreakDown4WalkInLeadSoldCount = 0;
                                    decimal BreakDown4InternetLeadSoldCount = 0;

                                    decimal BreakDown4PhoneLeadSoldPercent = 0;
                                    decimal BreakDown4WalkInLeadSoldPercent = 0;
                                    decimal BreakDown4InternetLeadSoldPercent = 0;

                                    decimal BreakDown4InternetEngagementCount = 0;
                                    decimal BreakDown4InternetEngagementPercent = 0;

                                    decimal BreakDown4InternetNewLeadCount = 0;
                                    decimal BreakDown4InternetNewLeadSoldCount = 0;
                                    decimal BreakDown4InternetNewLeadSoldPercent = 0;

                                    decimal BreakDown4InternetUsedLeadCount = 0;
                                    decimal BreakDown4InternetUsedLeadSoldCount = 0;
                                    decimal BreakDown4InternetUsedLeadSoldPercent = 0;

                                    decimal BreakDown4InternetHandyLeadCount = 0;
                                    decimal BreakDown4InternetHandyLeadSoldCount = 0;
                                    decimal BreakDown4InternetHandyLeadSoldPercent = 0;

                                    decimal BreakDown4InternetOtherLeadCount = 0;
                                    decimal BreakDown4InternetOtherLeadSoldCount = 0;
                                    decimal BreakDown4InternetOtherLeadSoldPercent = 0;

                                    decimal BreakDown4InternetAdjustedResponseTime = 0;
                                    decimal BreakDown4InternetAvgAdjustedResponseTime = 0;

                                    decimal BreakDown4WalkinAdjustedResponseTime = 0;
                                    decimal BreakDown4WalkinAvgAdjustedResponseTime = 0;

                                    decimal BreakDown4OtherLeadCount = 0;
                                    decimal BreakDown4OtherLeadSoldCount = 0;
                                    decimal BreakDown4OtherLeadSoldPercent = 0;

                                    // var BreakDown4filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown4Information.DealerId);

                                    var BreakDown4otherLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                                    BreakDown4OtherLeadCount = BreakDown4otherLeads.Count;
                                    BreakDown4OtherLeadSoldCount = BreakDown4otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    var BreakDown4phoneLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                                    BreakDown4PhoneLeadCount = BreakDown4phoneLeads.Count;
                                    //currentTotalLeadCount += PhoneLeadCount;
                                    BreakDown4PhoneLeadSoldCount = BreakDown4phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown4PhoneLeadCount > 0)
                                    {
                                        BreakDown4PhoneLeadSoldPercent = BreakDown4PhoneLeadSoldCount / BreakDown4PhoneLeadCount;
                                    }

                                    var BreakDown4walkinLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                                    BreakDown4WalkInLeadCount = BreakDown4walkinLeads.Count;
                                    //currentTotalLeadCount += WalkInLeadCount;
                                    BreakDown4WalkInLeadSoldCount = BreakDown4walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown4WalkInLeadCount > 0)
                                    {
                                        BreakDown4WalkInLeadSoldPercent = (BreakDown4WalkInLeadSoldCount / BreakDown4WalkInLeadCount);
                                    }

                                    BreakDown4WalkinAdjustedResponseTime = BreakDown4walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                    var BreakDown4internetLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                                    BreakDown4InternetLeadCount = BreakDown4internetLeads.Count;
                                    //currentTotalLeadCount += InternetLeadCount;
                                    BreakDown4InternetEngagementCount = BreakDown4internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                                    BreakDown4InternetLeadSoldCount = BreakDown4internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown4InternetLeadCount > 0)
                                    {
                                        BreakDown4InternetLeadSoldPercent = (BreakDown4InternetLeadSoldCount / BreakDown4InternetLeadCount);
                                        BreakDown4InternetEngagementPercent = (BreakDown4InternetEngagementCount / BreakDown4InternetLeadCount);
                                    }


                                    if (BreakDown4OtherLeadCount > 0)
                                    {
                                        BreakDown4OtherLeadSoldPercent = (BreakDown4OtherLeadSoldCount / BreakDown4OtherLeadCount);
                                    }

                                    //Here comes the fun, find the new, used and handymans
                                    var BreakDown4newInternetLeads = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                                    if (BreakDown4newInternetLeads.Count > 0)
                                    {
                                        BreakDown4InternetNewLeadCount = BreakDown4newInternetLeads.Count;
                                        BreakDown4InternetNewLeadSoldCount = BreakDown4newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                                    var BreakDown4usedInternetLeadsNoHandy = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                                    if (BreakDown4usedInternetLeadsNoHandy.Count > 0)
                                    {
                                        BreakDown4InternetUsedLeadCount = BreakDown4usedInternetLeadsNoHandy.Count;
                                        BreakDown4InternetUsedLeadSoldCount = BreakDown4usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    var BreakDown4handymanLeads = BreakDown4internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                                    if (BreakDown4handymanLeads.Count > 0)
                                    {
                                        BreakDown4InternetHandyLeadCount = BreakDown4handymanLeads.Count;
                                        BreakDown4InternetHandyLeadSoldCount = BreakDown4handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    //Unknown leads, will be leads without a Inventory Type of N or U
                                    var BreakDown4unknownLeads = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                                    if (BreakDown4unknownLeads.Count > 0)
                                    {
                                        BreakDown4InternetOtherLeadCount = BreakDown4unknownLeads.Count;
                                        BreakDown4InternetOtherLeadSoldCount = BreakDown4unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    BreakDown4InternetAdjustedResponseTime = BreakDown4internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                    if (BreakDown4PhoneLeadCount > 0)
                                    {
                                        BreakDown4PhoneLeadSoldPercent = BreakDown4PhoneLeadSoldCount / BreakDown4PhoneLeadCount;
                                    }

                                    if (BreakDown4WalkInLeadCount > 0)
                                    {
                                        BreakDown4WalkInLeadSoldPercent = BreakDown4WalkInLeadSoldCount / BreakDown4WalkInLeadCount;
                                        BreakDown4WalkinAvgAdjustedResponseTime = BreakDown4WalkinAdjustedResponseTime / BreakDown4WalkInLeadCount;
                                    }

                                    if (BreakDown4InternetLeadCount > 0)
                                    {
                                        BreakDown4InternetLeadSoldPercent = BreakDown4InternetLeadSoldCount / BreakDown4InternetLeadCount;
                                        BreakDown4InternetAvgAdjustedResponseTime = BreakDown4InternetAdjustedResponseTime / BreakDown4InternetLeadCount;
                                    }

                                    if (BreakDown4InternetNewLeadCount > 0)
                                    {
                                        BreakDown4InternetNewLeadSoldPercent = BreakDown4InternetNewLeadSoldCount / BreakDown4InternetNewLeadCount;
                                    }

                                    if (BreakDown4InternetUsedLeadCount > 0)
                                    {
                                        BreakDown4InternetUsedLeadSoldPercent = BreakDown4InternetUsedLeadSoldCount / BreakDown4InternetUsedLeadCount; ;
                                    }

                                    if (BreakDown4InternetHandyLeadCount > 0)
                                    {
                                        BreakDown4InternetHandyLeadSoldPercent = BreakDown4InternetHandyLeadSoldCount / BreakDown4InternetHandyLeadCount; ;
                                    }

                                    if (BreakDown4InternetOtherLeadCount > 0)
                                    {
                                        BreakDown4InternetOtherLeadSoldPercent = BreakDown4InternetOtherLeadSoldCount / BreakDown4InternetOtherLeadCount; ;
                                    }


                                    BreakDown4TotalLeadCount = BreakDown4PhoneLeadCount + BreakDown4WalkInLeadCount + BreakDown4InternetLeadCount + BreakDown4OtherLeadCount;
                                    BreakDown4TotalLeadSoldCount = BreakDown4PhoneLeadSoldCount + BreakDown4WalkInLeadSoldCount + BreakDown4InternetLeadSoldCount + BreakDown4OtherLeadSoldCount;
                                    if (BreakDown4TotalLeadCount > 0)
                                    {
                                        BreakDown4TotalLeadSoldPercent = BreakDown4TotalLeadSoldCount / BreakDown4TotalLeadCount;
                                    }


                                    <tr class="location-bd3-collapse-@BreakDown3Index collapse out location-bd3-data-row-@BreakDown4Index @BreakDown4.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown4Index">

                                        <td class="divider-column indent-td4"><span class="indent-4">@label4</span></td>

                                        <td class="text-center">@BreakDown4TotalLeadCount</td>
                                        <td class="text-center">@BreakDown4TotalLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown4TotalLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown4WalkInLeadCount</td>
                                        <td class="text-center">@BreakDown4WalkInLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown4WalkInLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown4InternetLeadCount</td>
                                        <td class="text-center">@BreakDown4InternetEngagementPercent.ToString("P", nfi)</td>
                                        <td class="text-center">@BreakDown4InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                                        <td class="text-center">@BreakDown4InternetLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown4InternetLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown4PhoneLeadCount</td>
                                        <td class="text-center">@BreakDown4PhoneLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown4PhoneLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown4OtherLeadCount</td>
                                        <td class="text-center">@BreakDown4OtherLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown4OtherLeadSoldCount</td>
                                    </tr>

                                    BreakDown4Index += 1;

                                }


                                BreakDown3Index += 1;

                            }

                            breakdown2Index += 1;

                        }

                        breakdown1Index += 1;

                    }


                }


                @{
                    decimal TotalPhoneLeadCount = 0;
                    decimal TotalWalkInLeadCount = 0;
                    decimal TotalInternetLeadCount = 0;

                    decimal TotalPhoneLeadSoldCount = 0;
                    decimal TotalWalkInLeadSoldCount = 0;
                    decimal TotalInternetLeadSoldCount = 0;

                    decimal TotalPhoneLeadSoldPercent = 0;
                    decimal TotalWalkInLeadSoldPercent = 0;
                    decimal TotalInternetLeadSoldPercent = 0;

                    decimal TotalInternetNewLeadCount = 0;
                    decimal TotalInternetNewLeadSoldCount = 0;
                    decimal TotalInternetNewLeadSoldPercent = 0;

                    decimal TotalInternetUsedLeadCount = 0;
                    decimal TotalInternetUsedLeadSoldCount = 0;
                    decimal TotalInternetUsedLeadSoldPercent = 0;

                    decimal TotalInternetHandyLeadCount = 0;
                    decimal TotalInternetHandyLeadSoldCount = 0;
                    decimal TotalInternetHandyLeadSoldPercent = 0;

                    decimal TotalInternetOtherLeadCount = 0;
                    decimal TotalInternetOtherLeadSoldCount = 0;
                    decimal TotalInternetOtherLeadSoldPercent = 0;

                    decimal TotalInternetAdjustedResponseTime = 0;
                    decimal TotalInternetAvgAdjustedResponseTime = 0;

                    decimal TotalWalkInAdjustedResponseTime = 0;
                    decimal TotalWalkInAvgAdjustedResponseTime = 0;

                    var index = 0;
                }

                
                @{
                    if (TotalPhoneLeadCount > 0)
                    {
                        TotalPhoneLeadSoldPercent = TotalPhoneLeadSoldCount / TotalPhoneLeadCount;
                    }

                    if (TotalWalkInLeadCount > 0)
                    {
                        TotalWalkInLeadSoldPercent = TotalWalkInLeadSoldCount / TotalWalkInLeadCount;
                        TotalWalkInAvgAdjustedResponseTime = TotalWalkInAdjustedResponseTime / TotalWalkInLeadCount;
                    }

                    if (TotalInternetLeadCount > 0)
                    {
                        TotalInternetLeadSoldPercent = TotalInternetLeadSoldCount / TotalInternetLeadCount;
                        TotalInternetAvgAdjustedResponseTime = TotalInternetAdjustedResponseTime / TotalInternetLeadCount;
                    }

                    if (TotalInternetNewLeadCount > 0)
                    {
                        TotalInternetNewLeadSoldPercent = TotalInternetNewLeadSoldCount / TotalInternetNewLeadCount;
                    }

                    if (TotalInternetUsedLeadCount > 0)
                    {
                        TotalInternetUsedLeadSoldPercent = TotalInternetUsedLeadSoldCount / TotalInternetUsedLeadCount; ;
                    }

                    if (TotalInternetHandyLeadCount > 0)
                    {
                        TotalInternetHandyLeadSoldPercent = TotalInternetHandyLeadSoldCount / TotalInternetHandyLeadCount; ;
                    }

                    if (TotalInternetOtherLeadCount > 0)
                    {
                        TotalInternetOtherLeadSoldPercent = TotalInternetOtherLeadSoldCount / TotalInternetOtherLeadCount; ;
                    }
                }

            </tbody>
            <tfoot>
                <tr style="background-color:#d9edf7;">
                    <th class="text-center divider-column breakdown-column">Totals</th>

                    <th class="text-center">@CompanyTotalLeadCount</th>
                    <th class="text-center">@CompanyTotalLeadSoldCount</th>
                    <th class="text-center divider-column">@CompanyTotalLeadSoldPercent.ToString("P", nfi)</th>

                    <th class="text-center">@CompanyWalkInLeadCount</th>
                    <th class="text-center">@CompanyWalkInLeadSoldCount</th>
                    <th class="text-center divider-column">@CompanyWalkInLeadSoldPercent.ToString("P", nfi)</th>

                    <th class="text-center">@CompanyInternetLeadCount</th>
                    <th class="text-center">@CompanyInternetEngagementPercent.ToString("P", nfi)</th>
                    <th class="text-center">@CompanyInternetAvgAdjustedResponseTime.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyInternetLeadSoldCount</th>
                    <th class="text-center divider-column">@CompanyInternetLeadSoldPercent.ToString("P", nfi)</th>

                    <th class="text-center">@CompanyPhoneLeadCount</th>
                    <th class="text-center">@CompanyPhoneLeadSoldCount</th>
                    <th class="text-center divider-column">@CompanyPhoneLeadSoldPercent.ToString("P", nfi)</th>

                    <th class="text-center">@CompanyOtherLeadCount</th>
                    <th class="text-center">@CompanyOtherLeadSoldCount</th>
                    <th class="text-center divider-column">@CompanyOtherLeadSoldCount</th>
                </tr>
            </tfoot>
        </table>

    </div>*@
           
         
    <script>
        // @@preserve jQuery.floatThead 1.2.9 - http://mkoryak.github.io/floatThead/ - Copyright (c) 2012 - 2014 Misha Koryak
        // @@license MIT
        !function (a) { function b(a, b, c) { if (8 == g) { var d = j.width(), e = f.debounce(function () { var a = j.width(); d != a && (d = a, c()) }, a); j.on(b, e) } else j.on(b, f.debounce(c, a)) } function c(a) { window.console && window.console && window.console.log && window.console.log(a) } function d() { var b = a('<div style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%"></div>'); a("body").append(b); var c = b.innerWidth(), d = a("div", b).innerWidth(); return b.remove(), c - d } function e(a) { if (a.dataTableSettings) for (var b = 0; b < a.dataTableSettings.length; b++) { var c = a.dataTableSettings[b].nTable; if (a[0] == c) return !0 } return !1 } a.floatThead = a.floatThead || {}, a.floatThead.defaults = { cellTag: null, headerCellSelector: "tr:first>th:visible", zIndex: 1001, debounceResizeMs: 10, useAbsolutePositioning: !0, scrollingTop: 0, scrollingBottom: 0, scrollContainer: function () { return a([]) }, getSizingRow: function (a) { return a.find("tbody tr:visible:first>*") }, floatTableClass: "floatThead-table", floatWrapperClass: "floatThead-wrapper", floatContainerClass: "floatThead-container", copyTableClass: !0, debug: !1 }; var f = window._, g = function () { for (var a = 3, b = document.createElement("b"), c = b.all || []; a = 1 + a, b.innerHTML = "<!--[if gt IE " + a + "]><i><![endif]-->", c[0];); return a > 4 ? a : document.documentMode }(), h = null, i = function () { if (g) return !1; var b = a("<table><colgroup><col></colgroup><tbody><tr><td style='width:10px'></td></tbody></table>"); a("body").append(b); var c = b.find("col").width(); return b.remove(), 0 == c }, j = a(window), k = 0; a.fn.floatThead = function (l) { if (l = l || {}, !f && (f = window._ || a.floatThead._, !f)) throw new Error("jquery.floatThead-slim.js requires underscore. You should use the non-lite version since you do not have underscore."); if (8 > g) return this; if (null == h && (h = i(), h && (document.createElement("fthtr"), document.createElement("fthtd"), document.createElement("fthfoot"))), f.isString(l)) { var m = l, n = this; return this.filter("table").each(function () { var b = a(this).data("floatThead-attached"); if (b && f.isFunction(b[m])) { var c = b[m](); "undefined" != typeof c && (n = c) } }), n } var o = a.extend({}, a.floatThead.defaults || {}, l); return a.each(l, function (b) { b in a.floatThead.defaults || !o.debug || c("jQuery.floatThead: used [" + b + "] key to init plugin, but that param is not an option for the plugin. Valid options are: " + f.keys(a.floatThead.defaults).join(", ")) }), this.filter(":not(." + o.floatTableClass + ")").each(function () { function c(a) { return a + ".fth-" + y + ".floatTHead" } function i() { var b = 0; A.find("tr:visible").each(function () { b += a(this).outerHeight(!0) }), Z.outerHeight(b), $.outerHeight(b) } function l() { var a = z.outerWidth(), b = I.width() || a; if (X.width(b - F.vertical), O) { var c = 100 * a / (b - F.vertical); S.css("width", c + "%") } else S.outerWidth(a) } function m() { C = (f.isFunction(o.scrollingTop) ? o.scrollingTop(z) : o.scrollingTop) || 0, D = (f.isFunction(o.scrollingBottom) ? o.scrollingBottom(z) : o.scrollingBottom) || 0 } function n() { var b, c; if (V) b = U.find("col").length; else { var d; d = null == o.cellTag && o.headerCellSelector ? o.headerCellSelector : "tr:first>" + o.cellTag, c = A.find(d), b = 0, c.each(function () { b += parseInt(a(this).attr("colspan") || 1, 10) }) } if (b != H) { H = b; for (var e = [], f = [], g = [], i = 0; b > i; i++) e.push('<th class="floatThead-col"/>'), f.push("<col/>"), g.push("<fthtd style='display:table-cell;height:0;width:auto;'/>"); f = f.join(""), e = e.join(""), h && (g = g.join(""), W.html(g), bb = W.find("fthtd")), Z.html(e), $ = Z.find("th"), V || U.html(f), _ = U.find("col"), T.html(f), ab = T.find("col") } return b } function p() { if (!E) { if (E = !0, J) { var a = z.width(), b = Q.width(); a > b && z.css("minWidth", a) } z.css(db), S.css(db), S.append(A), B.before(Y), i() } } function q() { E && (E = !1, J && z.width(fb), Y.detach(), z.prepend(A), z.css(eb), S.css(eb)) } function r(a) { J != a && (J = a, X.css({ position: J ? "absolute" : "fixed" })) } function s(a, b, c, d) { return h ? c : d ? o.getSizingRow(a, b, c) : b } function t() { var a, b = n(); return function () { var c = s(z, _, bb, g); if (c.length == b && b > 0) { if (!V) for (a = 0; b > a; a++) _.eq(a).css("width", ""); q(); var d = []; for (a = 0; b > a; a++) d[a] = c.get(a).offsetWidth; for (a = 0; b > a; a++) ab.eq(a).width(d[a]), _.eq(a).width(d[a]); p() } else S.append(A), z.css(eb), S.css(eb), i() } } function u(a) { var b = I.css("border-" + a + "-width"), c = 0; return b && ~b.indexOf("px") && (c = parseInt(b, 10)), c } function v() { var a, b = I.scrollTop(), c = 0, d = L ? K.outerHeight(!0) : 0, e = M ? d : -d, f = X.height(), g = z.offset(), i = 0; if (O) { var k = I.offset(); c = g.top - k.top + b, L && M && (c += d), c -= u("top"), i = u("left") } else a = g.top - C - f + D + F.horizontal; var l = j.scrollTop(), m = j.scrollLeft(), n = I.scrollLeft(); return b = I.scrollTop(), function (k) { if ("windowScroll" == k ? (l = j.scrollTop(), m = j.scrollLeft()) : "containerScroll" == k ? (b = I.scrollTop(), n = I.scrollLeft()) : "init" != k && (l = j.scrollTop(), m = j.scrollLeft(), b = I.scrollTop(), n = I.scrollLeft()), !h || !(0 > l || 0 > m)) { if (R) r("windowScrollDone" == k ? !0 : !1); else if ("windowScrollDone" == k) return null; g = z.offset(), L && M && (g.top += d); var o, s, t = z.outerHeight(); if (O && J) { if (c >= b) { var u = c - b; o = u > 0 ? u : 0 } else o = P ? 0 : b; s = i } else !O && J ? (l > a + t + e ? o = t - f + e : g.top > l + C ? (o = 0, q()) : (o = C + l - g.top + c + (M ? d : 0), p()), s = 0) : O && !J ? (c > b || b - c > t ? (o = g.top - l, q()) : (o = g.top + b - l - c, p()), s = g.left + n - m) : O || J || (l > a + t + e ? o = t + C - l + a + e : g.top > l + C ? (o = g.top - l, p()) : o = C, s = g.left - m); return { top: o, left: s } } } } function w() { var a = null, b = null, c = null; return function (d, e, f) { null == d || a == d.top && b == d.left || (X.css({ top: d.top, left: d.left }), a = d.top, b = d.left), e && l(), f && i(); var g = I.scrollLeft(); J && c == g || (X.scrollLeft(g), c = g) } } function x() { if (I.length) { var a = I.width(), b = I.height(), c = z.height(), d = z.width(), e = d > a ? G : 0, f = c > b ? G : 0; F.horizontal = d > a - f ? G : 0, F.vertical = c > b - e ? G : 0 } } var y = k, z = a(this); if (z.data("floatThead-attached")) return !0; if (!z.is("table")) throw new Error('jQuery.floatThead must be run on a table element. ex: $("table").floatThead();'); var A = z.find("thead:first"), B = z.find("tbody:first"); if (0 == A.length) throw new Error("jQuery.floatThead must be run on a table that contains a <thead> element"); var C, D, E = !1, F = { vertical: 0, horizontal: 0 }, G = d(), H = 0, I = o.scrollContainer(z) || a([]), J = o.useAbsolutePositioning; null == J && (J = o.scrollContainer(z).length); var K = z.find("caption"), L = 1 == K.length; if (L) var M = "top" === (K.css("caption-side") || K.attr("align") || "top"); var N = a('<fthfoot style="display:table-footer-group;"/>'), O = I.length > 0, P = !1, Q = a([]), R = 9 >= g && !O && J, S = a("<table/>"), T = a("<colgroup/>"), U = z.find("colgroup:first"), V = !0; 0 == U.length && (U = a("<colgroup/>"), V = !1); var W = a('<fthrow style="display:table-row;height:0;"/>'), X = a('<div style="overflow: hidden;"></div>'), Y = a("<thead/>"), Z = a('<tr class="size-row"/>'), $ = a([]), _ = a([]), ab = a([]), bb = a([]); if (Y.append(Z), z.prepend(U), h && (N.append(W), z.append(N)), S.append(T), X.append(S), o.copyTableClass && S.attr("class", z.attr("class")), S.attr({ cellpadding: z.attr("cellpadding"), cellspacing: z.attr("cellspacing"), border: z.attr("border") }), S.css({ borderCollapse: z.css("borderCollapse"), border: z.css("border") }), S.addClass(o.floatTableClass).css("margin", 0), J) { var cb = function (a, b) { var c = a.css("position"), d = "relative" == c || "absolute" == c; if (!d || b) { var e = { paddingLeft: a.css("paddingLeft"), paddingRight: a.css("paddingRight") }; X.css(e), a = a.wrap("<div class='" + o.floatWrapperClass + "' style='position: relative; clear:both;'></div>").parent(), P = !0 } return a }; O ? (Q = cb(I, !0), Q.append(X)) : (Q = cb(z), z.after(X)) } else z.after(X); X.css({ position: J ? "absolute" : "fixed", marginTop: 0, top: J ? 0 : "auto", zIndex: o.zIndex }), X.addClass(o.floatContainerClass), m(); var db = { "table-layout": "fixed" }, eb = { "table-layout": z.css("tableLayout") || "auto" }, fb = z[0].style.width || ""; x(); var gb, hb = function () { (gb = t())() }; hb(); var ib = v(), jb = w(); jb(ib("init"), !0); var kb = f.debounce(function () { jb(ib("windowScrollDone"), !1) }, 300), lb = function () { jb(ib("windowScroll"), !1), kb() }, mb = function () { jb(ib("containerScroll"), !1) }, nb = function () { m(), x(), hb(), ib = v(), (jb = w())(ib("resize"), !0, !0) }, ob = f.debounce(function () { x(), m(), hb(), ib = v(), jb(ib("reflow"), !0) }, 1); O ? J ? I.on(c("scroll"), mb) : (I.on(c("scroll"), mb), j.on(c("scroll"), lb)) : j.on(c("scroll"), lb), j.on(c("load"), ob), b(o.debounceResizeMs, c("resize"), nb), z.on("reflow", ob), e(z) && z.on("filter", ob).on("sort", ob).on("page", ob), z.data("floatThead-attached", { destroy: function () { var a = ".fth-" + y; q(), z.css(eb), U.remove(), h && N.remove(), Y.parent().length && Y.replaceWith(A), z.off("reflow"), I.off(a), P && (I.length ? I.unwrap() : z.unwrap()), J && z.css("minWidth", ""), X.remove(), z.data("floatThead-attached", !1), j.off(a) }, reflow: function () { ob() }, setHeaderHeight: function () { i() }, getFloatContainer: function () { return X }, getRowGroups: function () { return E ? X.find("thead").add(z.find("tbody,tfoot")) : z.find("thead,tbody,tfoot") } }), k++ }), this } }(jQuery), function (a) { a.floatThead = a.floatThead || {}, a.floatThead._ = window._ || function () { var b = {}, c = Object.prototype.hasOwnProperty, d = ["Arguments", "Function", "String", "Number", "Date", "RegExp"]; return b.has = function (a, b) { return c.call(a, b) }, b.keys = function (a) { if (a !== Object(a)) throw new TypeError("Invalid object"); var c = []; for (var d in a) b.has(a, d) && c.push(d); return c }, a.each(d, function () { var a = this; b["is" + a] = function (b) { return Object.prototype.toString.call(b) == "[object " + a + "]" } }), b.debounce = function (a, b, c) { var d, e, f, g, h; return function () { f = this, e = arguments, g = new Date; var i = function () { var j = new Date - g; b > j ? d = setTimeout(i, b - j) : (d = null, c || (h = a.apply(f, e))) }, j = c && !d; return d || (d = setTimeout(i, b)), j && (h = a.apply(f, e)), h } }, b }() }(jQuery);



        $(document).ready(function () {

            $(".sticky-header").floatThead({ scrollingTop: 70 });

        });
    </script>
