@model SalesCommission.Models.SalesReportModel

@{ 
    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.PercentPositivePattern = 1;
    nfi.CurrencySymbol = "";
    
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

    var filters = "";

    if(Model.ExcludeBadDuplicates)
    {
        filters = filters + "t,";
    }
    else
    {
        filters = filters + "f,";
    }

    if(Model.ShowExcludedGroups)
    {
        filters = filters + "t,";
    }
    else
    {
        filters = filters + "f,";
    }

    if(Model.ExcludeAllBad)
    {
        filters = filters + "t";
    }
    else
    {
        filters = filters + "f";
    }

}

<style type="text/css">
    .indent-2{        
        padding-left:10px;
    }
    .indent-3{
        padding-left:20px;
    }
    .indent-4{
        padding-left:30px;
    }
    table.floatThead-table {
        font-size:12px;
    }

    .indent-td2{
        display: block;
        margin-left: 10px;
        margin-right: -2px;
    }
    .indent-td3{
        display: block;
        margin-left: 20px;
        margin-right: -2px;
    }
    .indent-td4{
        display: block;
        margin-left: 30px;
        margin-right: -2px;
    }
    .breakdown-column{
        width:250px;
    }
</style>

<div class="col-sm-12" id="location-associate">
    <h4>Sales Report Results for @Model.ReportStartMonth/@Model.ReportStartYear to @Model.ReportEndMonth/@Model.ReportEndYear for @Model.VehicleType Vehicles</h4>

    <table class="table table-bordered" style="font-size:12px">
            <thead>

                <tr style="background-color:#d9edf7;">
                    <th class="text-center">Company Totals</th>
                    <th class="text-center">Deals</th>
                    <th class="text-center">Leases</th>
                    <th class="text-center">Lease %</th>
                    <th class="text-center">CPO</th>
                    <th class="text-center">CPO %</th>
                    <th class="text-center">Handyman</th>
                    <th class="text-center">HDM %</th>
                    <th class="text-center">NextCar</th>
                    <th class="text-center">NC %</th>
                    <th class="text-center">Front Gross</th>
                    <th class="text-center">ME FTD</th>
                    <th class="text-center">Fin Inc</th>
                    <th class="text-center">VSC</th>
                    <th class="text-center">MC</th>
                    <th class="text-center">GAP</th>
                    <th class="text-center">BPP/AFT</th>
                    <th class="text-center">Total</th>
                    <th class="text-center">Memo: FTD</th>
                    <th class="text-center">DX Inc</th>
                    <th class="text-center">Front PVR</th>
                    <th class="text-center">Back PVR</th>
                    <th class="text-center">Total PVR</th>
                </tr>



            </thead>
            <tbody>
    @{

        var currentSelectedDate = new DateTime(Model.ReportEndYear, Model.ReportEndMonth, 1);
        var grossChangeDate = new DateTime(2020, 1, 31);

        double CompanyTotalLeaseCount = 0;
        double CompanyTotalPotentialLease = 0;
        double CompanyTotalHandymanCount = 0;
        double CompanyTotalPotentialHandyman = 0;
        double CompanyTotalCPOCount = 0;
        double CompanyTotalPotentialCPO = 0;
        double CompanyTotalDealCount = 0;
        double CompanyTotalValidatedDealsCount = 0;
        double CompanyTotalUnValidatedCount = 0;
        double CompanyTotalOfficeValidatedCount = 0;
        double CompanyTotalDealGrossAmount = 0;
        double CompanyTotalMEFTDAmount = 0;
        double CompanyTotalFinIncAmount = 0;
        double CompanyTotalVSCAmount = 0;
        double CompanyTotalMCAmount = 0;
        double CompanyTotalGapAmount = 0;
        double CompanyTotalAmount = 0;
        double CompanyTotalFTDAmount = 0;
        double CompanyTotalDXAmount = 0;

        double CompanyNewTotalLeaseCount = 0;
        double CompanyNewTotalPotentialLease = 0;
        double CompanyNewTotalHandymanCount = 0;
        double CompanyNewTotalPotentialHandyman = 0;
        double CompanyNewTotalCPOCount = 0;
        double CompanyNewTotalPotentialCPO = 0;
        double CompanyNewTotalDealCount = 0;
        double CompanyNewTotalValidatedDealsCount = 0;
        double CompanyNewTotalUnValidatedCount = 0;
        double CompanyNewTotalOfficeValidatedCount = 0;
        double CompanyNewTotalDealGrossAmount = 0;
        double CompanyNewTotalMEFTDAmount = 0;
        double CompanyNewTotalFinIncAmount = 0;
        double CompanyNewTotalVSCAmount = 0;
        double CompanyNewTotalMCAmount = 0;
        double CompanyNewTotalGapAmount = 0;
        double CompanyNewTotalAmount = 0;
        double CompanyNewTotalFTDAmount = 0;
        double CompanyNewTotalDXAmount = 0;

        double CompanyUsedTotalLeaseCount = 0;
        double CompanyUsedTotalPotentialLease = 0;
        double CompanyUsedTotalHandymanCount = 0;
        double CompanyUsedTotalPotentialHandyman = 0;
        double CompanyUsedTotalCPOCount = 0;
        double CompanyUsedTotalPotentialCPO = 0;
        double CompanyUsedTotalDealCount = 0;
        double CompanyUsedTotalValidatedDealsCount = 0;
        double CompanyUsedTotalUnValidatedCount = 0;
        double CompanyUsedTotalOfficeValidatedCount = 0;
        double CompanyUsedTotalDealGrossAmount = 0;
        double CompanyUsedTotalMEFTDAmount = 0;
        double CompanyUsedTotalFinIncAmount = 0;
        double CompanyUsedTotalVSCAmount = 0;
        double CompanyUsedTotalMCAmount = 0;
        double CompanyUsedTotalGapAmount = 0;
        double CompanyUsedTotalAmount = 0;
        double CompanyUsedTotalFTDAmount = 0;
        double CompanyUsedTotalDXAmount = 0;

        double CompanyUsedTotalNextCarCount = 0;

        double CompanyUsedTotalBackGrossAmount = 0;
        double CompanyNewTotalBackGrossAmount = 0;
        double CompanyTotalBackGrossAmount = 0;

        var TotalMakeIds = "";
        var UsedMakeIds = "";
        var NewMakeIds = "";



        foreach (var detail in Model.SalesReportDetails)
        {
            double MonthEndFTDAmount = 0;
            var brandCode = detail.BrandId;
            var locationCode = "";

            foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
            {
                if (mapping.StoreId.ToLower() == detail.AutoMall.ToLower())
                {
                    locationCode = mapping.LocationId;
                    break;
                }
            }

            var usedId = 0;
            var usedBrand = "";
            if (detail.AutoMall.ToUpper() == "CLEARWATER")
            {
                switch (detail.MakeId)
                {
                    case "41":  //Chrysler
                        usedId = 94; //96
                        break;
                    case "43": //Hyundai
                        usedId = 70;
                        break;
                    case "42": //Jeep
                        usedId = 94;
                        break;
                    case "44": //Subaru
                        usedId = 95;
                        break;
                    case "70": //Hyundai
                        usedBrand = "HY";
                        break;
                    case "94": //Jeep
                        usedBrand = "JE,CH";
                        break;
                    case "95": //Subaru
                        usedBrand = "SU";
                        break;
                }

            }


            if (brandCode == "UU" && locationCode == "CJE")
            {
                brandCode = detail.MakeName;
            }
            else if (brandCode == "UU")
            {
                brandCode = "Used";
            }
            if (Model.FactoryToDealerCash != null)
            {
                var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                if (factoryToDealerCash == null)
                {
                    factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                    MonthEndFTDAmount = 0;
                }
                else
                {
                    MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                    //detail.FTDAmount = detail.FTDAmount + (double) factoryToDealerCash.FTDAmount;
                    detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                }
            }


            if (brandCode == "Used")
            {

                var usedFTDCash = Model.FactoryToDealerCash.FindAll(o => o.StoreId == locationCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                foreach (var ftd in usedFTDCash)
                {
                    MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                }
                detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
            }
            else if (detail.BrandId == "UU" && locationCode == "CJE")
            {

                var brands = usedBrand.Split(',');

                foreach (var brand in brands)
                {
                    var ftd = Model.FactoryToDealerCash.Find(o => o.BrandId == brand && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);
                    if (ftd != null)
                    {
                        MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                        detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }
                }
            }



            var validatedDeals = detail.DealCount - detail.UnValidatedCount;



            if (brandCode.Contains("Used"))
            {

                CompanyUsedTotalPotentialHandyman += validatedDeals;
                CompanyUsedTotalPotentialCPO += validatedDeals;
            }
            else
            {
                CompanyNewTotalPotentialLease += validatedDeals;
            }




            if (detail.BrandId == "UU")
            {
                /* THESE ARE NOT DONE YET */
                CompanyUsedTotalLeaseCount += detail.LeaseCount;
                CompanyUsedTotalHandymanCount += detail.HandymanCount;
                CompanyUsedTotalNextCarCount += detail.NextCarCount;
                //CompanyUsedTotalPotentialHandyman += 0;

                if (detail.MakeId == "87")
                {
                    CompanyNewTotalCPOCount += detail.CPOCount;
                }

                //CompanyUsedTotalPotentialCPO += 0;

                CompanyUsedTotalDealCount += detail.DealCount;

                CompanyUsedTotalValidatedDealsCount += validatedDeals;
                CompanyUsedTotalUnValidatedCount += detail.UnValidatedCount;
                CompanyUsedTotalOfficeValidatedCount += detail.OfficeValidatedCount;

                CompanyUsedTotalDealGrossAmount += detail.DealGrossAmount;
                CompanyUsedTotalMEFTDAmount += MonthEndFTDAmount;
                CompanyUsedTotalFinIncAmount += detail.FinIncAmount;
                CompanyUsedTotalVSCAmount += detail.VSCAmount;
                CompanyUsedTotalMCAmount += detail.MCAmount;
                CompanyUsedTotalGapAmount += detail.GapAmount;
                CompanyUsedTotalAmount += detail.TotalAmount;
                CompanyUsedTotalFTDAmount += detail.FTDAmount;
                CompanyUsedTotalDXAmount += detail.DXAmount;
                CompanyUsedTotalBackGrossAmount += detail.BackGrossItemAmount;

            }
            else
            {
                /* THESE ARE NOT DONE YET */
                CompanyNewTotalLeaseCount += detail.LeaseCount;
                CompanyNewTotalHandymanCount += detail.HandymanCount;
                //CompanyNewTotalPotentialHandyman += 0;
                CompanyNewTotalCPOCount += detail.CPOCount;
                //CompanyNewTotalPotentialCPO += 0;



                if (detail.BrandId != "AA")
                {
                    CompanyNewTotalDealCount += detail.DealCount;
                    CompanyNewTotalValidatedDealsCount += validatedDeals;
                    CompanyNewTotalUnValidatedCount += detail.UnValidatedCount;
                    CompanyNewTotalOfficeValidatedCount += detail.OfficeValidatedCount;
                }

                CompanyNewTotalDealGrossAmount += detail.DealGrossAmount;
                CompanyNewTotalMEFTDAmount += MonthEndFTDAmount;
                CompanyNewTotalFinIncAmount += detail.FinIncAmount;
                CompanyNewTotalVSCAmount += detail.VSCAmount;
                CompanyNewTotalMCAmount += detail.MCAmount;
                CompanyNewTotalGapAmount += detail.GapAmount;
                CompanyNewTotalAmount += detail.TotalAmount;
                CompanyNewTotalFTDAmount += detail.FTDAmount;
                CompanyNewTotalDXAmount += detail.DXAmount;
                CompanyNewTotalBackGrossAmount += detail.BackGrossItemAmount;
            }

        }

        CompanyTotalLeaseCount = CompanyNewTotalLeaseCount + CompanyUsedTotalLeaseCount;
        CompanyTotalHandymanCount = CompanyNewTotalHandymanCount + CompanyUsedTotalHandymanCount;
        //CompanyTotalNextCarCount += detail.NextCarCount;
        CompanyTotalCPOCount = CompanyNewTotalCPOCount + CompanyUsedTotalCPOCount;


        CompanyTotalDealCount = CompanyNewTotalDealCount + CompanyUsedTotalDealCount;

        CompanyTotalValidatedDealsCount = CompanyNewTotalValidatedDealsCount + CompanyUsedTotalValidatedDealsCount;
        CompanyTotalUnValidatedCount = CompanyNewTotalUnValidatedCount + CompanyUsedTotalUnValidatedCount;
        CompanyTotalOfficeValidatedCount = CompanyNewTotalOfficeValidatedCount + CompanyUsedTotalOfficeValidatedCount;


        CompanyTotalDealGrossAmount = CompanyNewTotalDealGrossAmount + CompanyUsedTotalDealGrossAmount;
        CompanyTotalMEFTDAmount += CompanyNewTotalMEFTDAmount + CompanyUsedTotalMEFTDAmount;
        CompanyTotalFinIncAmount = CompanyNewTotalFinIncAmount + CompanyUsedTotalFinIncAmount;
        CompanyTotalVSCAmount = CompanyNewTotalVSCAmount + CompanyUsedTotalVSCAmount;
        CompanyTotalMCAmount = CompanyNewTotalMCAmount + CompanyUsedTotalMCAmount;
        CompanyTotalGapAmount = CompanyNewTotalGapAmount + CompanyUsedTotalGapAmount;
        CompanyTotalAmount = CompanyNewTotalAmount + CompanyUsedTotalAmount;
        CompanyTotalFTDAmount = CompanyNewTotalFTDAmount + CompanyUsedTotalFTDAmount;
        CompanyTotalDXAmount = CompanyNewTotalDXAmount + CompanyUsedTotalDXAmount;
        CompanyTotalBackGrossAmount = CompanyNewTotalBackGrossAmount + CompanyUsedTotalBackGrossAmount;

        CompanyTotalPotentialCPO = CompanyUsedTotalPotentialCPO + CompanyNewTotalPotentialCPO;
        CompanyTotalPotentialLease = CompanyUsedTotalPotentialLease + CompanyNewTotalPotentialLease;
        CompanyTotalPotentialHandyman = CompanyUsedTotalPotentialHandyman + CompanyNewTotalPotentialHandyman;
    }


                <tr>
                    @{
                        var CompanyNewTotalLeasePercent = (CompanyNewTotalLeaseCount / CompanyNewTotalPotentialLease).ToString("P", nfi);
                        var CompanyNewTotalHandyPercent = (CompanyNewTotalHandymanCount / CompanyNewTotalPotentialHandyman).ToString("P", nfi);
                        var CompanyNewTotalCPOPercent = (CompanyNewTotalCPOCount / CompanyNewTotalPotentialCPO).ToString("P", nfi);

                        var companyNewTotalBackGrossAmount = CompanyNewTotalFinIncAmount + CompanyNewTotalVSCAmount + CompanyNewTotalGapAmount + CompanyNewTotalMCAmount;

                        if (currentSelectedDate > grossChangeDate)
                        {
                            companyNewTotalBackGrossAmount += CompanyNewTotalBackGrossAmount;
                        }

                        var CompanyNewTotalFrontPVRAmount = Math.Round((CompanyNewTotalDealGrossAmount + CompanyNewTotalMEFTDAmount) / CompanyNewTotalValidatedDealsCount); //+ CompanyTotalOtherAmount+ CompanyTotalFTDAmount
                        var CompanyNewTotalBackPVRAmount = Math.Round((companyNewTotalBackGrossAmount) / CompanyNewTotalValidatedDealsCount);
                        var CompanyNewTotalPVRAmount = Math.Round((CompanyNewTotalDealGrossAmount + CompanyNewTotalMEFTDAmount + companyNewTotalBackGrossAmount) / CompanyNewTotalValidatedDealsCount); //+ CompanyTotalOtherAmount + CompanyTotalFTDAmount

                    }
                    <td class="text-center">New Totals</td>
                    <td class="text-center">@CompanyNewTotalDealCount</td>
                    <td class="text-center">@CompanyNewTotalLeaseCount</td>
                    <td class="text-center">@CompanyNewTotalLeasePercent</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">@CompanyNewTotalDealGrossAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalMEFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalFinIncAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalVSCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalMCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalGapAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalBackGrossAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalDXAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalFrontPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalBackPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyNewTotalPVRAmount.ToString("C", nfi)</td>
                </tr>
                <tr >
                    @{
                        var CompanyUsedTotalLeasePercent = (CompanyUsedTotalLeaseCount / CompanyUsedTotalPotentialLease).ToString("P", nfi);
                        var CompanyUsedTotalHandyPercent = (CompanyUsedTotalHandymanCount / CompanyUsedTotalPotentialHandyman).ToString("P", nfi);
                        var CompanyUsedTotalCPOPercent = (CompanyNewTotalCPOCount / CompanyUsedTotalPotentialCPO).ToString("P", nfi);
                        var CompanyUsedTotalNextCarPercent = (CompanyUsedTotalNextCarCount / CompanyUsedTotalPotentialHandyman).ToString("P", nfi);

                        var companyUsedTotalBackGrossAmount = CompanyUsedTotalFinIncAmount + CompanyUsedTotalVSCAmount + CompanyUsedTotalGapAmount + CompanyUsedTotalMCAmount;
                        if (currentSelectedDate > grossChangeDate)
                        {
                            companyUsedTotalBackGrossAmount += CompanyUsedTotalBackGrossAmount;
                        }

                        var CompanyUsedTotalFrontPVRAmount = Math.Round((CompanyUsedTotalDealGrossAmount + CompanyUsedTotalMEFTDAmount) / CompanyUsedTotalValidatedDealsCount); //+ CompanyTotalOtherAmount+ CompanyTotalFTDAmount
                        var CompanyUsedTotalBackPVRAmount = Math.Round((companyUsedTotalBackGrossAmount) / CompanyUsedTotalValidatedDealsCount);
                        var CompanyUsedTotalPVRAmount = Math.Round((CompanyUsedTotalDealGrossAmount + CompanyUsedTotalMEFTDAmount + companyUsedTotalBackGrossAmount) / CompanyUsedTotalValidatedDealsCount); //+ CompanyTotalOtherAmount + CompanyTotalFTDAmount

                    }
                    <td class="text-center">Used Totals</td>
                    <td class="text-center">@CompanyUsedTotalDealCount</td>
                    <td class="text-center">-</td>
                    <td class="text-center">-</td>
                    <td class="text-center">@CompanyNewTotalCPOCount</td>
                    <td class="text-center">@CompanyUsedTotalCPOPercent</td>
                    <td class="text-center">@CompanyUsedTotalHandymanCount</td>
                    <td class="text-center">@CompanyUsedTotalHandyPercent</td>
                    <td class="text-center">@CompanyUsedTotalNextCarCount</td>
                    <td class="text-center">@CompanyUsedTotalNextCarPercent</td>
                    <td class="text-center">@CompanyUsedTotalDealGrossAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalMEFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalFinIncAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalVSCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalMCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalGapAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalBackGrossAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalDXAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalFrontPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalBackPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@CompanyUsedTotalPVRAmount.ToString("C", nfi)</td>
                </tr>
                

            </tbody>
            <tfoot>
                <tr style="background-color:#d9edf7;">
                    @{
                        var CompanyTotalLeasePercent = (CompanyTotalLeaseCount / CompanyTotalPotentialLease).ToString("P", nfi);
                        var CompanyTotalHandyPercent = (CompanyTotalHandymanCount / CompanyTotalPotentialHandyman).ToString("P", nfi);
                        var CompanyTotalCPOPercent = (CompanyTotalCPOCount / CompanyUsedTotalPotentialCPO).ToString("P", nfi);

                        var companyTotalBackGrossAmount = CompanyTotalFinIncAmount + CompanyTotalVSCAmount + CompanyTotalGapAmount + CompanyTotalMCAmount;

                        if (currentSelectedDate > grossChangeDate)
                        {
                            companyTotalBackGrossAmount += CompanyTotalBackGrossAmount;
                        }

                        var CompanyTotalFrontPVRAmount = Math.Round((CompanyTotalDealGrossAmount + CompanyTotalMEFTDAmount) / CompanyTotalValidatedDealsCount); //+ CompanyTotalOtherAmount+ CompanyTotalFTDAmount
                        var CompanyTotalBackPVRAmount = Math.Round((companyTotalBackGrossAmount) / CompanyTotalValidatedDealsCount);
                        var CompanyTotalPVRAmount = Math.Round((CompanyTotalDealGrossAmount + CompanyTotalMEFTDAmount + companyTotalBackGrossAmount) / CompanyTotalValidatedDealsCount); //+ CompanyTotalOtherAmount + CompanyTotalFTDAmount

                    }
                    <th class="text-center">Totals</th>
                    <th class="text-center">@CompanyTotalDealCount</th>
                    <th class="text-center">@CompanyTotalLeaseCount</th>
                    <th class="text-center">@CompanyTotalLeasePercent</th>
                    <th class="text-center">@CompanyTotalCPOCount</th>
                    <th class="text-center">@CompanyTotalCPOPercent</th>
                    <th class="text-center">@CompanyTotalHandymanCount</th>
                    <th class="text-center">@CompanyTotalHandyPercent</th>
                    <th class="text-center">@CompanyUsedTotalNextCarCount</th>
                    <th class="text-center">@CompanyUsedTotalNextCarPercent</th>
                    <th class="text-center">@CompanyTotalDealGrossAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalMEFTDAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalFinIncAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalVSCAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalMCAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalGapAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalBackGrossAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalFTDAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalDXAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalFrontPVRAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalBackPVRAmount.ToString("C", nfi)</th>
                    <th class="text-center">@CompanyTotalPVRAmount.ToString("C", nfi)</th>
                </tr>

            </tfoot>
        </table>
    <table class="table table-bordered sticky-header" style="font-size:12px; border-left: none;">
        <thead>
            <tr style="background-color:#d9edf7;">
                <th class="text-center">Breakdown</th>
                <th class="text-center">Deals</th>
                <th class="text-center">Leases</th>
                <th class="text-center">Lease %</th>
                <th class="text-center">CPO</th>
                <th class="text-center">CPO %</th>
                <th class="text-center">Handyman</th>
                <th class="text-center">HDM %</th>
                <th class="text-center">NextCar</th>
                <th class="text-center">NC %</th>
                <th class="text-center">Front Gross</th>
                <th class="text-center">ME FTD</th>
                <th class="text-center">Fin Inc</th>
                <th class="text-center">VSC</th>
                <th class="text-center">MC</th>
                <th class="text-center">GAP</th>
                <th class="text-center">BPP/AFT</th>
                <th class="text-center">Total</th>
                <th class="text-center">Memo: FTD</th>
                <th class="text-center">DX Inc</th>
                <th class="text-center">Front PVR</th>
                <th class="text-center">Back PVR</th>
                <th class="text-center">Total PVR</th>
            </tr>

        </thead>
        <tbody>

    @if (Model.SalesReportDetails != null)
    {

        var breakdownLevel1Values = new List<string>();


        switch (Model.BreakDownLevel1)
        {
            case "inventorytype":
                breakdownLevel1Values = Model.SalesReportDetails.Select(x => x.BrandId).Distinct().OrderBy(x => x).ToList();
                break;

            case "location":
                breakdownLevel1Values = Model.SalesReportDetails.Select(x => x.AutoMall).Distinct().OrderBy(x => x).ToList();
                break;

            case "make":
                //breakdownLevel1Values = Model.SalesReportDetails.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                breakdownLevel1Values = Model.SalesReportDetails.Where(x => !x.MakeName.Contains("Used")).Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                breakdownLevel1Values.Add("Used");
                break;

            case "model":
                breakdownLevel1Values = Model.SalesReportDetails.Select(x => x.MakeId).Distinct().OrderBy(x => x).ToList();
                break;

            case "monthyear":
                breakdownLevel1Values = Model.SalesReportDetails.Select(x => x.DealMonth.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                break;

            case "condition":
                breakdownLevel1Values.Add("New");
                breakdownLevel1Values.Add("Used");
                break;

            default:
                // breakdownLevel1Values = Model.AssociateLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                break;
        }

        var breakdown1Index = 0;
        var breakdown2Index = 0;
        var BreakDown3Index = 0;
        var BreakDown4Index = 0;

        foreach (var breakdown1 in breakdownLevel1Values)
        {
            var label1 = breakdown1;

            var BreakDown1filteredLeads = new List<SalesCommission.Models.SalesReportDetail>();

            switch (Model.BreakDownLevel1)
            {
                case "inventorytype":
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.BrandId == breakdown1);
                    break;

                case "location":
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.AutoMall == breakdown1);

                    foreach (var store in SalesCommission.Business.Enums.Stores)
                    {
                        if (store.StoreId.ToLower() == breakdown1.ToLower())
                        {
                            label1 = store.Name;
                        }
                    }

                    break;

                case "make":
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.MakeName.Contains(breakdown1));
                    break;

                case "model":
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.MakeId == breakdown1);
                    break;

                case "monthyear":
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.DealMonth.ToShortDateString() == breakdown1);
                    var dealDate = Convert.ToDateTime(breakdown1);
                    label1 = dealDate.Month + "/" + dealDate.Year;

                    break;

                case "condition":
                    if(breakdown1 == "Used")
                    {
                        BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.BrandId == "UU");
                    }
                    else
                    {
                        BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.BrandId != "UU");
                    }                    
                    break;


                default:
                    BreakDown1filteredLeads = Model.SalesReportDetails.FindAll(x => x.AutoMall == breakdown1);
                    break;
            }


            double BD1TotalLeaseCount = 0;
            double BD1TotalPotentialLease = 0;
            double BD1TotalHandymanCount = 0;
            double BD1TotalPotentialHandyman = 0;
            double BD1TotalCPOCount = 0;
            double BD1TotalPotentialCPO = 0;
            double BD1TotalDealCount = 0;
            double BD1TotalValidatedDealsCount = 0;
            double BD1TotalUnValidatedCount = 0;
            double BD1TotalOfficeValidatedCount = 0;
            double BD1TotalDealGrossAmount = 0;
            double BD1TotalMEFTDAmount = 0;
            double BD1TotalFinIncAmount = 0;
            double BD1TotalVSCAmount = 0;
            double BD1TotalMCAmount = 0;
            double BD1TotalGapAmount = 0;
            double BD1TotalAmount = 0;
            double BD1TotalFTDAmount = 0;
            double BD1TotalDXAmount = 0;
            double BD1TotalNextCarCount = 0;
            double BD1TotalBackGross = 0;

            foreach (var detail in BreakDown1filteredLeads)
            {
                double MonthEndFTDAmount = 0;
                var brandCode = detail.BrandId;
                var locationCode = "";

                foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                {
                    if (mapping.StoreId.ToLower() == detail.AutoMall.ToLower())
                    {
                        locationCode = mapping.LocationId;
                        break;
                    }
                }

                var usedId = 0;
                var usedBrand = "";
                if (detail.AutoMall.ToUpper() == "CLEARWATER")
                {
                    switch (detail.MakeId)
                    {
                        case "41":  //Chrysler
                            usedId = 94; //96
                            break;
                        case "43": //Hyundai
                            usedId = 70;
                            break;
                        case "42": //Jeep
                            usedId = 94;
                            break;
                        case "44": //Subaru
                            usedId = 95;
                            break;
                        case "70": //Hyundai
                            usedBrand = "HY";
                            break;
                        case "94": //Jeep
                            usedBrand = "JE,CH";
                            break;
                        case "95": //Subaru
                            usedBrand = "SU";
                            break;
                    }

                }


                if (brandCode == "UU" && locationCode == "CJE")
                {
                    brandCode = detail.MakeName;
                }
                else if (brandCode == "UU")
                {
                    brandCode = "Used";
                }

                if (Model.FactoryToDealerCash != null)
                {
                    var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                    if (factoryToDealerCash == null)
                    {
                        factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                        MonthEndFTDAmount = 0;
                    }
                    else
                    {
                        MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                        //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }
                }


                if (brandCode == "Used")
                {

                    var usedFTDCash = Model.FactoryToDealerCash.FindAll(o => o.StoreId == locationCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                    foreach (var ftd in usedFTDCash)
                    {
                        MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                    }
                    //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                }
                else if (detail.BrandId == "UU" && locationCode == "CJE")
                {

                    var brands = usedBrand.Split(',');

                    foreach (var brand in brands)
                    {
                        var ftd = Model.FactoryToDealerCash.Find(o => o.BrandId == brand && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);
                        if (ftd != null)
                        {
                            MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                            //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                        }
                    }
                }



                var validatedDeals = detail.DealCount - detail.UnValidatedCount;



                if (brandCode.Contains("Used"))
                {

                    BD1TotalPotentialHandyman += validatedDeals;
                    BD1TotalPotentialCPO += validatedDeals;
                }
                else
                {
                    BD1TotalPotentialLease += validatedDeals;
                }


                if (detail.BrandId != "AA" || (detail.BrandId == "AA" && breakdown1 == "Additional Gross"))
                {
                    BD1TotalDealCount += detail.DealCount;
                    BD1TotalValidatedDealsCount += validatedDeals;
                    BD1TotalUnValidatedCount += detail.UnValidatedCount;
                    BD1TotalOfficeValidatedCount += detail.OfficeValidatedCount;
                }
                BD1TotalLeaseCount += detail.LeaseCount;
                BD1TotalHandymanCount += detail.HandymanCount;
                BD1TotalNextCarCount += detail.NextCarCount;
                //BD1TotalPotentialHandyman += 0;

                if (!brandCode.Contains("Used"))
                {
                    BD1TotalCPOCount += detail.CPOCount;
                }
                else
                {
                    if (detail.MakeId == "87")
                    {
                        BD1TotalCPOCount += detail.CPOCount;
                    }
                }


                //BD1TotalPotentialCPO += 0;




                BD1TotalDealGrossAmount += detail.DealGrossAmount;
                BD1TotalMEFTDAmount += MonthEndFTDAmount;
                BD1TotalFinIncAmount += detail.FinIncAmount;
                BD1TotalVSCAmount += detail.VSCAmount;
                BD1TotalMCAmount += detail.MCAmount;
                BD1TotalGapAmount += detail.GapAmount;
                BD1TotalAmount += detail.TotalAmount;
                BD1TotalFTDAmount += detail.FTDAmount;
                BD1TotalDXAmount += detail.DXAmount;
                BD1TotalBackGross += detail.BackGrossItemAmount;

            }



            var BD1TotalLeasePercent = (BD1TotalLeaseCount / BD1TotalPotentialLease).ToString("P", nfi);
            var BD1TotalHandyPercent = (BD1TotalHandymanCount / BD1TotalPotentialHandyman).ToString("P", nfi);
            var BD1TotalCPOPercent = (BD1TotalCPOCount / CompanyUsedTotalPotentialCPO).ToString("P", nfi);
            var BD1TotalNextCarPercent = (BD1TotalNextCarCount / BD1TotalPotentialHandyman).ToString("P", nfi);

            var BD1TotalBackGrossAmount = BD1TotalFinIncAmount + BD1TotalVSCAmount + BD1TotalGapAmount + BD1TotalMCAmount;

            if (currentSelectedDate > grossChangeDate)
            {
                BD1TotalBackGrossAmount += BD1TotalBackGross;
            }

            var BD1TotalFrontPVRAmount = Math.Round((BD1TotalDealGrossAmount + BD1TotalMEFTDAmount) / BD1TotalValidatedDealsCount); //+ BD1TotalOtherAmount+ BD1TotalFTDAmount
            var BD1TotalBackPVRAmount = Math.Round((BD1TotalBackGrossAmount) / BD1TotalValidatedDealsCount);
            var BD1TotalPVRAmount = Math.Round((BD1TotalDealGrossAmount + BD1TotalMEFTDAmount + BD1TotalBackGrossAmount) / BD1TotalValidatedDealsCount); //+ BD1TotalOtherAmount + BD1TotalFTDAmount

                        <tr class="location-bd1-data-row-@breakdown1Index @label1.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd1-collapse-@breakdown1Index">
                            <td class="breakdown-column"><a data-toggle="collapse" id="location-bd1-collapse-@breakdown1Index" style="cursor: pointer;" class="location-bd1-collapse-@breakdown1Index-href collapsed" data-target=".location-bd1-collapse-@breakdown1Index">@label1 </a></td>
                            <td class="text-center">@BD1TotalDealCount</td>
                            <td class="text-center">@BD1TotalLeaseCount</td>
                            <td class="text-center">@BD1TotalLeasePercent</td>
                            <td class="text-center">@BD1TotalCPOCount</td>
                            <td class="text-center">@BD1TotalCPOPercent</td>
                            <td class="text-center">@BD1TotalHandymanCount</td>
                            <td class="text-center">@BD1TotalHandyPercent</td>
                            <td class="text-center">@BD1TotalNextCarCount</td>
                            <td class="text-center">@BD1TotalNextCarPercent</td>
                            <td class="text-center">@BD1TotalDealGrossAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalMEFTDAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalFinIncAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalVSCAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalMCAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalGapAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalBackGross.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalFTDAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalDXAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalFrontPVRAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalBackPVRAmount.ToString("C", nfi)</td>
                            <td class="text-center">@BD1TotalPVRAmount.ToString("C", nfi)</td>
                        </tr>

                            <script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd1-collapse-@breakdown1Index-href").click(function () {
                                        $('.location-bd1-data-row-@breakdown1Index').toggleClass('selected-row');
                                        $(".location-bd1-collapse-@breakdown1Index-href").toggleClass('changed');
                                    });
                                });
                            </script>

            var breakdownLevel2Values = new List<string>();

            switch (Model.BreakDownLevel2)
            {
                case "inventorytype":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.BrandId).Distinct().OrderBy(x => x).ToList();
                    break;

                case "location":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.AutoMall).Distinct().OrderBy(x => x).ToList();
                    break;

                case "make":
                    //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                    breakdownLevel2Values = BreakDown1filteredLeads.Where(x => !x.MakeName.Contains("Used")).Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                    breakdownLevel2Values.Add("Used");

                    break;

                case "model":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.MakeId).Distinct().OrderBy(x => x).ToList();
                    break;

                case "monthyear":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealMonth.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                    break;

                case "condition":
                    breakdownLevel2Values.Add("New");
                    breakdownLevel2Values.Add("Used");
                    break;

                default:
                    //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                    break;
            }

            foreach (var breakdown2 in breakdownLevel2Values)
            {

                var label2 = breakdown2;

                var BreakDown2filteredLeads = new List<SalesCommission.Models.SalesReportDetail>();

                switch (Model.BreakDownLevel2)
                {

                    case "inventorytype":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.BrandId == breakdown2);
                        break;

                    case "location":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.AutoMall == breakdown2);

                        foreach (var store in SalesCommission.Business.Enums.Stores)
                        {
                            if (store.StoreId.ToLower() == breakdown2.ToLower())
                            {
                                label2 = store.Name;
                            }
                        }

                        break;

                    case "make":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.MakeName.Contains(breakdown2));
                        break;

                    case "model":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.MakeId == breakdown2);
                        break;

                    case "monthyear":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.DealMonth.ToShortDateString() == breakdown2);
                        var dealDate = Convert.ToDateTime(breakdown2);
                        label2 = dealDate.Month + "/" + dealDate.Year;
                        break;

                    case "condition":
                        if (breakdown2 == "Used")
                        {
                            BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.BrandId == "UU");
                        }
                        else
                        {
                            BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.BrandId != "UU");
                        }
                        break;

                    default:
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.AutoMall == breakdown2);
                        break;

                }

                double BD2TotalLeaseCount = 0;
                double BD2TotalPotentialLease = 0;
                double BD2TotalHandymanCount = 0;
                double BD2TotalPotentialHandyman = 0;
                double BD2TotalCPOCount = 0;
                double BD2TotalPotentialCPO = 0;
                double BD2TotalDealCount = 0;
                double BD2TotalValidatedDealsCount = 0;
                double BD2TotalUnValidatedCount = 0;
                double BD2TotalOfficeValidatedCount = 0;
                double BD2TotalDealGrossAmount = 0;
                double BD2TotalMEFTDAmount = 0;
                double BD2TotalFinIncAmount = 0;
                double BD2TotalVSCAmount = 0;
                double BD2TotalMCAmount = 0;
                double BD2TotalGapAmount = 0;
                double BD2TotalAmount = 0;
                double BD2TotalFTDAmount = 0;
                double BD2TotalDXAmount = 0;
                double BD2TotalNextCarCount = 0;
                double BD2TotalBackGross = 0;

                foreach (var detail in BreakDown2filteredLeads)
                {
                    double MonthEndFTDAmount = 0;
                    var brandCode = detail.BrandId;
                    var locationCode = "";

                    foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                    {
                        if (mapping.StoreId.ToLower() == detail.AutoMall.ToLower())
                        {
                            locationCode = mapping.LocationId;
                            break;
                        }
                    }

                    var usedId = 0;
                    var usedBrand = "";
                    if (detail.AutoMall.ToUpper() == "CLEARWATER")
                    {
                        switch (detail.MakeId)
                        {
                            case "41":  //Chrysler
                                usedId = 94; //96
                                break;
                            case "43": //Hyundai
                                usedId = 70;
                                break;
                            case "42": //Jeep
                                usedId = 94;
                                break;
                            case "44": //Subaru
                                usedId = 95;
                                break;
                            case "70": //Hyundai
                                usedBrand = "HY";
                                break;
                            case "94": //Jeep
                                usedBrand = "JE,CH";
                                break;
                            case "95": //Subaru
                                usedBrand = "SU";
                                break;
                        }

                    }


                    if (brandCode == "UU" && locationCode == "CJE")
                    {
                        brandCode = detail.MakeName;
                    }
                    else if (brandCode == "UU")
                    {
                        brandCode = "Used";
                    }
                    if (Model.FactoryToDealerCash != null)
                    {
                        var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                        if (factoryToDealerCash == null)
                        {
                            factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                            MonthEndFTDAmount = 0;
                        }
                        else
                        {
                            MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                            //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                        }
                    }


                    if (brandCode == "Used")
                    {

                        var usedFTDCash = Model.FactoryToDealerCash.FindAll(o => o.StoreId == locationCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                        foreach (var ftd in usedFTDCash)
                        {
                            MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                        }
                        //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                    }
                    else if (detail.BrandId == "UU" && locationCode == "CJE")
                    {

                        var brands = usedBrand.Split(',');

                        foreach (var brand in brands)
                        {
                            var ftd = Model.FactoryToDealerCash.Find(o => o.BrandId == brand && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);
                            if (ftd != null)
                            {
                                MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                                //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                            }
                        }
                    }



                    var validatedDeals = detail.DealCount - detail.UnValidatedCount;



                    if (brandCode.Contains("Used"))
                    {

                        BD2TotalPotentialHandyman += validatedDeals;
                        BD2TotalPotentialCPO += validatedDeals;
                    }
                    else
                    {
                        BD2TotalPotentialLease += validatedDeals;
                    }


                    if (detail.BrandId != "AA" || (detail.BrandId == "AA" && breakdown2 == "Additional Gross"))
                    {
                        BD2TotalDealCount += detail.DealCount;
                        BD2TotalValidatedDealsCount += validatedDeals;
                        BD2TotalUnValidatedCount += detail.UnValidatedCount;
                        BD2TotalOfficeValidatedCount += detail.OfficeValidatedCount;

                    }

                    BD2TotalLeaseCount += detail.LeaseCount;
                    BD2TotalHandymanCount += detail.HandymanCount;
                    BD2TotalNextCarCount += detail.NextCarCount;
                    //BD2TotalPotentialHandyman += 0;

                    if (!brandCode.Contains("Used"))
                    {
                        BD2TotalCPOCount += detail.CPOCount;
                    }
                    else
                    {
                        if (detail.MakeId == "87")
                        {
                            BD2TotalCPOCount += detail.CPOCount;
                        }
                    }



                    BD2TotalDealGrossAmount += detail.DealGrossAmount;
                    BD2TotalMEFTDAmount += MonthEndFTDAmount;
                    BD2TotalFinIncAmount += detail.FinIncAmount;
                    BD2TotalVSCAmount += detail.VSCAmount;
                    BD2TotalMCAmount += detail.MCAmount;
                    BD2TotalGapAmount += detail.GapAmount;
                    BD2TotalAmount += detail.TotalAmount;
                    BD2TotalFTDAmount += detail.FTDAmount;
                    BD2TotalDXAmount += detail.DXAmount;
                    BD2TotalBackGross += detail.BackGrossItemAmount;

                }



                var BD2TotalLeasePercent = (BD2TotalLeaseCount / BD2TotalPotentialLease).ToString("P", nfi);
                var BD2TotalHandyPercent = (BD2TotalHandymanCount / BD2TotalPotentialHandyman).ToString("P", nfi);
                var BD2TotalCPOPercent = (BD2TotalCPOCount / CompanyUsedTotalPotentialCPO).ToString("P", nfi);
                var BD2TotalNextCarPercent = (BD2TotalNextCarCount / BD2TotalPotentialHandyman).ToString("P", nfi);

                var BD2TotalBackGrossAmount = BD2TotalFinIncAmount + BD2TotalVSCAmount + BD2TotalGapAmount + BD2TotalMCAmount;

                if (currentSelectedDate > grossChangeDate)
                {
                    BD2TotalBackGrossAmount += BD2TotalBackGross;
                }

                var BD2TotalFrontPVRAmount = Math.Round((BD2TotalDealGrossAmount + BD2TotalMEFTDAmount) / BD2TotalValidatedDealsCount); //+ BD2TotalOtherAmount+ BD2TotalFTDAmount
                var BD2TotalBackPVRAmount = Math.Round((BD2TotalBackGrossAmount) / BD2TotalValidatedDealsCount);
                var BD2TotalPVRAmount = Math.Round((BD2TotalDealGrossAmount + BD2TotalMEFTDAmount + BD2TotalBackGrossAmount) / BD2TotalValidatedDealsCount); //+ BD2TotalOtherAmount + BD2TotalFTDAmount

                <tr class="location-bd1-collapse-@breakdown1Index collapse out location-bd2-data-row-@breakdown2Index @label2.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd2-collapse-@breakdown2Index">

                    <td class="indent-td2"><a data-toggle="collapse" id="location-bd2-collapse-@breakdown2Index" style="cursor: pointer;" class="location-bd2-collapse-@breakdown2Index-href collapsed indent-2" data-target=".location-bd2-collapse-@breakdown2Index">@label2 </a></td>
                    <td class="text-center">@BD2TotalDealCount</td>
                    <td class="text-center">@BD2TotalLeaseCount</td>
                    <td class="text-center">@BD2TotalLeasePercent</td>
                    <td class="text-center">@BD2TotalCPOCount</td>
                    <td class="text-center">@BD2TotalCPOPercent</td>
                    <td class="text-center">@BD2TotalHandymanCount</td>
                    <td class="text-center">@BD2TotalHandyPercent</td>
                    <td class="text-center">@BD2TotalNextCarCount</td>
                    <td class="text-center">@BD2TotalNextCarPercent</td>
                    <td class="text-center">@BD2TotalDealGrossAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalMEFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalFinIncAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalVSCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalMCAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalGapAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalBackGross.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalFTDAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalDXAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalFrontPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalBackPVRAmount.ToString("C", nfi)</td>
                    <td class="text-center">@BD2TotalPVRAmount.ToString("C", nfi)</td>
                </tr>

                                <script type="text/javascript">

                                    $(document).ready(function () {
                                        $(".location-bd2-collapse-@breakdown2Index-href").click(function () {
                                            $('.location-bd2-data-row-@breakdown2Index').toggleClass('selected-row');
                                            $(".location-bd2-collapse-@breakdown2Index-href").toggleClass('changed');
                                        });
                                    });
                                </script>

                var breakdownLevel3Values = new List<string>();

                switch (Model.BreakDownLevel3)
                {
                    case "inventorytype":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.BrandId).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "location":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.AutoMall).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "make":
                        //breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                        breakdownLevel3Values = BreakDown2filteredLeads.Where(x => !x.MakeName.Contains("Used")).Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                        breakdownLevel3Values.Add("Used");

                        break;

                    case "model":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.MakeId).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "monthyear":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.DealMonth.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                        break;

                    case "condition":
                        breakdownLevel3Values.Add("New");
                        breakdownLevel3Values.Add("Used");
                        break;

                    default:
                        //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                        break;
                }

                foreach (var BreakDown3 in breakdownLevel3Values)
                {
                    var label3 = BreakDown3;
                    var BreakDown3filteredLeads = new List<SalesCommission.Models.SalesReportDetail>();

                    switch (Model.BreakDownLevel3)
                    {
                        case "inventorytype":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.BrandId == BreakDown3);
                            break;

                        case "location":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.AutoMall == BreakDown3);

                            foreach (var store in SalesCommission.Business.Enums.Stores)
                            {
                                if (store.StoreId.ToLower() == breakdown2.ToLower())
                                {
                                    label3 = store.Name;
                                }
                            }

                            break;

                        case "make":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.MakeName.Contains(BreakDown3));
                            break;

                        case "model":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.MakeId == BreakDown3);
                            break;

                        case "monthyear":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DealMonth.ToShortDateString() == BreakDown3);
                            var dealDate = Convert.ToDateTime(BreakDown3);
                            label3 = dealDate.Month + "/" + dealDate.Year;
                            break;

                        case "condition":
                            if (BreakDown3 == "Used")
                            {
                                BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.BrandId == "UU");
                            }
                            else
                            {
                                BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.BrandId != "UU");
                            }
                            break;


                        default:
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.AutoMall == BreakDown3);
                            break;

                    }



                    double BD3TotalLeaseCount = 0;
                    double BD3TotalPotentialLease = 0;
                    double BD3TotalHandymanCount = 0;
                    double BD3TotalPotentialHandyman = 0;
                    double BD3TotalCPOCount = 0;
                    double BD3TotalPotentialCPO = 0;
                    double BD3TotalDealCount = 0;
                    double BD3TotalValidatedDealsCount = 0;
                    double BD3TotalUnValidatedCount = 0;
                    double BD3TotalOfficeValidatedCount = 0;
                    double BD3TotalDealGrossAmount = 0;
                    double BD3TotalMEFTDAmount = 0;
                    double BD3TotalFinIncAmount = 0;
                    double BD3TotalVSCAmount = 0;
                    double BD3TotalMCAmount = 0;
                    double BD3TotalGapAmount = 0;
                    double BD3TotalAmount = 0;
                    double BD3TotalFTDAmount = 0;
                    double BD3TotalDXAmount = 0;
                    double BD3TotalNextCarCount = 0;
                    double BD3TotalBackGross = 0;

                    foreach (var detail in BreakDown3filteredLeads)
                    {
                        double MonthEndFTDAmount = 0;
                        var brandCode = detail.BrandId;
                        var locationCode = "";

                        foreach (var mapping in SalesCommission.Business.Enums.StoreLocations)
                        {
                            if (mapping.StoreId.ToLower() == detail.AutoMall.ToLower())
                            {
                                locationCode = mapping.LocationId;
                                break;
                            }
                        }

                        var usedId = 0;
                        var usedBrand = "";
                        if (detail.AutoMall.ToUpper() == "CLEARWATER")
                        {
                            switch (detail.MakeId)
                            {
                                case "41":  //Chrysler
                                    usedId = 94; //96
                                    break;
                                case "43": //Hyundai
                                    usedId = 70;
                                    break;
                                case "42": //Jeep
                                    usedId = 94;
                                    break;
                                case "44": //Subaru
                                    usedId = 95;
                                    break;
                                case "70": //Hyundai
                                    usedBrand = "HY";
                                    break;
                                case "94": //Jeep
                                    usedBrand = "JE,CH";
                                    break;
                                case "95": //Subaru
                                    usedBrand = "SU";
                                    break;
                            }

                        }


                        if (brandCode == "UU" && locationCode == "CJE")
                        {
                            brandCode = detail.MakeName;
                        }
                        else if (brandCode == "UU")
                        {
                            brandCode = "Used";
                        }
                        if (Model.FactoryToDealerCash != null)
                        {
                            var factoryToDealerCash = Model.FactoryToDealerCash.Find(o => o.LocationId == locationCode + brandCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                            if (factoryToDealerCash == null)
                            {
                                factoryToDealerCash = new SalesCommission.Models.FactoryToDealerCash();
                                MonthEndFTDAmount = 0;
                            }
                            else
                            {
                                MonthEndFTDAmount = (double)factoryToDealerCash.FTDAmount;
                                //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                            }
                        }


                        if (brandCode == "Used")
                        {

                            var usedFTDCash = Model.FactoryToDealerCash.FindAll(o => o.StoreId == locationCode && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);

                            foreach (var ftd in usedFTDCash)
                            {
                                MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                            }
                            //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                        }
                        else if (detail.BrandId == "UU" && locationCode == "CJE")
                        {

                            var brands = usedBrand.Split(',');

                            foreach (var brand in brands)
                            {
                                var ftd = Model.FactoryToDealerCash.Find(o => o.BrandId == brand && o.MonthId == detail.DealMonth.Month && o.YearId == detail.DealMonth.Year);
                                if (ftd != null)
                                {
                                    MonthEndFTDAmount += (double)ftd.FTDCPOAmount;
                                    //detail.TotalAmount = detail.TotalAmount + MonthEndFTDAmount;
                                }
                            }
                        }



                        var validatedDeals = detail.DealCount - detail.UnValidatedCount;



                        if (brandCode.Contains("Used"))
                        {

                            BD3TotalPotentialHandyman += validatedDeals;
                            BD3TotalPotentialCPO += validatedDeals;
                        }
                        else
                        {
                            BD3TotalPotentialLease += validatedDeals;
                        }


                        if (detail.BrandId != "AA" || (detail.BrandId == "AA" && BreakDown3 == "Additional Gross"))
                        {
                            BD3TotalDealCount += detail.DealCount;
                            BD3TotalValidatedDealsCount += validatedDeals;
                            BD3TotalUnValidatedCount += detail.UnValidatedCount;
                            BD3TotalOfficeValidatedCount += detail.OfficeValidatedCount;

                        }
                        BD3TotalLeaseCount += detail.LeaseCount;
                        BD3TotalHandymanCount += detail.HandymanCount;
                        BD3TotalNextCarCount += detail.NextCarCount;
                        //BD3TotalPotentialHandyman += 0;

                        if (!brandCode.Contains("Used"))
                        {
                            BD3TotalCPOCount += detail.CPOCount;
                        }
                        else
                        {
                            if (detail.MakeId == "87")
                            {
                                BD3TotalCPOCount += detail.CPOCount;
                            }
                        }
                        //BD3TotalPotentialCPO += 0;



                        BD3TotalDealGrossAmount += detail.DealGrossAmount;
                        BD3TotalMEFTDAmount += MonthEndFTDAmount;
                        BD3TotalFinIncAmount += detail.FinIncAmount;
                        BD3TotalVSCAmount += detail.VSCAmount;
                        BD3TotalMCAmount += detail.MCAmount;
                        BD3TotalGapAmount += detail.GapAmount;
                        BD3TotalAmount += detail.TotalAmount;
                        BD3TotalFTDAmount += detail.FTDAmount;
                        BD3TotalDXAmount += detail.DXAmount;
                        BD3TotalBackGross += detail.BackGrossItemAmount;

                    }



                    var BD3TotalLeasePercent = (BD3TotalLeaseCount / BD3TotalPotentialLease).ToString("P", nfi);
                    var BD3TotalHandyPercent = (BD3TotalHandymanCount / BD3TotalPotentialHandyman).ToString("P", nfi);
                    var BD3TotalCPOPercent = (BD3TotalCPOCount / CompanyUsedTotalPotentialCPO).ToString("P", nfi);
                    var BD3TotalNextCarPercent = (BD3TotalNextCarCount / BD3TotalPotentialHandyman).ToString("P", nfi);

                    var BD3TotalBackGrossAmount = BD3TotalFinIncAmount + BD3TotalVSCAmount + BD3TotalGapAmount + BD3TotalMCAmount;

                    if (currentSelectedDate > grossChangeDate)
                    {
                        BD3TotalBackGrossAmount += BD3TotalBackGross;
                    }

                    var BD3TotalFrontPVRAmount = Math.Round((BD3TotalDealGrossAmount + BD3TotalMEFTDAmount) / BD3TotalValidatedDealsCount); //+ BD3TotalOtherAmount+ BD3TotalFTDAmount
                    var BD3TotalBackPVRAmount = Math.Round((BD3TotalBackGrossAmount) / BD3TotalValidatedDealsCount);
                    var BD3TotalPVRAmount = Math.Round((BD3TotalDealGrossAmount + BD3TotalMEFTDAmount + BD3TotalBackGrossAmount) / BD3TotalValidatedDealsCount); //+ BD3TotalOtherAmount + BD3TotalFTDAmount

                    <tr class="location-bd2-collapse-@breakdown2Index collapse out location-bd3-data-row-@BreakDown3Index @label3.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown3Index">

                        <td class="divider-column indent-td3"><a data-toggle="collapse" id="location-bd3-collapse-@BreakDown3Index" style="cursor: pointer;" class="location-bd3-collapse-@BreakDown3Index-href collapsed indent-3" data-target=".location-bd3-collapse-@BreakDown3Index">@label3 </a></td>

                        <td class="text-center">@BD3TotalDealCount</td>
                        <td class="text-center">@BD3TotalLeaseCount</td>
                        <td class="text-center">@BD3TotalLeasePercent</td>
                        <td class="text-center">@BD3TotalCPOCount</td>
                        <td class="text-center">@BD3TotalCPOPercent</td>
                        <td class="text-center">@BD3TotalHandymanCount</td>
                        <td class="text-center">@BD3TotalHandyPercent</td>
                        <td class="text-center">@BD3TotalNextCarCount</td>
                        <td class="text-center">@BD3TotalNextCarPercent</td>
                        <td class="text-center">@BD3TotalDealGrossAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalMEFTDAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalFinIncAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalVSCAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalMCAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalGapAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalBackGross.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalFTDAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalDXAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalFrontPVRAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalBackPVRAmount.ToString("C", nfi)</td>
                        <td class="text-center">@BD3TotalPVRAmount.ToString("C", nfi)</td>
                    </tr>

                    <script type="text/javascript">

                                        $(document).ready(function () {
                                            $(".location-bd3-collapse-@BreakDown3Index-href").click(function () {
                                                $('.location-bd3-data-row-@BreakDown3Index').toggleClass('selected-row');
                                                $(".location-bd3-collapse-@BreakDown3Index-href").toggleClass('changed');
                });
            });
                    </script>




                    BreakDown3Index += 1;
                }




        breakdown2Index += 1;

            }

    breakdown1Index += 1;
        }


    }


        </tbody>
        <tfoot></tfoot>
        </table>


        @*
            

                                foreach (var BreakDown3 in breakdownLevel3Values)
                                {
                                    var label3 = BreakDown3;
                                    var BreakDown3filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                                    switch (Model.BreakDownLevel3)
                                    {
                                        case "associatename":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Sales_LastName == BreakDown3);
                                            break;

                                        case "brand":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == BreakDown3);
                                            break;

                                        case "leadgroupname":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadGroupMapping == BreakDown3);
                                            break;

                                        case "leadsourcename":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceName == BreakDown3);
                                            break;

                                        case "leadstatusname":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadStatusName == BreakDown3);
                                            break;

                                        case "leadstatustype":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadStatusTypeName == BreakDown3);
                                            break;

                                        case "locationid":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown3);

                                            foreach (var store in SalesCommission.Business.Enums.VinStores)
                                            {
                                                if (store.StoreId == BreakDown3)
                                                {
                                                    label3 = store.Name;
                                                }
                                            }

                                            break;

                                        case "salesteam":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Team == BreakDown3);
                                            break;

                                        case "make":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Make == BreakDown3);
                                            break;

                                        case "model":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_Model == BreakDown3);
                                            break;

                                        case "stock":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_StockNumber == BreakDown3);
                                            break;

                                        case "zip":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.PostalCode == BreakDown3);
                                            break;

                                        case "inventorytype":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VOfInterest_InventoryType == BreakDown3);
                                            break;

                                        case "leaddate":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == BreakDown3);
                                            break;

                                        case "leadtime":
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == BreakDown3);

                                            TimeSpan result = TimeSpan.FromHours(Int32.Parse(BreakDown3));
                                            string fromTimeString = result.ToString("hh':'mm");

                                            label3 = fromTimeString;

                                            break;

                                        case "leadmonthyear":
                                            //BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown3);
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown3) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == BreakDown3)));

                                            break;


                                        default:
                                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown3);
                                            break;
                                    }


                                    decimal BreakDown3TotalLeadCount = 0;
                                    decimal BreakDown3TotalLeadSoldCount = 0;
                                    decimal BreakDown3TotalLeadSoldPercent = 0;

                                    decimal BreakDown3PhoneLeadCount = 0;
                                    decimal BreakDown3WalkInLeadCount = 0;
                                    decimal BreakDown3InternetLeadCount = 0;

                                    decimal BreakDown3PhoneLeadSoldCount = 0;
                                    decimal BreakDown3WalkInLeadSoldCount = 0;
                                    decimal BreakDown3InternetLeadSoldCount = 0;

                                    decimal BreakDown3PhoneLeadSoldPercent = 0;
                                    decimal BreakDown3WalkInLeadSoldPercent = 0;
                                    decimal BreakDown3InternetLeadSoldPercent = 0;

                                    decimal BreakDown3InternetEngagementCount = 0;
                                    decimal BreakDown3InternetEngagementPercent = 0;

                                    decimal BreakDown3InternetNewLeadCount = 0;
                                    decimal BreakDown3InternetNewLeadSoldCount = 0;
                                    decimal BreakDown3InternetNewLeadSoldPercent = 0;

                                    decimal BreakDown3InternetUsedLeadCount = 0;
                                    decimal BreakDown3InternetUsedLeadSoldCount = 0;
                                    decimal BreakDown3InternetUsedLeadSoldPercent = 0;

                                    decimal BreakDown3InternetHandyLeadCount = 0;
                                    decimal BreakDown3InternetHandyLeadSoldCount = 0;
                                    decimal BreakDown3InternetHandyLeadSoldPercent = 0;

                                    decimal BreakDown3InternetOtherLeadCount = 0;
                                    decimal BreakDown3InternetOtherLeadSoldCount = 0;
                                    decimal BreakDown3InternetOtherLeadSoldPercent = 0;

                                    decimal BreakDown3InternetAdjustedResponseTime = 0;
                                    decimal BreakDown3InternetAvgAdjustedResponseTime = 0;

                                    decimal BreakDown3WalkinAdjustedResponseTime = 0;
                                    decimal BreakDown3WalkinAvgAdjustedResponseTime = 0;

                                    decimal BreakDown3OtherLeadCount = 0;
                                    decimal BreakDown3OtherLeadSoldCount = 0;
                                    decimal BreakDown3OtherLeadSoldPercent = 0;

                                    // var BreakDown3filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown3Information.DealerId);

                                    var BreakDown3otherLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                                    BreakDown3OtherLeadCount = BreakDown3otherLeads.Count;
                                    BreakDown3OtherLeadSoldCount = BreakDown3otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    var BreakDown3phoneLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                                    BreakDown3PhoneLeadCount = BreakDown3phoneLeads.Count;
                                    //currentTotalLeadCount += PhoneLeadCount;
                                    BreakDown3PhoneLeadSoldCount = BreakDown3phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown3PhoneLeadCount > 0)
                                    {
                                        BreakDown3PhoneLeadSoldPercent = BreakDown3PhoneLeadSoldCount / BreakDown3PhoneLeadCount;
                                    }

                                    var BreakDown3walkinLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                                    BreakDown3WalkInLeadCount = BreakDown3walkinLeads.Count;
                                    //currentTotalLeadCount += WalkInLeadCount;
                                    BreakDown3WalkInLeadSoldCount = BreakDown3walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown3WalkInLeadCount > 0)
                                    {
                                        BreakDown3WalkInLeadSoldPercent = (BreakDown3WalkInLeadSoldCount / BreakDown3WalkInLeadCount);
                                    }

                                    BreakDown3WalkinAdjustedResponseTime = BreakDown3walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                    var BreakDown3internetLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                                    BreakDown3InternetLeadCount = BreakDown3internetLeads.Count;
                                    //currentTotalLeadCount += InternetLeadCount;
                                    BreakDown3InternetEngagementCount = BreakDown3internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                                    BreakDown3InternetLeadSoldCount = BreakDown3internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                    if (BreakDown3InternetLeadCount > 0)
                                    {
                                        BreakDown3InternetLeadSoldPercent = (BreakDown3InternetLeadSoldCount / BreakDown3InternetLeadCount);
                                        BreakDown3InternetEngagementPercent = (BreakDown3InternetEngagementCount / BreakDown3InternetLeadCount);
                                    }


                                    if (BreakDown3OtherLeadCount > 0)
                                    {
                                        BreakDown3OtherLeadSoldPercent = (BreakDown3OtherLeadSoldCount / BreakDown3OtherLeadCount);
                                    }

                                    //Here comes the fun, find the new, used and handymans
                                    var BreakDown3newInternetLeads = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                                    if (BreakDown3newInternetLeads.Count > 0)
                                    {
                                        BreakDown3InternetNewLeadCount = BreakDown3newInternetLeads.Count;
                                        BreakDown3InternetNewLeadSoldCount = BreakDown3newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                                    var BreakDown3usedInternetLeadsNoHandy = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                                    if (BreakDown3usedInternetLeadsNoHandy.Count > 0)
                                    {
                                        BreakDown3InternetUsedLeadCount = BreakDown3usedInternetLeadsNoHandy.Count;
                                        BreakDown3InternetUsedLeadSoldCount = BreakDown3usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    var BreakDown3handymanLeads = BreakDown3internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                                    if (BreakDown3handymanLeads.Count > 0)
                                    {
                                        BreakDown3InternetHandyLeadCount = BreakDown3handymanLeads.Count;
                                        BreakDown3InternetHandyLeadSoldCount = BreakDown3handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                    }

                                    //Unknown leads, will be leads without a Inventory Type of N or U
                                    var BreakDown3unknownLeads = BreakDown3internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                                    if (BreakDown3unknownLeads.Count > 0)
                                    {
                                        BreakDown3InternetOtherLeadCount = BreakDown3unknownLeads.Count;
                                        BreakDown3InternetOtherLeadSoldCount = BreakDown3unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold").Count;
                                    }

                                    BreakDown3InternetAdjustedResponseTime = BreakDown3internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                    if (BreakDown3PhoneLeadCount > 0)
                                    {
                                        BreakDown3PhoneLeadSoldPercent = BreakDown3PhoneLeadSoldCount / BreakDown3PhoneLeadCount;
                                    }

                                    if (BreakDown3WalkInLeadCount > 0)
                                    {
                                        BreakDown3WalkInLeadSoldPercent = BreakDown3WalkInLeadSoldCount / BreakDown3WalkInLeadCount;
                                        BreakDown3WalkinAvgAdjustedResponseTime = BreakDown3WalkinAdjustedResponseTime / BreakDown3WalkInLeadCount;
                                    }

                                    if (BreakDown3InternetLeadCount > 0)
                                    {
                                        BreakDown3InternetLeadSoldPercent = BreakDown3InternetLeadSoldCount / BreakDown3InternetLeadCount;
                                        BreakDown3InternetAvgAdjustedResponseTime = BreakDown3InternetAdjustedResponseTime / BreakDown3InternetLeadCount;
                                    }

                                    if (BreakDown3InternetNewLeadCount > 0)
                                    {
                                        BreakDown3InternetNewLeadSoldPercent = BreakDown3InternetNewLeadSoldCount / BreakDown3InternetNewLeadCount;
                                    }

                                    if (BreakDown3InternetUsedLeadCount > 0)
                                    {
                                        BreakDown3InternetUsedLeadSoldPercent = BreakDown3InternetUsedLeadSoldCount / BreakDown3InternetUsedLeadCount; ;
                                    }

                                    if (BreakDown3InternetHandyLeadCount > 0)
                                    {
                                        BreakDown3InternetHandyLeadSoldPercent = BreakDown3InternetHandyLeadSoldCount / BreakDown3InternetHandyLeadCount; ;
                                    }

                                    if (BreakDown3InternetOtherLeadCount > 0)
                                    {
                                        BreakDown3InternetOtherLeadSoldPercent = BreakDown3InternetOtherLeadSoldCount / BreakDown3InternetOtherLeadCount; ;
                                    }


                                    BreakDown3TotalLeadCount = BreakDown3PhoneLeadCount + BreakDown3WalkInLeadCount + BreakDown3InternetLeadCount + BreakDown3OtherLeadCount;
                                    BreakDown3TotalLeadSoldCount = BreakDown3PhoneLeadSoldCount + BreakDown3WalkInLeadSoldCount + BreakDown3InternetLeadSoldCount + BreakDown3OtherLeadSoldCount;
                                    if (BreakDown3TotalLeadCount > 0)
                                    {
                                        BreakDown3TotalLeadSoldPercent = BreakDown3TotalLeadSoldCount / BreakDown3TotalLeadCount;
                                    }

                                    var bd3URL = applicationPath + "/Reports/LeadReportDetails/" + "?startdate=" + Model.ReportStartDate.ToShortDateString() + "&enddate=" + Model.ReportEndDate.ToShortDateString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + Model.BreakDownLevel2 + "," + breakdown2 + "&bd3=" + Model.BreakDownLevel3 + "," + BreakDown3 + "&bd4=" + "&vt=" + Model.VehicleType + "&lt=all&ft=" + filters;

                                    <tr class="location-bd2-collapse-@breakdown2Index collapse out location-bd3-data-row-@BreakDown3Index @label3.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown3Index">

                                        <td class="divider-column indent-td3"><a data-toggle="collapse" id="location-bd3-collapse-@BreakDown3Index" style="cursor: pointer;" class="location-bd3-collapse-@BreakDown3Index-href collapsed indent-3" data-target=".location-bd3-collapse-@BreakDown3Index">@label3 </a></td>

                                        <td class="text-center"><a href="@bd3URL" class="lead-detail-link" target="_blank">@BreakDown3TotalLeadCount</a></td>
                                        <td class="text-center">@BreakDown3TotalLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown3TotalLeadSoldPercent.ToString("P", nfi)</td>


                                        <td class="text-center">@BreakDown3WalkInLeadCount</td>

                                        <td class="text-center">@BreakDown3WalkInLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown3WalkInLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown3InternetLeadCount</td>
                                        <td class="text-center">@BreakDown3InternetEngagementPercent.ToString("P", nfi)</td>
                                        <td class="text-center">@BreakDown3InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                                        <td class="text-center">@BreakDown3InternetLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown3InternetLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown3PhoneLeadCount</td>
                                        <td class="text-center">@BreakDown3PhoneLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown3PhoneLeadSoldPercent.ToString("P", nfi)</td>

                                        <td class="text-center">@BreakDown3OtherLeadCount</td>
                                        <td class="text-center">@BreakDown3OtherLeadSoldCount</td>
                                        <td class="text-center divider-column">@BreakDown3OtherLeadSoldCount</td>
                                    </tr>

                                    <script type="text/javascript">

                                        $(document).ready(function () {
                                            $(".location-bd3-collapse-@BreakDown3Index-href").click(function () {
                                                $('.location-bd3-data-row-@BreakDown3Index').toggleClass('selected-row');
                                                $(".location-bd3-collapse-@BreakDown3Index-href").toggleClass('changed');
                                            });
                                        });
                                    </script>

                                    var breakdownLevel4Values = new List<string>();


                                    switch (Model.BreakDownLevel4)
                                    {
                                        case "associatename":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Sales_LastName).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "brand":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Make.Trim().ToUpper()).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leadgroupname":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadGroupMapping).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leadsourcename":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leadstatusname":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadStatusName).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leadstatustype":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadStatusTypeName).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "locationid":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "salesteam":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Team).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "make":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Make).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "model":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_Model).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "stock":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_StockNumber).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "zip":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.PostalCode).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "inventorytype":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VOfInterest_InventoryType).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leaddate":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadCreatedEastTime.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                            break;

                                        case "leadtime":
                                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadCreatedEastTime.Hour.ToString()).Distinct().OrderBy(x => x).ToList();
                                            break;

                                        case "leadmonthyear":
                                            var leadMonthYears = BreakDown3filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() != "SOLD").Select(x => x.LeadCreatedEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                            var soldMonthYears = BreakDown3filteredLeads.Where(x => x.LeadStatusTypeName.ToUpper() == "SOLD").Select(x => x.VehicleSoldEastTime.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                            leadMonthYears.AddRange(soldMonthYears);
                                            breakdownLevel4Values = leadMonthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                                            break;

                                        default:
                                            //breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                            break;
                                    }



                                    foreach (var BreakDown4 in breakdownLevel4Values)
                                    {
                                        var label4 = BreakDown4;
                                        var BreakDown4filteredLeads = new List<SalesCommission.Models.AssociateLead>();

                                        switch (Model.BreakDownLevel4)
                                        {
                                            case "associatename":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Sales_LastName == BreakDown4);
                                                break;

                                            case "brand":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Make.Trim().ToUpper() == BreakDown4);
                                                break;

                                            case "leadgroupname":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadGroupMapping == BreakDown4);
                                                break;

                                            case "leadsourcename":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceName == BreakDown4);
                                                break; ;

                                            case "leadstatusname":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadStatusName == BreakDown4);
                                                break;

                                            case "leadstatustype":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadStatusTypeName == BreakDown4);
                                                break;

                                            case "locationid":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown4);

                                                foreach (var store in SalesCommission.Business.Enums.VinStores)
                                                {
                                                    if (store.StoreId == BreakDown4)
                                                    {
                                                        label4 = store.Name;
                                                    }
                                                }

                                                break;

                                            case "salesteam":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Team == BreakDown4);
                                                break;

                                            case "make":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Make == BreakDown4);
                                                break;

                                            case "model":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_Model == BreakDown4);
                                                break;

                                            case "stock":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_StockNumber == BreakDown4);
                                                break;

                                            case "zip":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.PostalCode == BreakDown4);
                                                break;

                                            case "inventorytype":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VOfInterest_InventoryType == BreakDown4);
                                                break;

                                            case "leaddate":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToShortDateString() == BreakDown4);
                                                break;

                                            case "leadtime":
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.Hour.ToString() == BreakDown4);

                                                TimeSpan result = TimeSpan.FromHours(Int32.Parse(BreakDown4));
                                                string fromTimeString = result.ToString("hh':'mm");

                                                label4 = fromTimeString;

                                                break;

                                            case "leadmonthyear":
                                                //BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown4);
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => ((x.LeadStatusTypeName.ToUpper() != "SOLD" && x.LeadCreatedEastTime.ToString("MM/yyyy") == BreakDown4) || (x.LeadStatusTypeName.ToUpper() == "SOLD" && x.VehicleSoldEastTime.ToString("MM/yyyy") == BreakDown4)));

                                                break;


                                            default:
                                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.DealerId.ToString() == BreakDown4);
                                                break;
                                        }


                                        decimal BreakDown4TotalLeadCount = 0;
                                        decimal BreakDown4TotalLeadSoldCount = 0;
                                        decimal BreakDown4TotalLeadSoldPercent = 0;

                                        decimal BreakDown4PhoneLeadCount = 0;
                                        decimal BreakDown4WalkInLeadCount = 0;
                                        decimal BreakDown4InternetLeadCount = 0;

                                        decimal BreakDown4PhoneLeadSoldCount = 0;
                                        decimal BreakDown4WalkInLeadSoldCount = 0;
                                        decimal BreakDown4InternetLeadSoldCount = 0;

                                        decimal BreakDown4PhoneLeadSoldPercent = 0;
                                        decimal BreakDown4WalkInLeadSoldPercent = 0;
                                        decimal BreakDown4InternetLeadSoldPercent = 0;

                                        decimal BreakDown4InternetEngagementCount = 0;
                                        decimal BreakDown4InternetEngagementPercent = 0;

                                        decimal BreakDown4InternetNewLeadCount = 0;
                                        decimal BreakDown4InternetNewLeadSoldCount = 0;
                                        decimal BreakDown4InternetNewLeadSoldPercent = 0;

                                        decimal BreakDown4InternetUsedLeadCount = 0;
                                        decimal BreakDown4InternetUsedLeadSoldCount = 0;
                                        decimal BreakDown4InternetUsedLeadSoldPercent = 0;

                                        decimal BreakDown4InternetHandyLeadCount = 0;
                                        decimal BreakDown4InternetHandyLeadSoldCount = 0;
                                        decimal BreakDown4InternetHandyLeadSoldPercent = 0;

                                        decimal BreakDown4InternetOtherLeadCount = 0;
                                        decimal BreakDown4InternetOtherLeadSoldCount = 0;
                                        decimal BreakDown4InternetOtherLeadSoldPercent = 0;

                                        decimal BreakDown4InternetAdjustedResponseTime = 0;
                                        decimal BreakDown4InternetAvgAdjustedResponseTime = 0;

                                        decimal BreakDown4WalkinAdjustedResponseTime = 0;
                                        decimal BreakDown4WalkinAvgAdjustedResponseTime = 0;

                                        decimal BreakDown4OtherLeadCount = 0;
                                        decimal BreakDown4OtherLeadSoldCount = 0;
                                        decimal BreakDown4OtherLeadSoldPercent = 0;

                                        // var BreakDown4filteredLeads = Model.AssociateLeads.FindAll(x => x.DealerId.ToString() == BreakDown4Information.DealerId);

                                        var BreakDown4otherLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() != "phone" && x.LeadSourceTypeName.ToLower() != "walk-in" && x.LeadSourceTypeName.ToLower() != "internet" && x.LeadSourceTypeName.ToLower() != "websitechat");
                                        BreakDown4OtherLeadCount = BreakDown4otherLeads.Count;
                                        BreakDown4OtherLeadSoldCount = BreakDown4otherLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                        var BreakDown4phoneLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "phone");

                                        BreakDown4PhoneLeadCount = BreakDown4phoneLeads.Count;
                                        //currentTotalLeadCount += PhoneLeadCount;
                                        BreakDown4PhoneLeadSoldCount = BreakDown4phoneLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                        if (BreakDown4PhoneLeadCount > 0)
                                        {
                                            BreakDown4PhoneLeadSoldPercent = BreakDown4PhoneLeadSoldCount / BreakDown4PhoneLeadCount;
                                        }

                                        var BreakDown4walkinLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "walk-in");

                                        BreakDown4WalkInLeadCount = BreakDown4walkinLeads.Count;
                                        //currentTotalLeadCount += WalkInLeadCount;
                                        BreakDown4WalkInLeadSoldCount = BreakDown4walkinLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                        if (BreakDown4WalkInLeadCount > 0)
                                        {
                                            BreakDown4WalkInLeadSoldPercent = (BreakDown4WalkInLeadSoldCount / BreakDown4WalkInLeadCount);
                                        }

                                        BreakDown4WalkinAdjustedResponseTime = BreakDown4walkinLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                        var BreakDown4internetLeads = BreakDown4filteredLeads.FindAll(x => x.LeadSourceTypeName.ToLower() == "internet" || x.LeadSourceTypeName.ToLower() == "websitechat");

                                        BreakDown4InternetLeadCount = BreakDown4internetLeads.Count;
                                        //currentTotalLeadCount += InternetLeadCount;
                                        BreakDown4InternetEngagementCount = BreakDown4internetLeads.FindAll(x => x.HasBeenContacted == true).Count;
                                        BreakDown4InternetLeadSoldCount = BreakDown4internetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;

                                        if (BreakDown4InternetLeadCount > 0)
                                        {
                                            BreakDown4InternetLeadSoldPercent = (BreakDown4InternetLeadSoldCount / BreakDown4InternetLeadCount);
                                            BreakDown4InternetEngagementPercent = (BreakDown4InternetEngagementCount / BreakDown4InternetLeadCount);
                                        }


                                        if (BreakDown4OtherLeadCount > 0)
                                        {
                                            BreakDown4OtherLeadSoldPercent = (BreakDown4OtherLeadSoldCount / BreakDown4OtherLeadCount);
                                        }

                                        //Here comes the fun, find the new, used and handymans
                                        var BreakDown4newInternetLeads = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType == "N");
                                        if (BreakDown4newInternetLeads.Count > 0)
                                        {
                                            BreakDown4InternetNewLeadCount = BreakDown4newInternetLeads.Count;
                                            BreakDown4InternetNewLeadSoldCount = BreakDown4newInternetLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                        }

                                        //var usedInternetLeads = internetLeads.FindAll(x => x.VOfInterest_InventoryType.ToUpper() == "U");
                                        var BreakDown4usedInternetLeadsNoHandy = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType == "U" && !x.LeadSourceName.Contains("~"));
                                        if (BreakDown4usedInternetLeadsNoHandy.Count > 0)
                                        {
                                            BreakDown4InternetUsedLeadCount = BreakDown4usedInternetLeadsNoHandy.Count;
                                            BreakDown4InternetUsedLeadSoldCount = BreakDown4usedInternetLeadsNoHandy.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                        }

                                        var BreakDown4handymanLeads = BreakDown4internetLeads.FindAll(x => x.LeadSourceName.Contains("~"));
                                        if (BreakDown4handymanLeads.Count > 0)
                                        {
                                            BreakDown4InternetHandyLeadCount = BreakDown4handymanLeads.Count;
                                            BreakDown4InternetHandyLeadSoldCount = BreakDown4handymanLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                        }

                                        //Unknown leads, will be leads without a Inventory Type of N or U
                                        var BreakDown4unknownLeads = BreakDown4internetLeads.FindAll(x => x.VOfInterest_InventoryType != "N" && x.VOfInterest_InventoryType != "U");
                                        if (BreakDown4unknownLeads.Count > 0)
                                        {
                                            BreakDown4InternetOtherLeadCount = BreakDown4unknownLeads.Count;
                                            BreakDown4InternetOtherLeadSoldCount = BreakDown4unknownLeads.FindAll(x => x.LeadStatusTypeName.ToLower() == "sold" && x.LeadStatusName.ToLower() == "delivered").Count;
                                        }

                                        BreakDown4InternetAdjustedResponseTime = BreakDown4internetLeads.Sum(x => x.AdjustedResponseTimeInMinutes);

                                        if (BreakDown4PhoneLeadCount > 0)
                                        {
                                            BreakDown4PhoneLeadSoldPercent = BreakDown4PhoneLeadSoldCount / BreakDown4PhoneLeadCount;
                                        }

                                        if (BreakDown4WalkInLeadCount > 0)
                                        {
                                            BreakDown4WalkInLeadSoldPercent = BreakDown4WalkInLeadSoldCount / BreakDown4WalkInLeadCount;
                                            BreakDown4WalkinAvgAdjustedResponseTime = BreakDown4WalkinAdjustedResponseTime / BreakDown4WalkInLeadCount;
                                        }

                                        if (BreakDown4InternetLeadCount > 0)
                                        {
                                            BreakDown4InternetLeadSoldPercent = BreakDown4InternetLeadSoldCount / BreakDown4InternetLeadCount;
                                            BreakDown4InternetAvgAdjustedResponseTime = BreakDown4InternetAdjustedResponseTime / BreakDown4InternetLeadCount;
                                        }

                                        if (BreakDown4InternetNewLeadCount > 0)
                                        {
                                            BreakDown4InternetNewLeadSoldPercent = BreakDown4InternetNewLeadSoldCount / BreakDown4InternetNewLeadCount;
                                        }

                                        if (BreakDown4InternetUsedLeadCount > 0)
                                        {
                                            BreakDown4InternetUsedLeadSoldPercent = BreakDown4InternetUsedLeadSoldCount / BreakDown4InternetUsedLeadCount; ;
                                        }

                                        if (BreakDown4InternetHandyLeadCount > 0)
                                        {
                                            BreakDown4InternetHandyLeadSoldPercent = BreakDown4InternetHandyLeadSoldCount / BreakDown4InternetHandyLeadCount; ;
                                        }

                                        if (BreakDown4InternetOtherLeadCount > 0)
                                        {
                                            BreakDown4InternetOtherLeadSoldPercent = BreakDown4InternetOtherLeadSoldCount / BreakDown4InternetOtherLeadCount; ;
                                        }


                                        BreakDown4TotalLeadCount = BreakDown4PhoneLeadCount + BreakDown4WalkInLeadCount + BreakDown4InternetLeadCount + BreakDown4OtherLeadCount;
                                        BreakDown4TotalLeadSoldCount = BreakDown4PhoneLeadSoldCount + BreakDown4WalkInLeadSoldCount + BreakDown4InternetLeadSoldCount + BreakDown4OtherLeadSoldCount;
                                        if (BreakDown4TotalLeadCount > 0)
                                        {
                                            BreakDown4TotalLeadSoldPercent = BreakDown4TotalLeadSoldCount / BreakDown4TotalLeadCount;
                                        }

                                        var bd4URL = applicationPath + "/Reports/LeadReportDetails/" + "?startdate=" + Model.ReportStartDate.ToShortDateString() + "&enddate=" + Model.ReportEndDate.ToShortDateString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + Model.BreakDownLevel2 + "," + breakdown2 + "&bd3=" + Model.BreakDownLevel3 + "," + BreakDown3 + "&bd4=" + Model.BreakDownLevel4 + "," + BreakDown4 + "&vt=" + Model.VehicleType + "&lt=all&ft=" + filters;

                                        <tr class="location-bd3-collapse-@BreakDown3Index collapse out location-bd3-data-row-@BreakDown4Index @BreakDown4.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown4Index">

                                            <td class="divider-column indent-td4"><span class="indent-4">@label4</span></td>

                                            <td class="text-center"><a href="@bd4URL" class="lead-detail-link" target="_blank">@BreakDown4TotalLeadCount</a></td>
                                            <td class="text-center">@BreakDown4TotalLeadSoldCount</td>
                                            <td class="text-center divider-column">@BreakDown4TotalLeadSoldPercent.ToString("P", nfi)</td>

                                            <td class="text-center">@BreakDown4WalkInLeadCount</td>

                                            <td class="text-center">@BreakDown4WalkInLeadSoldCount</td>
                                            <td class="text-center divider-column">@BreakDown4WalkInLeadSoldPercent.ToString("P", nfi)</td>

                                            <td class="text-center">@BreakDown4InternetLeadCount</td>
                                            <td class="text-center">@BreakDown4InternetEngagementPercent.ToString("P", nfi)</td>
                                            <td class="text-center">@BreakDown4InternetAvgAdjustedResponseTime.ToString("C", nfi)</td>
                                            <td class="text-center">@BreakDown4InternetLeadSoldCount</td>
                                            <td class="text-center divider-column">@BreakDown4InternetLeadSoldPercent.ToString("P", nfi)</td>

                                            <td class="text-center">@BreakDown4PhoneLeadCount</td>
                                            <td class="text-center">@BreakDown4PhoneLeadSoldCount</td>
                                            <td class="text-center divider-column">@BreakDown4PhoneLeadSoldPercent.ToString("P", nfi)</td>

                                            <td class="text-center">@BreakDown4OtherLeadCount</td>
                                            <td class="text-center">@BreakDown4OtherLeadSoldCount</td>
                                            <td class="text-center divider-column">@BreakDown4OtherLeadSoldCount</td>
                                        </tr>

                                        BreakDown4Index += 1;

                                    }


                        BreakDown3Index += 1;

                                }

                    breakdown2Index += 1;

                            }

                            breakdown1Index += 1;

                        }


                    }


                                @{
                                    decimal TotalPhoneLeadCount = 0;
                                    decimal TotalWalkInLeadCount = 0;
                                    decimal TotalInternetLeadCount = 0;

                                    decimal TotalPhoneLeadSoldCount = 0;
                                    decimal TotalWalkInLeadSoldCount = 0;
                                    decimal TotalInternetLeadSoldCount = 0;

                                    decimal TotalPhoneLeadSoldPercent = 0;
                                    decimal TotalWalkInLeadSoldPercent = 0;
                                    decimal TotalInternetLeadSoldPercent = 0;

                                    decimal TotalInternetNewLeadCount = 0;
                                    decimal TotalInternetNewLeadSoldCount = 0;
                                    decimal TotalInternetNewLeadSoldPercent = 0;

                                    decimal TotalInternetUsedLeadCount = 0;
                                    decimal TotalInternetUsedLeadSoldCount = 0;
                                    decimal TotalInternetUsedLeadSoldPercent = 0;

                                    decimal TotalInternetHandyLeadCount = 0;
                                    decimal TotalInternetHandyLeadSoldCount = 0;
                                    decimal TotalInternetHandyLeadSoldPercent = 0;

                                    decimal TotalInternetOtherLeadCount = 0;
                                    decimal TotalInternetOtherLeadSoldCount = 0;
                                    decimal TotalInternetOtherLeadSoldPercent = 0;

                                    decimal TotalInternetAdjustedResponseTime = 0;
                                    decimal TotalInternetAvgAdjustedResponseTime = 0;

                                    decimal TotalWalkInAdjustedResponseTime = 0;
                                    decimal TotalWalkInAvgAdjustedResponseTime = 0;

                                    var index = 0;
                                }



                    @{
                        if (TotalPhoneLeadCount > 0)
                        {
                            TotalPhoneLeadSoldPercent = TotalPhoneLeadSoldCount / TotalPhoneLeadCount;
                        }

                        if (TotalWalkInLeadCount > 0)
                        {
                            TotalWalkInLeadSoldPercent = TotalWalkInLeadSoldCount / TotalWalkInLeadCount;
                            TotalWalkInAvgAdjustedResponseTime = TotalWalkInAdjustedResponseTime / TotalWalkInLeadCount;
                        }

                        if (TotalInternetLeadCount > 0)
                        {
                            TotalInternetLeadSoldPercent = TotalInternetLeadSoldCount / TotalInternetLeadCount;
                            TotalInternetAvgAdjustedResponseTime = TotalInternetAdjustedResponseTime / TotalInternetLeadCount;
                        }

                        if (TotalInternetNewLeadCount > 0)
                        {
                            TotalInternetNewLeadSoldPercent = TotalInternetNewLeadSoldCount / TotalInternetNewLeadCount;
                        }

                        if (TotalInternetUsedLeadCount > 0)
                        {
                            TotalInternetUsedLeadSoldPercent = TotalInternetUsedLeadSoldCount / TotalInternetUsedLeadCount; ;
                        }

                        if (TotalInternetHandyLeadCount > 0)
                        {
                            TotalInternetHandyLeadSoldPercent = TotalInternetHandyLeadSoldCount / TotalInternetHandyLeadCount; ;
                        }

                        if (TotalInternetOtherLeadCount > 0)
                        {
                            TotalInternetOtherLeadSoldPercent = TotalInternetOtherLeadSoldCount / TotalInternetOtherLeadCount; ;
                        }
                    }

                </tbody>
                <tfoot>
                    <tr style="background-color:#d9edf7;">
                        <th class="text-center divider-column breakdown-column">Totals</th>

                        <th class="text-center">@CompanyTotalLeadCount</th>
                        <th class="text-center">@CompanyTotalLeadSoldCount</th>
                        <th class="text-center divider-column">@CompanyTotalLeadSoldPercent.ToString("P", nfi)</th>

                        <th class="text-center">@CompanyWalkInLeadCount</th>
                        <th class="text-center">@CompanyWalkInLeadSoldCount</th>
                        <th class="text-center divider-column">@CompanyWalkInLeadSoldPercent.ToString("P", nfi)</th>

                        <th class="text-center">@CompanyInternetLeadCount</th>
                        <th class="text-center">@CompanyInternetEngagementPercent.ToString("P", nfi)</th>
                        <th class="text-center">@CompanyInternetAvgAdjustedResponseTime.ToString("C", nfi)</th>
                        <th class="text-center">@CompanyInternetLeadSoldCount</th>
                        <th class="text-center divider-column">@CompanyInternetLeadSoldPercent.ToString("P", nfi)</th>

                        <th class="text-center">@CompanyPhoneLeadCount</th>
                        <th class="text-center">@CompanyPhoneLeadSoldCount</th>
                        <th class="text-center divider-column">@CompanyPhoneLeadSoldPercent.ToString("P", nfi)</th>

                        <th class="text-center">@CompanyOtherLeadCount</th>
                        <th class="text-center">@CompanyOtherLeadSoldCount</th>
                        <th class="text-center divider-column">@CompanyOtherLeadSoldCount</th>
                    </tr>
                </tfoot>
            </table>*@

</div>

<script>
// @@preserve jQuery.floatThead 1.2.9 - http://mkoryak.github.io/floatThead/ - Copyright (c) 2012 - 2014 Misha Koryak
// @@license MIT
!function(a){function b(a,b,c){if(8==g){var d=j.width(),e=f.debounce(function(){var a=j.width();d!=a&&(d=a,c())},a);j.on(b,e)}else j.on(b,f.debounce(c,a))}function c(a){window.console&&window.console&&window.console.log&&window.console.log(a)}function d(){var b=a('<div style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%"></div>');a("body").append(b);var c=b.innerWidth(),d=a("div",b).innerWidth();return b.remove(),c-d}function e(a){if(a.dataTableSettings)for(var b=0;b<a.dataTableSettings.length;b++){var c=a.dataTableSettings[b].nTable;if(a[0]==c)return!0}return!1}a.floatThead=a.floatThead||{},a.floatThead.defaults={cellTag:null,headerCellSelector:"tr:first>th:visible",zIndex:1001,debounceResizeMs:10,useAbsolutePositioning:!0,scrollingTop:0,scrollingBottom:0,scrollContainer:function(){return a([])},getSizingRow:function(a){return a.find("tbody tr:visible:first>*")},floatTableClass:"floatThead-table",floatWrapperClass:"floatThead-wrapper",floatContainerClass:"floatThead-container",copyTableClass:!0,debug:!1};var f=window._,g=function(){for(var a=3,b=document.createElement("b"),c=b.all||[];a=1+a,b.innerHTML="<!--[if gt IE "+a+"]><i><![endif]-->",c[0];);return a>4?a:document.documentMode}(),h=null,i=function(){if(g)return!1;var b=a("<table><colgroup><col></colgroup><tbody><tr><td style='width:10px'></td></tbody></table>");a("body").append(b);var c=b.find("col").width();return b.remove(),0==c},j=a(window),k=0;a.fn.floatThead=function(l){if(l=l||{},!f&&(f=window._||a.floatThead._,!f))throw new Error("jquery.floatThead-slim.js requires underscore. You should use the non-lite version since you do not have underscore.");if(8>g)return this;if(null==h&&(h=i(),h&&(document.createElement("fthtr"),document.createElement("fthtd"),document.createElement("fthfoot"))),f.isString(l)){var m=l,n=this;return this.filter("table").each(function(){var b=a(this).data("floatThead-attached");if(b&&f.isFunction(b[m])){var c=b[m]();"undefined"!=typeof c&&(n=c)}}),n}var o=a.extend({},a.floatThead.defaults||{},l);return a.each(l,function(b){b in a.floatThead.defaults||!o.debug||c("jQuery.floatThead: used ["+b+"] key to init plugin, but that param is not an option for the plugin. Valid options are: "+f.keys(a.floatThead.defaults).join(", "))}),this.filter(":not(."+o.floatTableClass+")").each(function(){function c(a){return a+".fth-"+y+".floatTHead"}function i(){var b=0;A.find("tr:visible").each(function(){b+=a(this).outerHeight(!0)}),Z.outerHeight(b),$.outerHeight(b)}function l(){var a=z.outerWidth(),b=I.width()||a;if(X.width(b-F.vertical),O){var c=100*a/(b-F.vertical);S.css("width",c+"%")}else S.outerWidth(a)}function m(){C=(f.isFunction(o.scrollingTop)?o.scrollingTop(z):o.scrollingTop)||0,D=(f.isFunction(o.scrollingBottom)?o.scrollingBottom(z):o.scrollingBottom)||0}function n(){var b,c;if(V)b=U.find("col").length;else{var d;d=null==o.cellTag&&o.headerCellSelector?o.headerCellSelector:"tr:first>"+o.cellTag,c=A.find(d),b=0,c.each(function(){b+=parseInt(a(this).attr("colspan")||1,10)})}if(b!=H){H=b;for(var e=[],f=[],g=[],i=0;b>i;i++)e.push('<th class="floatThead-col"/>'),f.push("<col/>"),g.push("<fthtd style='display:table-cell;height:0;width:auto;'/>");f=f.join(""),e=e.join(""),h&&(g=g.join(""),W.html(g),bb=W.find("fthtd")),Z.html(e),$=Z.find("th"),V||U.html(f),_=U.find("col"),T.html(f),ab=T.find("col")}return b}function p(){if(!E){if(E=!0,J){var a=z.width(),b=Q.width();a>b&&z.css("minWidth",a)}z.css(db),S.css(db),S.append(A),B.before(Y),i()}}function q(){E&&(E=!1,J&&z.width(fb),Y.detach(),z.prepend(A),z.css(eb),S.css(eb))}function r(a){J!=a&&(J=a,X.css({position:J?"absolute":"fixed"}))}function s(a,b,c,d){return h?c:d?o.getSizingRow(a,b,c):b}function t(){var a,b=n();return function(){var c=s(z,_,bb,g);if(c.length==b&&b>0){if(!V)for(a=0;b>a;a++)_.eq(a).css("width","");q();var d=[];for(a=0;b>a;a++)d[a]=c.get(a).offsetWidth;for(a=0;b>a;a++)ab.eq(a).width(d[a]),_.eq(a).width(d[a]);p()}else S.append(A),z.css(eb),S.css(eb),i()}}function u(a){var b=I.css("border-"+a+"-width"),c=0;return b&&~b.indexOf("px")&&(c=parseInt(b,10)),c}function v(){var a,b=I.scrollTop(),c=0,d=L?K.outerHeight(!0):0,e=M?d:-d,f=X.height(),g=z.offset(),i=0;if(O){var k=I.offset();c=g.top-k.top+b,L&&M&&(c+=d),c-=u("top"),i=u("left")}else a=g.top-C-f+D+F.horizontal;var l=j.scrollTop(),m=j.scrollLeft(),n=I.scrollLeft();return b=I.scrollTop(),function(k){if("windowScroll"==k?(l=j.scrollTop(),m=j.scrollLeft()):"containerScroll"==k?(b=I.scrollTop(),n=I.scrollLeft()):"init"!=k&&(l=j.scrollTop(),m=j.scrollLeft(),b=I.scrollTop(),n=I.scrollLeft()),!h||!(0>l||0>m)){if(R)r("windowScrollDone"==k?!0:!1);else if("windowScrollDone"==k)return null;g=z.offset(),L&&M&&(g.top+=d);var o,s,t=z.outerHeight();if(O&&J){if(c>=b){var u=c-b;o=u>0?u:0}else o=P?0:b;s=i}else!O&&J?(l>a+t+e?o=t-f+e:g.top>l+C?(o=0,q()):(o=C+l-g.top+c+(M?d:0),p()),s=0):O&&!J?(c>b||b-c>t?(o=g.top-l,q()):(o=g.top+b-l-c,p()),s=g.left+n-m):O||J||(l>a+t+e?o=t+C-l+a+e:g.top>l+C?(o=g.top-l,p()):o=C,s=g.left-m);return{top:o,left:s}}}}function w(){var a=null,b=null,c=null;return function(d,e,f){null==d||a==d.top&&b==d.left||(X.css({top:d.top,left:d.left}),a=d.top,b=d.left),e&&l(),f&&i();var g=I.scrollLeft();J&&c==g||(X.scrollLeft(g),c=g)}}function x(){if(I.length){var a=I.width(),b=I.height(),c=z.height(),d=z.width(),e=d>a?G:0,f=c>b?G:0;F.horizontal=d>a-f?G:0,F.vertical=c>b-e?G:0}}var y=k,z=a(this);if(z.data("floatThead-attached"))return!0;if(!z.is("table"))throw new Error('jQuery.floatThead must be run on a table element. ex: $("table").floatThead();');var A=z.find("thead:first"),B=z.find("tbody:first");if(0==A.length)throw new Error("jQuery.floatThead must be run on a table that contains a <thead> element");var C,D,E=!1,F={vertical:0,horizontal:0},G=d(),H=0,I=o.scrollContainer(z)||a([]),J=o.useAbsolutePositioning;null==J&&(J=o.scrollContainer(z).length);var K=z.find("caption"),L=1==K.length;if(L)var M="top"===(K.css("caption-side")||K.attr("align")||"top");var N=a('<fthfoot style="display:table-footer-group;"/>'),O=I.length>0,P=!1,Q=a([]),R=9>=g&&!O&&J,S=a("<table/>"),T=a("<colgroup/>"),U=z.find("colgroup:first"),V=!0;0==U.length&&(U=a("<colgroup/>"),V=!1);var W=a('<fthrow style="display:table-row;height:0;"/>'),X=a('<div style="overflow: hidden;"></div>'),Y=a("<thead/>"),Z=a('<tr class="size-row"/>'),$=a([]),_=a([]),ab=a([]),bb=a([]);if(Y.append(Z),z.prepend(U),h&&(N.append(W),z.append(N)),S.append(T),X.append(S),o.copyTableClass&&S.attr("class",z.attr("class")),S.attr({cellpadding:z.attr("cellpadding"),cellspacing:z.attr("cellspacing"),border:z.attr("border")}),S.css({borderCollapse:z.css("borderCollapse"),border:z.css("border")}),S.addClass(o.floatTableClass).css("margin",0),J){var cb=function(a,b){var c=a.css("position"),d="relative"==c||"absolute"==c;if(!d||b){var e={paddingLeft:a.css("paddingLeft"),paddingRight:a.css("paddingRight")};X.css(e),a=a.wrap("<div class='"+o.floatWrapperClass+"' style='position: relative; clear:both;'></div>").parent(),P=!0}return a};O?(Q=cb(I,!0),Q.append(X)):(Q=cb(z),z.after(X))}else z.after(X);X.css({position:J?"absolute":"fixed",marginTop:0,top:J?0:"auto",zIndex:o.zIndex}),X.addClass(o.floatContainerClass),m();var db={"table-layout":"fixed"},eb={"table-layout":z.css("tableLayout")||"auto"},fb=z[0].style.width||"";x();var gb,hb=function(){(gb=t())()};hb();var ib=v(),jb=w();jb(ib("init"),!0);var kb=f.debounce(function(){jb(ib("windowScrollDone"),!1)},300),lb=function(){jb(ib("windowScroll"),!1),kb()},mb=function(){jb(ib("containerScroll"),!1)},nb=function(){m(),x(),hb(),ib=v(),(jb=w())(ib("resize"),!0,!0)},ob=f.debounce(function(){x(),m(),hb(),ib=v(),jb(ib("reflow"),!0)},1);O?J?I.on(c("scroll"),mb):(I.on(c("scroll"),mb),j.on(c("scroll"),lb)):j.on(c("scroll"),lb),j.on(c("load"),ob),b(o.debounceResizeMs,c("resize"),nb),z.on("reflow",ob),e(z)&&z.on("filter",ob).on("sort",ob).on("page",ob),z.data("floatThead-attached",{destroy:function(){var a=".fth-"+y;q(),z.css(eb),U.remove(),h&&N.remove(),Y.parent().length&&Y.replaceWith(A),z.off("reflow"),I.off(a),P&&(I.length?I.unwrap():z.unwrap()),J&&z.css("minWidth",""),X.remove(),z.data("floatThead-attached",!1),j.off(a)},reflow:function(){ob()},setHeaderHeight:function(){i()},getFloatContainer:function(){return X},getRowGroups:function(){return E?X.find("thead").add(z.find("tbody,tfoot")):z.find("thead,tbody,tfoot")}}),k++}),this}}(jQuery),function(a){a.floatThead=a.floatThead||{},a.floatThead._=window._||function(){var b={},c=Object.prototype.hasOwnProperty,d=["Arguments","Function","String","Number","Date","RegExp"];return b.has=function(a,b){return c.call(a,b)},b.keys=function(a){if(a!==Object(a))throw new TypeError("Invalid object");var c=[];for(var d in a)b.has(a,d)&&c.push(d);return c},a.each(d,function(){var a=this;b["is"+a]=function(b){return Object.prototype.toString.call(b)=="[object "+a+"]"}}),b.debounce=function(a,b,c){var d,e,f,g,h;return function(){f=this,e=arguments,g=new Date;var i=function(){var j=new Date-g;b>j?d=setTimeout(i,b-j):(d=null,c||(h=a.apply(f,e)))},j=c&&!d;return d||(d=setTimeout(i,b)),j&&(h=a.apply(f,e)),h}},b}()}(jQuery);



$(document).ready(function(){

$(".sticky-header").floatThead({scrollingTop:70});

});
    </script>