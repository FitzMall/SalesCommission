@model SalesCommission.Models.AppraisalReportModel

@{ 
    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.PercentPositivePattern = 1;
    nfi.CurrencySymbol = "";

    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }


}

<style type="text/css">
    .indent-2{        
        padding-left:10px;
    }
    .indent-3{
        padding-left:20px;
    }
    .indent-4{
        padding-left:30px;
    }
    table.floatThead-table {
        font-size:12px;
    }

    .indent-td2{
        display: block;
        margin-left: 10px;
        margin-right: -2px;
    }
    .indent-td3{
        display: block;
        margin-left: 20px;
        margin-right: -2px;
    }
    .indent-td4{
        display: block;
        margin-left: 30px;
        margin-right: -2px;
    }
    .breakdown-column{
        width:250px;
    }
</style>

<div class="col-sm-12" id="location-associate">
    <h4>Appraisal Report Results for @Model.ReportStartMonth/@Model.ReportStartYear to @Model.ReportEndMonth/@Model.ReportEndYear</h4>

    <table class="table table-bordered" style="font-size:12px">
            <thead>

                <tr style="background-color:#d9edf7;">
                    <th class="text-center breakdown-column">Company Totals</th>
                    <th class="text-center">Total Inv</th>
                    <th class="text-center">Avg Est Recon Cost</th>
                    <th class="text-center">Avg Actual Recon</th>
                    <th class="text-center">Avg Appraised Value</th>
                    <th class="text-center">Avg Asking Price</th>
                    @*<th class="text-center">Adj % Market</th>*@
                    <th class="text-center">Avg Profit Obj</th>
              
                </tr>

            </thead>
            <tbody>

                @{ 
                    var TotalCount = Model.TradeAcquisitionDetails.Count;

                    var Day30Count = 0;
                    var Day3060Count = 0;
                    var Day6090Count = 0;
                    var Day90Count = 0;

                    foreach (var detail in Model.TradeAcquisitionDetails)
                    }
                    if (Model.TradeAcquisitionDetails.Count > 0)
                    {


                    }
                }

                <tr>
                    <td class="text-center"></td>
                    <td class="text-center">@Model.TradeAcquisitionDetails.Count</td>
                    <td class="text-center">@avgReconCost.ToString("C", nfi)</td>
                    <td class="text-center">@avgActualReconCost.ToString("C",nfi)</td>
                    <td class="text-center">@avgAppraisedValue.ToString("C",nfi)</td>
                    <td class="text-center">@avgAskingPrice.ToString("C", nfi)</td>
                    @*<td class="text-center">@avgAdjMarket.ToString("P", nfi)</td>*@
                    <td class="text-center">@TotalCount</td>
                </tr>
                

            </tbody>
            <tfoot>
                <tr style="background-color:#d9edf7;">
                </tr>

            </tfoot>
        </table>
    <table class="table table-bordered sticky-header" style="font-size:12px; border-left: none;">
        <thead>
            <tr style="background-color:#d9edf7;">
                <th class="text-center">Breakdown</th>
                <th class="text-center">Total Inv</th>
                <th class="text-center">Avg Est Recon Cost</th>
                <th class="text-center">Avg Actual Recon</th>
                <th class="text-center">Avg Appraised Value</th>
                <th class="text-center">Avg Asking Price</th>
                @*<th class="text-center">Adj % Market</th>*@
                <th class="text-center">Avg Profit Obj</th>
            </tr>

        </thead>
        <tbody>

    @if (Model.TradeAcquisitionDetails != null)
    {

        var breakdownLevel1Values = new List<string>();


        switch (Model.BreakDownLevel1)
        {
            case "appraiser":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.AppraisalAppraiser).Distinct().OrderBy(x => x).ToList();
                break;

            case "location":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.DRloc).Distinct().OrderBy(x => x).ToList();
                break;

            case "vehiclesource":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.VehicleSource).Distinct().OrderBy(x => x).ToList();
                break;

            case "make":
                //breakdownLevel1Values = Model.AppraisalSoldDetails.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Where(x => !x.Make.Contains("Used")).Select(x => x.Make).Distinct().OrderBy(x => x).ToList();
                break;

            case "lead":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                break;

            case "status":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.Status.ToString()).Distinct().OrderBy(x => x).ToList();
                break;

            case "model":
                breakdownLevel1Values = Model.TradeAcquisitionDetails.Select(x => x.Carline).Distinct().OrderBy(x => x).ToList();
                break;

            case "monthyear":
                var monthYears = Model.TradeAcquisitionDetails.Select(x => x.LastModifiedDate.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                breakdownLevel1Values = monthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                break;


            default:
                // breakdownLevel1Values = Model.AssociateLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                break;
        }

        var breakdown1Index = 0;
        var breakdown2Index = 0;
        var BreakDown3Index = 0;
        var BreakDown4Index = 0;

        foreach (var breakdown1 in breakdownLevel1Values)
        {
            var label1 = breakdown1;

            var BreakDown1filteredLeads = new List<SalesCommission.Models.TradeAcquisitionDetail>();

            switch (Model.BreakDownLevel1)
            {
                case "appraiser":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.AppraisalAppraiser == breakdown1);
                    break;

                case "location":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.DRloc == breakdown1);

                    foreach (var store in SalesCommission.Business.Enums.AppraisalLocations)
                    {
                        if (store.LocationId.ToLower().Trim() == breakdown1.ToLower().Trim())
                        {
                            label1 = store.Name;
                        }
                    }

                    break;

                case "vehiclesource":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.VehicleSource == breakdown1);
                    break;

                case "lead":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.LeadSourceName == breakdown1);
                    break;

                case "status":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.Status.ToString() == breakdown1);

                    foreach (var status in SalesCommission.Business.Enums.VehicleStatuses)
                    {
                        if (status.StatusId.ToLower().Trim() == breakdown1.ToLower().Trim())
                        {
                            label1 = status.Name;
                        }
                    }
                    break;

                case "make":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.Make.Contains(breakdown1));
                    break;

                case "model":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.Carline == breakdown1);
                    break;

                case "monthyear":
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.LastModifiedDate.ToString("MM/yyyy") == breakdown1);
                    var dealDate = Convert.ToDateTime(breakdown1);
                    label1 = dealDate.Month + "/" + dealDate.Year;

                    break;

                default:
                    BreakDown1filteredLeads = Model.TradeAcquisitionDetails.FindAll(x => x.Loc == breakdown1);
                    break;
            }

            decimal BD1TotalReconCost = 0;
            decimal BD1TotalAppraisedValue = 0;
            decimal BD1TotalAskingPrice = 0;
            decimal BD1TotalProfitObj = 0;

            decimal BD1TotalAdjMarket = 0;
            decimal BD1AppraisalCount = BreakDown1filteredLeads.Count;

            decimal BD1TotalActualReconCost = 0;


            decimal BD1AvgReconCost = 0;
            decimal BD1AvgAppraisedValue = 0;
            decimal BD1AvgAskingPrice = 0;
            decimal BD1AvgProfitObj = 0;

            decimal BD1AvgActualReconCost = 0;
            decimal BD1AvgAdjMarket = 0;

            foreach (var detail in BreakDown1filteredLeads)
            {
                BD1TotalReconCost += detail.ReconditioningCost;
                BD1TotalAppraisedValue += detail.AppraisedValue;
                BD1TotalProfitObj += detail.ProfitObjective;
                BD1TotalAskingPrice += detail.AskingPrice;
                BD1TotalAdjMarket += detail.AdjustedPctMarket;

                BD1TotalActualReconCost += detail.ActualReconditioningCost;

            }

            if (BD1AppraisalCount > 0)
            {
                BD1AvgReconCost = (BD1TotalReconCost / BD1AppraisalCount);
                BD1AvgAdjMarket = (BD1TotalAdjMarket / BD1AppraisalCount);
                BD1AvgActualReconCost = (BD1TotalActualReconCost / BD1AppraisalCount);
                BD1AvgAppraisedValue = (BD1TotalAppraisedValue / BD1AppraisalCount);
                BD1AvgAskingPrice = (BD1TotalAskingPrice / BD1AppraisalCount);
                BD1AvgProfitObj = (BD1TotalProfitObj / BD1AppraisalCount);

            }

            var bd1URL = applicationPath + "/Reports/AppraisalReportInvDetails/" + "?startmonth=" + Model.ReportStartMonth.ToString() + "&startyear=" + Model.ReportStartYear.ToString() + "&endmonth=" + Model.ReportEndMonth.ToString() + "&endyear=" + Model.ReportEndYear.ToString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + "&bd3=" + "&bd4=" + "&vt=" + Model.VehicleType + "&at=" + Model.AcquisitionType;

            <tr class="location-bd1-data-row-@breakdown1Index @label1.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd1-collapse-@breakdown1Index">
                <td class="breakdown-column"><a data-toggle="collapse" id="location-bd1-collapse-@breakdown1Index" style="cursor: pointer;" class="location-bd1-collapse-@breakdown1Index-href collapsed" data-target=".location-bd1-collapse-@breakdown1Index">@label1 </a></td>
                <td class="text-center"><a href="@bd1URL" target="_blank">@BD1AppraisalCount</a></td>
                <td class="text-center">@BD1AvgReconCost.ToString("C", nfi)</td>
                <td class="text-center">@BD1AvgActualReconCost.ToString("C", nfi)</td>
                <td class="text-center">@BD1AvgAppraisedValue.ToString("C", nfi)</td>
                <td class="text-center">@BD1AvgAskingPrice.ToString("C", nfi)</td>
                @*<td class="text-center">@BD1AvgAdjMarket.ToString("P", nfi)</td>*@
                <td class="text-center">@BD1AvgProfitObj.ToString("C", nfi)</td>

            </tr>


                            <script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd1-collapse-@breakdown1Index-href").click(function () {
                                        $('.location-bd1-data-row-@breakdown1Index').toggleClass('selected-row');
                                        $(".location-bd1-collapse-@breakdown1Index-href").toggleClass('changed');
                                    });
                                });
                            </script>

            var breakdownLevel2Values = new List<string>();

            switch (Model.BreakDownLevel2)
            {
                case "appraiser":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.AppraisalAppraiser).Distinct().OrderBy(x => x).ToList();
                    break;

                case "location":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DRloc).Distinct().OrderBy(x => x).ToList();
                    break;

                case "vehiclesource":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.VehicleSource).Distinct().OrderBy(x => x).ToList();
                    break;

                case "make":
                    //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                    breakdownLevel2Values = BreakDown1filteredLeads.Where(x => !x.Make.Contains("Used")).Select(x => x.Make).Distinct().OrderBy(x => x).ToList();

                    break;

                case "model":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.Carline).Distinct().OrderBy(x => x).ToList();
                    break;

                case "lead":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                    break;

                case "status":
                    breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.Status.ToString()).Distinct().OrderBy(x => x).ToList();
                    break;

                case "monthyear":
                    var monthYears = BreakDown1filteredLeads.Select(x => x.LastModifiedDate.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                    breakdownLevel2Values = monthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                    //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.LastModifiedDate.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                    break;

                default:
                    //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                    break;
            }

            foreach (var breakdown2 in breakdownLevel2Values)
            {

                var label2 = breakdown2;

                var BreakDown2filteredLeads = new List<SalesCommission.Models.TradeAcquisitionDetail>();

                switch (Model.BreakDownLevel2)
                {

                    case "appraiser":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.AppraisalAppraiser == breakdown2);
                        break;

                    case "location":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.DRloc == breakdown2);

                        foreach (var store in SalesCommission.Business.Enums.AppraisalLocations)
                        {
                            if (store.LocationId.ToLower().Trim() == breakdown2.ToLower().Trim())
                            {
                                label2 = store.Name;
                            }
                        }

                        break;

                    case "vehiclesource":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.VehicleSource == breakdown2);
                        break;

                    case "make":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Make.Contains(breakdown2));
                        break;

                    case "model":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Carline == breakdown2);
                        break;

                    case "lead":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LeadSourceName == breakdown2);
                        break;

                    case "status":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Status.ToString() == breakdown2);

                        foreach (var status in SalesCommission.Business.Enums.VehicleStatuses)
                        {
                            if (status.StatusId.ToLower().Trim() == breakdown2.ToLower().Trim())
                            {
                                label2 = status.Name;
                            }
                        }

                        break;

                        


                    case "monthyear":
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.LastModifiedDate.ToString("MM/yyyy") == breakdown2);
                        var dealDate = Convert.ToDateTime(breakdown2);
                        label2 = dealDate.Month + "/" + dealDate.Year;
                        break;

                    default:
                        BreakDown2filteredLeads = BreakDown1filteredLeads.FindAll(x => x.Loc == breakdown2);
                        break;

                }

                decimal BD2TotalReconCost = 0;
                decimal BD2TotalAppraisedValue = 0;
                decimal BD2TotalAskingPrice = 0;
                decimal BD2TotalProfitObj = 0;

                decimal BD2TotalAdjMarket = 0;

                decimal BD2AppraisalCount = BreakDown2filteredLeads.Count;

                decimal BD2TotalActualReconCost = 0;


                decimal BD2AvgReconCost = 0;
                decimal BD2AvgAppraisedValue = 0;
                decimal BD2AvgAskingPrice = 0;
                decimal BD2AvgProfitObj = 0;

                decimal BD2AvgActualReconCost = 0;

                decimal BD2AvgAdjMarket = 0;

                foreach (var detail in BreakDown2filteredLeads)
                {
                    BD2TotalReconCost += detail.ReconditioningCost;
                    BD2TotalAppraisedValue += detail.AppraisedValue;
                    BD2TotalProfitObj += detail.ProfitObjective;
                    BD2TotalAskingPrice += detail.AskingPrice;
                    BD2TotalAdjMarket += detail.AdjustedPctMarket;

                    BD2TotalActualReconCost += detail.ActualReconditioningCost;

                }

                if (BD2AppraisalCount > 0)
                {
                    BD2AvgReconCost = (BD2TotalReconCost / BD2AppraisalCount);
                    BD2AvgAdjMarket = (BD2TotalAdjMarket / BD2AppraisalCount);
                    BD2AvgActualReconCost = (BD2TotalActualReconCost / BD2AppraisalCount);
                    BD2AvgAppraisedValue = (BD2TotalAppraisedValue / BD2AppraisalCount);
                    BD2AvgAskingPrice = (BD2TotalAskingPrice / BD2AppraisalCount);
                    BD2AvgProfitObj = (BD2TotalProfitObj / BD2AppraisalCount);

                }


                var bd2URL = applicationPath + "/Reports/AppraisalReportInvDetails/" + "?startmonth=" + Model.ReportStartMonth.ToString() + "&startyear=" + Model.ReportStartYear.ToString() + "&endmonth=" + Model.ReportEndMonth.ToString() + "&endyear=" + Model.ReportEndYear.ToString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + Model.BreakDownLevel2 + "," + breakdown2 + "&bd3=" + "&bd4=" + "&vt=" + Model.VehicleType + "&at=" + Model.AcquisitionType;

                <tr class="location-bd1-collapse-@breakdown1Index collapse out location-bd2-data-row-@breakdown2Index @label2.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd2-collapse-@breakdown2Index">

                    <td class="indent-td2"><a data-toggle="collapse" id="location-bd2-collapse-@breakdown2Index" style="cursor: pointer;" class="location-bd2-collapse-@breakdown2Index-href collapsed indent-2" data-target=".location-bd2-collapse-@breakdown2Index">@label2 </a></td>
                    <td class="text-center"><a href="@bd2URL" target="_blank">@BD2AppraisalCount</a></td>
                    <td class="text-center">@BD2AvgReconCost.ToString("C", nfi)</td>
                    <td class="text-center">@BD2AvgActualReconCost.ToString("C", nfi)</td>
                    <td class="text-center">@BD2AvgAppraisedValue.ToString("C", nfi)</td>
                    <td class="text-center">@BD2AvgAskingPrice.ToString("C", nfi)</td>
                    @*<td class="text-center">@BD2AvgAdjMarket.ToString("P", nfi)</td>*@
                    <td class="text-center">@BD2AvgProfitObj.ToString("C", nfi)</td>
                </tr>

                                <script type="text/javascript">

                                    $(document).ready(function () {
                                        $(".location-bd2-collapse-@breakdown2Index-href").click(function () {
                                            $('.location-bd2-data-row-@breakdown2Index').toggleClass('selected-row');
                                            $(".location-bd2-collapse-@breakdown2Index-href").toggleClass('changed');
                                        });
                                    });
                                </script>

                var breakdownLevel3Values = new List<string>();

                switch (Model.BreakDownLevel3)
                {
                    case "appraiser":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.AppraisalAppraiser).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "location":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.DRloc).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "vehiclesource":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.VehicleSource).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "make":
                        //breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                        breakdownLevel3Values = BreakDown2filteredLeads.Where(x => !x.Make.Contains("Used")).Select(x => x.Make).Distinct().OrderBy(x => x).ToList();

                        break;

                    case "model":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.Carline).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "lead":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "status":
                        breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.Status.ToString()).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "monthyear":
                        var monthYears = BreakDown2filteredLeads.Select(x => x.LastModifiedDate.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                        breakdownLevel3Values = monthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                        //breakdownLevel3Values = BreakDown2filteredLeads.Select(x => x.LastModifiedDate.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                        break;

                    default:
                        //breakdownLevel2Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                        break;
                }

                foreach (var BreakDown3 in breakdownLevel3Values)
                {
                    var label3 = BreakDown3;
                    var BreakDown3filteredLeads = new List<SalesCommission.Models.TradeAcquisitionDetail>();

                    switch (Model.BreakDownLevel3)
                    {
                        case "appraiser":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.AppraisalAppraiser == BreakDown3);
                            break;

                        case "location":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.DRloc == BreakDown3);

                            foreach (var store in SalesCommission.Business.Enums.AppraisalLocations)
                            {
                                if (store.LocationId.ToLower().Trim() == BreakDown3.ToLower().Trim())
                                {
                                    label3 = store.Name;
                                }
                            }

                            break;

                        case "vehiclesource":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.VehicleSource == BreakDown3);
                            break;

                        case "make":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Make.Contains(BreakDown3));
                            break;

                        case "model":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Carline == BreakDown3);
                            break;

                        case "lead":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LeadSourceName == BreakDown3);
                            break;

                        case "status":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Status.ToString() == BreakDown3);

                            foreach (var status in SalesCommission.Business.Enums.VehicleStatuses)
                            {
                                if (status.StatusId.ToLower().Trim() == BreakDown3.ToLower().Trim())
                                {
                                    label3 = status.Name;
                                }
                            }
                            break;


                        case "monthyear":
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.LastModifiedDate.ToString("MM/yyyy") == BreakDown3);
                            var dealDate = Convert.ToDateTime(BreakDown3);
                            label3 = dealDate.Month + "/" + dealDate.Year;
                            break;

                        default:
                            BreakDown3filteredLeads = BreakDown2filteredLeads.FindAll(x => x.Loc == BreakDown3);
                            break;

                    }

                    decimal BD3TotalReconCost = 0;
                    decimal BD3TotalAppraisedValue = 0;
                    decimal BD3TotalAskingPrice = 0;
                    decimal BD3TotalProfitObj = 0;
                    decimal BD3TotalAdjMarket = 0;

                    decimal BD3AppraisalCount = BreakDown3filteredLeads.Count;

                    decimal BD3TotalActualReconCost = 0;

                    decimal BD3AvgProfitObj = 0;

                    decimal BD3AvgReconCost = 0;
                    decimal BD3AvgAppraisedValue = 0;
                    decimal BD3AvgAskingPrice = 0;
                    decimal BD3AvgActualReconCost = 0;

                    decimal BD3AvgAdjMarket = 0;

                    foreach (var detail in BreakDown3filteredLeads)
                    {
                        BD3TotalReconCost += detail.ReconditioningCost;
                        BD3TotalAppraisedValue += detail.AppraisedValue;
                        BD3TotalProfitObj += detail.ProfitObjective;
                        BD3TotalAskingPrice += detail.AskingPrice;
                        BD3TotalAdjMarket += detail.AdjustedPctMarket;

                        BD3TotalActualReconCost += detail.ActualReconditioningCost;

                    }

                    if (BD3AppraisalCount > 0)
                    {
                        BD3AvgReconCost = (BD3TotalReconCost / BD3AppraisalCount);
                        BD3AvgAdjMarket = (BD3TotalAdjMarket / BD3AppraisalCount);
                        BD3AvgActualReconCost = (BD3TotalActualReconCost / BD3AppraisalCount);
                        BD3AvgAppraisedValue = (BD3TotalAppraisedValue / BD3AppraisalCount);
                        BD3AvgAskingPrice = (BD3TotalAskingPrice / BD3AppraisalCount);
                        BD3AvgProfitObj = (BD3TotalProfitObj / BD3AppraisalCount);

                    }


                    var bd3URL = applicationPath + "/Reports/AppraisalReportInvDetails/" + "?startmonth=" + Model.ReportStartMonth.ToString() + "&startyear=" + Model.ReportStartYear.ToString() + "&endmonth=" + Model.ReportEndMonth.ToString() + "&endyear=" + Model.ReportEndYear.ToString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + Model.BreakDownLevel2 + "," + breakdown2 + "&bd3=" + Model.BreakDownLevel3 + "," + BreakDown3 + "&bd4=" + "&vt=" + Model.VehicleType + "&at=" + Model.AcquisitionType;

                    <tr class="location-bd2-collapse-@breakdown2Index collapse out location-bd3-data-row-@BreakDown3Index @label3.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd3-collapse-@BreakDown3Index">

                        <td class="divider-column indent-td3"><a data-toggle="collapse" id="location-bd3-collapse-@BreakDown3Index" style="cursor: pointer;" class="location-bd3-collapse-@BreakDown3Index-href collapsed indent-3" data-target=".location-bd3-collapse-@BreakDown3Index">@label3 </a></td>
                        <td class="text-center"><a href="@bd3URL" target="_blank">@BD3AppraisalCount</a></td>
                        <td class="text-center">@BD3AvgReconCost.ToString("C", nfi)</td>
                        <td class="text-center">@BD3AvgActualReconCost.ToString("C", nfi)</td>
                        <td class="text-center">@BD3AvgAppraisedValue.ToString("C", nfi)</td>
                        <td class="text-center">@BD3AvgAskingPrice.ToString("C", nfi)</td>
                        @*<td class="text-center">@BD3AvgAdjMarket.ToString("P", nfi)</td>*@
                        <td class="text-center">@BD3AvgProfitObj.ToString("C", nfi)</td>

                    
                    </tr>

                    <script type="text/javascript">

                                        $(document).ready(function () {
                                            $(".location-bd3-collapse-@BreakDown3Index-href").click(function () {
                                                $('.location-bd3-data-row-@BreakDown3Index').toggleClass('selected-row');
                                                $(".location-bd3-collapse-@BreakDown3Index-href").toggleClass('changed');
                });
            });
                    </script>

                    var breakdownLevel4Values = new List<string>();

                    switch (Model.BreakDownLevel4)
                    {
                        case "appraiser":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.AppraisalAppraiser).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "location":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.DRloc).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "vehiclesource":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.VehicleSource).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "make":
                            //breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                            breakdownLevel4Values = BreakDown3filteredLeads.Where(x => !x.Make.Contains("Used")).Select(x => x.Make).Distinct().OrderBy(x => x).ToList();

                            break;

                        case "model":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Carline).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "lead":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LeadSourceName).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "status":
                            breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.Status.ToString()).Distinct().OrderBy(x => x).ToList();
                            break;

                        case "monthyear":
                            var monthYears = BreakDown3filteredLeads.Select(x => x.ReceivedDate.ToString("MM/yyyy")).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            breakdownLevel4Values = monthYears.Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            //breakdownLevel4Values = BreakDown3filteredLeads.Select(x => x.LastModifiedDate.ToShortDateString()).Distinct().OrderBy(x => Convert.ToDateTime(x)).ToList();
                            break;

                        default:
                            //breakdownLevel3Values = BreakDown1filteredLeads.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                            break;
                    }

                    foreach (var BreakDown4 in breakdownLevel4Values)
                    {
                        var label4 = BreakDown4;
                        var BreakDown4filteredLeads = new List<SalesCommission.Models.TradeAcquisitionDetail>();

                        switch (Model.BreakDownLevel4)
                        {
                            case "appraiser":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.AppraisalAppraiser == BreakDown4);
                                break;

                            case "location":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.DRloc == BreakDown4);

                                foreach (var store in SalesCommission.Business.Enums.AppraisalLocations)
                                {
                                    if (store.LocationId.ToLower().Trim() == BreakDown4.ToLower().Trim())
                                    {
                                        label4 = store.Name;
                                    }
                                }

                                break;

                            case "vehiclesource":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.VehicleSource == BreakDown4);
                                break;

                            case "make":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Make.Contains(BreakDown4));
                                break;

                            case "model":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Carline == BreakDown4);
                                break;

                            case "lead":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LeadSourceName == BreakDown4);
                                break;

                            case "status":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Status.ToString() == BreakDown4);

                                foreach (var status in SalesCommission.Business.Enums.VehicleStatuses)
                                {
                                    if (status.StatusId.ToLower().Trim() == BreakDown4.ToLower().Trim())
                                    {
                                        label4 = status.Name;
                                    }
                                }
                                break;

                            case "monthyear":
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.LastModifiedDate.ToString("MM/yyyy") == BreakDown4);
                                var dealDate = Convert.ToDateTime(BreakDown4);
                                label4 = dealDate.Month + "/" + dealDate.Year;
                                break;

                            default:
                                BreakDown4filteredLeads = BreakDown3filteredLeads.FindAll(x => x.Loc == BreakDown4);
                                break;

                        }

                        decimal BD4TotalReconCost = 0;
                        decimal BD4TotalAppraisedValue = 0;
                        decimal BD4TotalAskingPrice = 0;
                        decimal BD4TotalProfitObj = 0;

                        decimal BD4TotalAdjMarket = 0;

                        decimal BD4AppraisalCount = BreakDown4filteredLeads.Count;

                        decimal BD4TotalActualReconCost = 0;


                        decimal BD4AvgReconCost = 0;
                        decimal BD4AvgAppraisedValue = 0;
                        decimal BD4AvgAskingPrice = 0;
                        decimal BD4AvgProfitObj = 0;

                        decimal BD4AvgActualReconCost = 0;

                        decimal BD4AvgAdjMarket = 0;

                        foreach (var detail in BreakDown4filteredLeads)
                        {
                            BD4TotalReconCost += detail.ReconditioningCost;
                            BD4TotalAppraisedValue += detail.AppraisedValue;
                            BD4TotalProfitObj += detail.ProfitObjective;
                            BD4TotalAskingPrice += detail.AskingPrice;
                            BD4TotalAdjMarket += detail.AdjustedPctMarket;

                            BD4TotalActualReconCost += detail.ActualReconditioningCost;

                        }

                        if (BD4AppraisalCount > 0)
                        {
                            BD4AvgReconCost = (BD4TotalReconCost / BD4AppraisalCount);
                            BD4AvgAdjMarket = (BD4TotalAdjMarket / BD4AppraisalCount);
                            BD4AvgActualReconCost = (BD4TotalActualReconCost / BD4AppraisalCount);
                            BD4AvgAppraisedValue = (BD4TotalAppraisedValue / BD4AppraisalCount);
                            BD4AvgAskingPrice = (BD4TotalAskingPrice / BD4AppraisalCount);
                            BD4AvgProfitObj = (BD4TotalProfitObj / BD4AppraisalCount);

                        }


                        var bd4URL = applicationPath + "/Reports/AppraisalReportInvDetails/" + "?startmonth=" + Model.ReportStartMonth.ToString() + "&startyear=" + Model.ReportStartYear.ToString() + "&endmonth=" + Model.ReportEndMonth.ToString() + "&endyear=" + Model.ReportEndYear.ToString() + "&bd1=" + Model.BreakDownLevel1 + "," + breakdown1 + "&bd2=" + Model.BreakDownLevel2 + "," + breakdown2 + "&bd3=" + Model.BreakDownLevel3 + "," + BreakDown3 + "&bd4=" + Model.BreakDownLevel4 + "," + BreakDown4 + "&vt=" + Model.VehicleType + "&at=" + Model.AcquisitionType;

                        <tr class="location-bd3-collapse-@BreakDown3Index collapse out location-bd4-data-row-@BreakDown4Index @label4.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd4-collapse-@BreakDown4Index">

                            <td class="divider-column indent-td4"><a data-toggle="collapse" id="location-bd4-collapse-@BreakDown4Index" style="cursor: pointer;" class="location-bd4-collapse-@BreakDown4Index-href collapsed indent-4" data-target=".location-bd4-collapse-@BreakDown4Index">@label4 </a></td>
                            <td class="text-center"><a href="@bd4URL" target="_blank">@BD4AppraisalCount</a></td>
                            <td class="text-center">@BD4AvgReconCost.ToString("C", nfi)</td>
                            <td class="text-center">@BD4AvgActualReconCost.ToString("C", nfi)</td>
                            <td class="text-center">@BD4AvgAppraisedValue.ToString("C", nfi)</td>
                            <td class="text-center">@BD4AvgAskingPrice.ToString("C", nfi)</td>
                            @*<td class="text-center">@BD4AvgAdjMarket.ToString("P", nfi)</td>*@
                            <td class="text-center">@BD4AvgProfitObj.ToString("C", nfi)</td>

                        </tr>

                        <script type="text/javascript">

                                        $(document).ready(function () {
                                            $(".location-bd4-collapse-@BreakDown4Index-href").click(function () {
                                                $('.location-bd4-data-row-@BreakDown4Index').toggleClass('selected-row');
                                                $(".location-bd4-collapse-@BreakDown4Index-href").toggleClass('changed');
                });
            });
                        </script>




                        BreakDown4Index += 1;
                    }



                    BreakDown3Index += 1;
                }




                breakdown2Index += 1;

            }

            breakdown1Index += 1;
        }


    }


        </tbody>
        <tfoot></tfoot>
        </table>


</div>

<script>
// @@preserve jQuery.floatThead 1.2.9 - http://mkoryak.github.io/floatThead/ - Copyright (c) 2012 - 2014 Misha Koryak
// @@license MIT
!function(a){function b(a,b,c){if(8==g){var d=j.width(),e=f.debounce(function(){var a=j.width();d!=a&&(d=a,c())},a);j.on(b,e)}else j.on(b,f.debounce(c,a))}function c(a){window.console&&window.console&&window.console.log&&window.console.log(a)}function d(){var b=a('<div style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%"></div>');a("body").append(b);var c=b.innerWidth(),d=a("div",b).innerWidth();return b.remove(),c-d}function e(a){if(a.dataTableSettings)for(var b=0;b<a.dataTableSettings.length;b++){var c=a.dataTableSettings[b].nTable;if(a[0]==c)return!0}return!1}a.floatThead=a.floatThead||{},a.floatThead.defaults={cellTag:null,headerCellSelector:"tr:first>th:visible",zIndex:1001,debounceResizeMs:10,useAbsolutePositioning:!0,scrollingTop:0,scrollingBottom:0,scrollContainer:function(){return a([])},getSizingRow:function(a){return a.find("tbody tr:visible:first>*")},floatTableClass:"floatThead-table",floatWrapperClass:"floatThead-wrapper",floatContainerClass:"floatThead-container",copyTableClass:!0,debug:!1};var f=window._,g=function(){for(var a=3,b=document.createElement("b"),c=b.all||[];a=1+a,b.innerHTML="<!--[if gt IE "+a+"]><i><![endif]-->",c[0];);return a>4?a:document.documentMode}(),h=null,i=function(){if(g)return!1;var b=a("<table><colgroup><col></colgroup><tbody><tr><td style='width:10px'></td></tbody></table>");a("body").append(b);var c=b.find("col").width();return b.remove(),0==c},j=a(window),k=0;a.fn.floatThead=function(l){if(l=l||{},!f&&(f=window._||a.floatThead._,!f))throw new Error("jquery.floatThead-slim.js requires underscore. You should use the non-lite version since you do not have underscore.");if(8>g)return this;if(null==h&&(h=i(),h&&(document.createElement("fthtr"),document.createElement("fthtd"),document.createElement("fthfoot"))),f.isString(l)){var m=l,n=this;return this.filter("table").each(function(){var b=a(this).data("floatThead-attached");if(b&&f.isFunction(b[m])){var c=b[m]();"undefined"!=typeof c&&(n=c)}}),n}var o=a.extend({},a.floatThead.defaults||{},l);return a.each(l,function(b){b in a.floatThead.defaults||!o.debug||c("jQuery.floatThead: used ["+b+"] key to init plugin, but that param is not an option for the plugin. Valid options are: "+f.keys(a.floatThead.defaults).join(", "))}),this.filter(":not(."+o.floatTableClass+")").each(function(){function c(a){return a+".fth-"+y+".floatTHead"}function i(){var b=0;A.find("tr:visible").each(function(){b+=a(this).outerHeight(!0)}),Z.outerHeight(b),$.outerHeight(b)}function l(){var a=z.outerWidth(),b=I.width()||a;if(X.width(b-F.vertical),O){var c=100*a/(b-F.vertical);S.css("width",c+"%")}else S.outerWidth(a)}function m(){C=(f.isFunction(o.scrollingTop)?o.scrollingTop(z):o.scrollingTop)||0,D=(f.isFunction(o.scrollingBottom)?o.scrollingBottom(z):o.scrollingBottom)||0}function n(){var b,c;if(V)b=U.find("col").length;else{var d;d=null==o.cellTag&&o.headerCellSelector?o.headerCellSelector:"tr:first>"+o.cellTag,c=A.find(d),b=0,c.each(function(){b+=parseInt(a(this).attr("colspan")||1,10)})}if(b!=H){H=b;for(var e=[],f=[],g=[],i=0;b>i;i++)e.push('<th class="floatThead-col"/>'),f.push("<col/>"),g.push("<fthtd style='display:table-cell;height:0;width:auto;'/>");f=f.join(""),e=e.join(""),h&&(g=g.join(""),W.html(g),bb=W.find("fthtd")),Z.html(e),$=Z.find("th"),V||U.html(f),_=U.find("col"),T.html(f),ab=T.find("col")}return b}function p(){if(!E){if(E=!0,J){var a=z.width(),b=Q.width();a>b&&z.css("minWidth",a)}z.css(db),S.css(db),S.append(A),B.before(Y),i()}}function q(){E&&(E=!1,J&&z.width(fb),Y.detach(),z.prepend(A),z.css(eb),S.css(eb))}function r(a){J!=a&&(J=a,X.css({position:J?"absolute":"fixed"}))}function s(a,b,c,d){return h?c:d?o.getSizingRow(a,b,c):b}function t(){var a,b=n();return function(){var c=s(z,_,bb,g);if(c.length==b&&b>0){if(!V)for(a=0;b>a;a++)_.eq(a).css("width","");q();var d=[];for(a=0;b>a;a++)d[a]=c.get(a).offsetWidth;for(a=0;b>a;a++)ab.eq(a).width(d[a]),_.eq(a).width(d[a]);p()}else S.append(A),z.css(eb),S.css(eb),i()}}function u(a){var b=I.css("border-"+a+"-width"),c=0;return b&&~b.indexOf("px")&&(c=parseInt(b,10)),c}function v(){var a,b=I.scrollTop(),c=0,d=L?K.outerHeight(!0):0,e=M?d:-d,f=X.height(),g=z.offset(),i=0;if(O){var k=I.offset();c=g.top-k.top+b,L&&M&&(c+=d),c-=u("top"),i=u("left")}else a=g.top-C-f+D+F.horizontal;var l=j.scrollTop(),m=j.scrollLeft(),n=I.scrollLeft();return b=I.scrollTop(),function(k){if("windowScroll"==k?(l=j.scrollTop(),m=j.scrollLeft()):"containerScroll"==k?(b=I.scrollTop(),n=I.scrollLeft()):"init"!=k&&(l=j.scrollTop(),m=j.scrollLeft(),b=I.scrollTop(),n=I.scrollLeft()),!h||!(0>l||0>m)){if(R)r("windowScrollDone"==k?!0:!1);else if("windowScrollDone"==k)return null;g=z.offset(),L&&M&&(g.top+=d);var o,s,t=z.outerHeight();if(O&&J){if(c>=b){var u=c-b;o=u>0?u:0}else o=P?0:b;s=i}else!O&&J?(l>a+t+e?o=t-f+e:g.top>l+C?(o=0,q()):(o=C+l-g.top+c+(M?d:0),p()),s=0):O&&!J?(c>b||b-c>t?(o=g.top-l,q()):(o=g.top+b-l-c,p()),s=g.left+n-m):O||J||(l>a+t+e?o=t+C-l+a+e:g.top>l+C?(o=g.top-l,p()):o=C,s=g.left-m);return{top:o,left:s}}}}function w(){var a=null,b=null,c=null;return function(d,e,f){null==d||a==d.top&&b==d.left||(X.css({top:d.top,left:d.left}),a=d.top,b=d.left),e&&l(),f&&i();var g=I.scrollLeft();J&&c==g||(X.scrollLeft(g),c=g)}}function x(){if(I.length){var a=I.width(),b=I.height(),c=z.height(),d=z.width(),e=d>a?G:0,f=c>b?G:0;F.horizontal=d>a-f?G:0,F.vertical=c>b-e?G:0}}var y=k,z=a(this);if(z.data("floatThead-attached"))return!0;if(!z.is("table"))throw new Error('jQuery.floatThead must be run on a table element. ex: $("table").floatThead();');var A=z.find("thead:first"),B=z.find("tbody:first");if(0==A.length)throw new Error("jQuery.floatThead must be run on a table that contains a <thead> element");var C,D,E=!1,F={vertical:0,horizontal:0},G=d(),H=0,I=o.scrollContainer(z)||a([]),J=o.useAbsolutePositioning;null==J&&(J=o.scrollContainer(z).length);var K=z.find("caption"),L=1==K.length;if(L)var M="top"===(K.css("caption-side")||K.attr("align")||"top");var N=a('<fthfoot style="display:table-footer-group;"/>'),O=I.length>0,P=!1,Q=a([]),R=9>=g&&!O&&J,S=a("<table/>"),T=a("<colgroup/>"),U=z.find("colgroup:first"),V=!0;0==U.length&&(U=a("<colgroup/>"),V=!1);var W=a('<fthrow style="display:table-row;height:0;"/>'),X=a('<div style="overflow: hidden;"></div>'),Y=a("<thead/>"),Z=a('<tr class="size-row"/>'),$=a([]),_=a([]),ab=a([]),bb=a([]);if(Y.append(Z),z.prepend(U),h&&(N.append(W),z.append(N)),S.append(T),X.append(S),o.copyTableClass&&S.attr("class",z.attr("class")),S.attr({cellpadding:z.attr("cellpadding"),cellspacing:z.attr("cellspacing"),border:z.attr("border")}),S.css({borderCollapse:z.css("borderCollapse"),border:z.css("border")}),S.addClass(o.floatTableClass).css("margin",0),J){var cb=function(a,b){var c=a.css("position"),d="relative"==c||"absolute"==c;if(!d||b){var e={paddingLeft:a.css("paddingLeft"),paddingRight:a.css("paddingRight")};X.css(e),a=a.wrap("<div class='"+o.floatWrapperClass+"' style='position: relative; clear:both;'></div>").parent(),P=!0}return a};O?(Q=cb(I,!0),Q.append(X)):(Q=cb(z),z.after(X))}else z.after(X);X.css({position:J?"absolute":"fixed",marginTop:0,top:J?0:"auto",zIndex:o.zIndex}),X.addClass(o.floatContainerClass),m();var db={"table-layout":"fixed"},eb={"table-layout":z.css("tableLayout")||"auto"},fb=z[0].style.width||"";x();var gb,hb=function(){(gb=t())()};hb();var ib=v(),jb=w();jb(ib("init"),!0);var kb=f.debounce(function(){jb(ib("windowScrollDone"),!1)},300),lb=function(){jb(ib("windowScroll"),!1),kb()},mb=function(){jb(ib("containerScroll"),!1)},nb=function(){m(),x(),hb(),ib=v(),(jb=w())(ib("resize"),!0,!0)},ob=f.debounce(function(){x(),m(),hb(),ib=v(),jb(ib("reflow"),!0)},1);O?J?I.on(c("scroll"),mb):(I.on(c("scroll"),mb),j.on(c("scroll"),lb)):j.on(c("scroll"),lb),j.on(c("load"),ob),b(o.debounceResizeMs,c("resize"),nb),z.on("reflow",ob),e(z)&&z.on("filter",ob).on("sort",ob).on("page",ob),z.data("floatThead-attached",{destroy:function(){var a=".fth-"+y;q(),z.css(eb),U.remove(),h&&N.remove(),Y.parent().length&&Y.replaceWith(A),z.off("reflow"),I.off(a),P&&(I.length?I.unwrap():z.unwrap()),J&&z.css("minWidth",""),X.remove(),z.data("floatThead-attached",!1),j.off(a)},reflow:function(){ob()},setHeaderHeight:function(){i()},getFloatContainer:function(){return X},getRowGroups:function(){return E?X.find("thead").add(z.find("tbody,tfoot")):z.find("thead,tbody,tfoot")}}),k++}),this}}(jQuery),function(a){a.floatThead=a.floatThead||{},a.floatThead._=window._||function(){var b={},c=Object.prototype.hasOwnProperty,d=["Arguments","Function","String","Number","Date","RegExp"];return b.has=function(a,b){return c.call(a,b)},b.keys=function(a){if(a!==Object(a))throw new TypeError("Invalid object");var c=[];for(var d in a)b.has(a,d)&&c.push(d);return c},a.each(d,function(){var a=this;b["is"+a]=function(b){return Object.prototype.toString.call(b)=="[object "+a+"]"}}),b.debounce=function(a,b,c){var d,e,f,g,h;return function(){f=this,e=arguments,g=new Date;var i=function(){var j=new Date-g;b>j?d=setTimeout(i,b-j):(d=null,c||(h=a.apply(f,e)))},j=c&&!d;return d||(d=setTimeout(i,b)),j&&(h=a.apply(f,e)),h}},b}()}(jQuery);



$(document).ready(function(){

$(".sticky-header").floatThead({scrollingTop:70});

});
    </script>