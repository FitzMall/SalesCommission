@model SalesCommission.Models.FICommissionModel

@{
    ViewBag.Title = "F and I Manager Commission Dashboard";
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.PercentPositivePattern = 1;
    nfi.CurrencySymbol = "$";

    System.Globalization.NumberFormatInfo noSymbol = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    noSymbol.CurrencyDecimalDigits = 0;
    noSymbol.PercentDecimalDigits = 1;
    noSymbol.PercentPositivePattern = 1;
    noSymbol.CurrencySymbol = "";
    noSymbol.CurrencyGroupSeparator = "";

    System.Globalization.NumberFormatInfo markupFormat = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    noSymbol.CurrencyDecimalDigits = 0;
    noSymbol.PercentDecimalDigits = 2;
    noSymbol.PercentPositivePattern = 1;
    noSymbol.CurrencySymbol = "";
    noSymbol.CurrencyGroupSeparator = "";

}
@section CSS
{
    <link rel="stylesheet" href="~/Scripts/Chosen/chosen.css">
}

<style type="text/css">
    table.dataTable thead > tr > th.sorting_asc, table.dataTable thead > tr > th.sorting_desc, table.dataTable thead > tr > th.sorting, table.dataTable thead > tr > td.sorting_asc, table.dataTable thead > tr > td.sorting_desc, table.dataTable thead > tr > td.sorting {
        padding-right: 20px;
    }

    table.dataTable thead .sorting:after, table.dataTable thead .sorting_asc:after, table.dataTable thead .sorting_desc:after, table.dataTable thead .sorting_asc_disabled:after, table.dataTable thead .sorting_desc_disabled:after {
        position: absolute;
        bottom: 0px;
        right: 1px;
        display: block;
        font-family: 'Glyphicons Halflings';
        opacity: 0.5;
    }

    .tooltip-inner {
        white-space: pre;
        max-width: none;
    }

    .table thead > tr > th, .table tbody > tr > th, .table tfoot > tr > th, .table thead > tr > td, .table tbody > tr > td, .table tfoot > tr > td {
        padding: 6px;
    }

    .chosen-container {
        vertical-align: top;
        font-size: 14px;
    }

    .chosen-container-multi .chosen-choices {
        border: 1px solid #cccccc;
        border-radius: 4px;
    }

    th.rotate {
        /* Something you can count on */
        height: 150px;
        white-space: nowrap;
    }

        th.rotate > div {
            transform:
            /* Magic Numbers */
            translate(3px, 0px)
            /* 45 is really 360 - 45 */
            rotate(270deg);
            width: 30px;
        }

            th.rotate > div > span {
                border-bottom: 0px solid #ccc;
                padding: 5px 10px;
            }

    .aft {
        display: none;
    }

    .aft-percent {
        display: none;
    }

    .finance-column-hide {
        display: none;
    }

    .service-column-hide {
        display: none;
    }

    .maintenance-column-hide {
        display: none;
    }

    .gap-column-hide {
        display: none;
    }

    .bpp-column-hide {
        display: none;
    }

    .total-column-hide {
        display: none;
    }

    .aftermarket-column-hide {
        display: none;
    }

    .btnToggleFinance:after {
        content: '\002B';
    }

    .btnToggleService:after {
        content: '\002B';
    }

    .btnToggleMaintenance:after {
        content: '\002B';
    }

    .btnToggleGAP:after {
        content: '\002B';
    }

    .btnToggleBPP:after {
        content: '\002B';
    }

    .btnToggleTotal:after {
        content: '\002B';
    }

    .changed:after {
        content: '\2212';
    }

    .changed {
        font-weight: bold;
    }

    .selected-row {
        background-color: #f7f4e0; /*#f5f5f5;*/
    }

    .table-bordered > thead > tr > th.extra-right {
        border-right: 3px solid #dddddd;
    }

    .table-bordered > thead > tr > td.extra-right {
        border-right: 3px solid #dddddd;
    }

    .table-bordered > tbody > tr > th.extra-right {
        border-right: 3px solid #dddddd;
    }

    .table-bordered > tbody > tr > td.extra-right {
        border-right: 3px solid #dddddd;
    }

    .table-bordered > tfoot > tr > th.extra-right {
        border-right: 3px solid #dddddd;
    }

    .table-bordered > tfoot > tr > td.extra-right {
        border-right: 3px solid #dddddd;
    }

    @@media print {
        a[href]:after {
            content: "";
        }
        body {
            padding-top: 0px;
        }

        .jumbotron {
            display: none;
        }

    }

</style>

<div class="jumbotron">
    <h1>F and I Manager Commissions</h1>
    <div class="row">
        <div class="col-sm-12">
            <h3>Select a Store and Date:</h3>
        </div>
    </div>
    @using (Html.BeginForm())
    {
        <div class="row">
            <div class="col-sm-12">
                <div class="row">
                    <div class="col-sm-3">
                        @Html.DropDownListFor(n => n.StoreId, new SelectList(SalesCommission.Business.Enums.FIManagerStores, "StoreId", "Name"), new { @class = "form-control form-inline"})
                    </div>
                    <div class="col-sm-2">
                        @Html.DropDownListFor(n => n.MonthId, new SelectList(SalesCommission.Business.Enums.Months, "MonthId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                    <div class="col-sm-2">
                        @Html.DropDownListFor(n => n.YearId, new SelectList(SalesCommission.Business.Enums.Years, "YearId", "Name"), new { @class = "form-control form-inline" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <input type="checkbox" name="chkIncludeDeals" id="chkIncludeDeals" @(Model.IncludeDeals == true ? "checked" : "") /> <span style="font-size:14px;">Include Deal Details</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12">
                        <button class="btn btn-primary" type="submit" value="submit" name="Submit">Submit</button>
                    </div>
                </div>
            </div>

        </div>


    }

</div>
@if (Model.AftermarketDealDetails != null)
{
    var autoMallName = "";
    autoMallName = SalesCommission.Business.Enums.FIManagerStores.First(o => o.StoreId == Model.StoreId).Name;

    var StoreTotalDeals = 0;
    decimal StoreTotalEligibleDeals = 0;

    decimal StoreTotalGross = 0;
    decimal StoreTotalFinance = 0;
    decimal StoreTotalService = 0;
    decimal StoreTotalMaintenance = 0;
    decimal StoreTotalGAP = 0;
    decimal StoreTotalZurich = 0;
    decimal StoreTotalOther = 0;
    decimal StoreTotalLeaseWandT = 0;
    decimal StoreTotalTireWheel = 0;
    decimal StoreTotalSelectProtect = 0;

    int StoreFinanceCount = 0;
    int StoreServiceCount = 0;
    int StoreMaintenanceCount = 0;
    int StoreGAPCount = 0;
    int StoreZurichCount = 0;
    int StoreLeaseWandTCount = 0;
    int StoreLeaseCount = 0;
    int StoreTireWheelCount = 0;
    int StoreSelectProtectCount = 0;
    int StoreOtherCount = 0;

    double StoreFinancePercent = 0;
    double StoreServicePercent = 0;
    double StoreMaintenancePercent = 0;
    double StoreGAPPercent = 0;
    double StoreZurichPercent = 0;
    double StoreLeaseWandTPercent = 0;
    double StoreTireWheelPercent = 0;
    double StoreSelectProtectPercent = 0;
    double StoreOtherPercent = 0;

    decimal StoreMoneyDue = 0;
    decimal StoreDollarPerCar = 0;
    decimal StoreProductDollarPerCar = 0;

    decimal StoreTotalBPPValidated = 0;
    decimal StoreTotalUnvalidated = 0;
    decimal StoreTotalShowroomUnvalidated = 0;
    decimal StoreTotalMissedRevenue = 0;
    decimal StoreTotalMissedCommission = 0;

    decimal StoreTotalMoneyDue = 0;

    var totalStoreMoneyDue = new List<SalesCommission.Models.MoneyDue>();
    //if (Model.StoreId.Contains(","))
    //{

    //    var locations = Model.StoreId.Split(',');

    //    foreach (var location in locations)
    //    {
    //        totalStoreMoneyDue = Model.MoneyDue.FindAll(x => x.Location == location);
    //        foreach (var moneyDue in totalStoreMoneyDue)
    //        {
    //            StoreTotalMoneyDue += moneyDue.ControlBalance;
    //        }
    //    }

    //}
    //else {
    //    totalStoreMoneyDue = Model.MoneyDue.FindAll(x => x.Location == Model.StoreId);
    //    foreach (var moneyDue in totalStoreMoneyDue)
    //    {
    //        StoreTotalMoneyDue += moneyDue.ControlBalance;
    //    }
    //}

    <div class="row">
        <div class="col-md-12">
            <h3>F and I Commission for @autoMallName (@Model.MonthId/@Model.YearId)</h3>
        </div>
    </div>
    <div class="row" style="margin-bottom:15px;">
        <div class="col-md-2">
            <input id="btnTogglePerUnit" type="button" value="Show Per Unit" class="btn btn-primary" />
        </div>
        <div class="col-md-2">
            <input id="btnTogglePercentage" type="button" value="Show Percentages" class="btn btn-primary" />
        </div>
    </div>
    <div class="row" style="margin-bottom:15px;">
        <table class="table table-bordered table-striped" style="font-size:12px;" id="section1">
            <thead>

                <tr style="background-color:#d9edf7;font-size:11px;">
                    @if (Model.StoreId == "ALL")
                    {
                        <th class="text-center">Store</th>
                    }
                    <th class="text-center">Manager</th>
                    <th class="text-center">Total<br/>Deals</th>
                    @*<th class="text-center">Eligible<br />Deals</th>*@
                    <th class="text-center">SR<br />UNV<br />Deals</th>
                    <th class="text-center extra-right">F &amp; I<br/>UNV<br />Deals</th>
                    <th class="text-center aft-percent">Finance %</th>
                    <th class="text-center extra-right aft">Avg<br/>Finance<br />Reserve</th>
                    <th class="text-center aft-percent">VSC %</th>
                    <th class="text-center extra-right aft">VSC<br/>$ per<br />Item</th>
                    <th class="text-center aft-percent">Maint %</th>
                    <th class="text-center extra-right aft">Maint $<br />Per Item</th>
                    <th class="text-center aft-percent">GAP % of<br />Finance</th>
                    <th class="text-center extra-right aft">GAP $ per<br />Item</th>
                    <th class="text-center aft-percent">Zurich %</th>
                    <th class="text-center extra-right aft">Zurich $<br />Per Item</th>
                    <th class="text-center aft-percent">Select<br/>Protect %</th>
                    <th class="text-center extra-right aft">Select<br/>Protect<br />Per Item</th>
                    <th class="text-center aft-percent">Tire and<br/>Wheel %</th>
                    <th class="text-center extra-right aft">Tire and<br/>Wheel<br />Per Item</th>
                    <th class="text-center aft-percent">Lease<br/>W&T %</th>
                    <th class="text-center extra-right aft">Lease<br/>W&T $<br />Per Item</th>
                    <th class="text-center aft-percent">Other %</th>
                    <th class="text-center extra-right aft">Other $<br />Per Item</th>
                    <th class="text-center">Total<br />Gross</th>
                    <th class="text-center">Total $<br />Per Deal</th>
                    <th class="text-center">Product $<br />Per Deal</th>
                                        @*<th class="text-center">Charge<br/>backs</th>
    <th class="text-center">Comm<br/>Due</th>
    <th class="text-center">Adjustments</th>
    <th class="text-center">Draws</th>
    <th class="text-center">Title Due<br/>Count</th>*@
                    <th class="text-center">Product<br />Ratio</th>
                    <th class="text-center">Missed<br/>Rev<br />Opp</th>
                    <th class="text-center">Missed<br/>Comm<br/>Opp</th>
                    <th class="text-center">BPP<br/>Checkoff</th>
                    @*<th class="text-center">% Deals<br/>Funded<br/>7 Days</th>*@

                </tr>

            </thead>
            <tbody>
                @foreach (var manager in Model.FIManagerDealDetails)
                {
                    decimal TotalGross = 0;
                    decimal TotalFinance = 0;
                    decimal TotalService = 0;
                    decimal TotalMaintenance = 0;
                    decimal TotalGAP = 0;
                    decimal TotalZurich = 0;
                    decimal TotalOther = 0;
                    decimal TotalLeaseWandT = 0;
                    decimal TotalTireWheel = 0;
                    decimal TotalSelectProtect = 0;

                    decimal AverageFinance = 0;
                    decimal AverageService = 0;
                    decimal AverageMaintenance = 0;
                    decimal AverageGAP = 0;
                    decimal AverageZurich = 0;
                    decimal AverageLeaseWandT = 0;
                    decimal AverageTireWheel = 0;
                    decimal AverageSelectProtect = 0;
                    decimal AverageOther = 0;

                    decimal TotalDeals = 0;
                    decimal TotalEligibleDeals = 0;

                    int FinanceCount = 0;
                    int ServiceCount = 0;
                    int MaintenanceCount = 0;
                    int GAPCount = 0;
                    int ZurichCount = 0;
                    int LeaseCount = 0;
                    int LeaseWandTCount = 0;
                    int TireWheelCount = 0;
                    int SelectProtectCount = 0;
                    int OtherCount = 0;

                    double FinancePercent = 0;
                    double ServicePercent = 0;
                    double JustServicePercent = 0;
                    double MaintenancePercent = 0;
                    double GAPPercent = 0;
                    double ZurichPercent = 0;
                    double LeaseWandTPercent = 0;
                    double TireWheelPercent = 0;
                    double SelectProtectPercent = 0;
                    double OtherPercent = 0;

                    decimal TotalDollarPerDeal = 0;
                    decimal ProductDollarPerDeal = 0;

                    decimal TotalDealDollar = 0;
                    decimal TotalProductDollar = 0;
                    decimal TotalMoneyDue = 0;
                    decimal DollarPerCar = 0;
                    decimal ProductDollarPerCar = 0;
                    decimal ShowroomUnvalidated = 0;
                    decimal MissedTotalRevenue = 0;

                    var bShowOtherManager = false;
                    if (manager.FIManagerAssociateNumber == "000")
                    {
                        bShowOtherManager = true;
                    }

                    foreach (var deal in manager.AftermarketDealDetails)
                    {
                        if (deal.ShowroomValidatedBy == null)
                        {
                            ShowroomUnvalidated += 1;
                        }
                        if (deal.ShowroomValidatedBy != null || manager.FIManagerAssociateNumber == "000")
                        {
                            //TotalGross += deal.DealGrossAmount;

                            var bHandy = false;
                            if (deal.CertificationLevel != null && deal.CertificationLevel.ToUpper() == "HDM")
                            {
                                bHandy = true;
                            }

                            if (deal.FinanceIncomeAmount > 0)
                            {
                                TotalFinance += deal.FinanceIncomeAmount;
                                FinanceCount += 1;
                            }

                            if (deal.VSCAmount > 0)
                            {
                                TotalService += deal.VSCAmount;
                                ServiceCount += 1;
                            }

                            if (deal.MaintenanceAmount > 0)
                            {
                                TotalMaintenance += deal.MaintenanceAmount;
                                MaintenanceCount += 1;
                            }

                            if (deal.GAPAmount > 0)
                            {
                                TotalGAP += deal.GAPAmount;
                                GAPCount += 1;
                            }

                            if (deal.ZurichAmount > 0)
                            {
                                TotalZurich += deal.ZurichAmount;
                                ZurichCount += 1;
                            }

                            if (deal.TireWheelAmount > 0)
                            {
                                TotalTireWheel += deal.TireWheelAmount;
                                TireWheelCount += 1;
                            }

                            if (deal.VehicleCategory == "L")
                            {
                                LeaseCount += 1;
                            }

                            //Check to see if they are 10 years or older, have over 150K miles or just getting credit for Revenue
                            //var currentYear = Model.YearId;

                            //if (deal.VehicleYear != "")
                            //{
                            //    var vehicleYear = Int32.Parse(deal.VehicleYear);
                            //    var vehicleMiles = Int32.Parse(deal.VehicleMiles);

                            //    if ((currentYear - vehicleYear) < 12 && deal.BrandId != "AA" && !bHandy && vehicleMiles < 125000)
                            //    {
                            //        TotalEligibleDeals += 1;
                            //    }
                            //}

                            decimal otherItemAmount = 0;
                            if (deal.AftermarketItems.Count > 0)
                            {

                                var dealValidation = Model.DealApprovals.FindAll(x => x.DealKey.Trim() == deal.DealKey.Trim());
                                var validation = new SalesCommission.Models.FIDealApproval();

                                if (dealValidation != null && dealValidation.Count > 0)
                                {
                                    validation = dealValidation[0];
                                }

                                if (true) //dealValidation.Count > 0
                                {

                                    foreach (var item in deal.AftermarketItems)
                                    {
                                        if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 4 && item.AftermarketId != 5 && item.AftermarketId != 20 && item.AftermarketId != 8)
                                        {

                                            decimal profit = 0;
                                            switch (item.AftermarketId)
                                            {
                                                case 2:
                                                    if (validation.NitrogenPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 4:
                                                    if (validation.SelectProtectionPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 5:
                                                    if (validation.TireWheelPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 6:
                                                    if (validation.KeyReplacementPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 7:
                                                    if (validation.WindshieldProtectionPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 8:
                                                    if (validation.WearAndTearPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 9:
                                                    if (validation.SecureGuardPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 10:
                                                    if (validation.FitzTotalPackagePaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 11:
                                                    if (validation.RustInhibitUnderCoatPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 12:
                                                    if (validation.UndercoatingPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 13:
                                                    if (validation.RustInhibitorPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 14:
                                                    if (validation.DataDotsPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 15:
                                                    if (validation.PaintDentPaid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 16:
                                                    if (true || validation.Miscellaneous1Paid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 17:
                                                    if (true || validation.Miscellaneous2Paid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 18:
                                                    if (true || validation.Miscellaneous3Paid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;
                                                case 19:
                                                    if (true || validation.Miscellaneous4Paid)
                                                    {
                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                    }
                                                    break;

                                            }



                                            otherItemAmount += profit;
                                            OtherCount += 1;
                                        }

                                        if (item.AftermarketId == 8)
                                        {
                                            LeaseWandTCount += 1;
                                            var profit = item.AftermarketPrice - item.AftermarketCost;
                                            TotalLeaseWandT += profit;
                                        }
                                        if (item.AftermarketId == 4) //SELECT PROTECT
                                        {
                                            SelectProtectCount += 1;
                                            var profit = item.AftermarketPrice - item.AftermarketCost;
                                            TotalSelectProtect += profit;
                                        }

                                    }
                                }
                            }


                            TotalOther += otherItemAmount;

                        }
                        TotalDeals = manager.AftermarketDealDetails.Count; //USED TO BE Model.AftermarketDealDetails.Count
                    }


                    decimal totalDealMoneyDue = 0;
                    var totalItemMoneyDue = new List<SalesCommission.Models.MoneyDue>();

                    //if (Model.StoreId.Contains(","))
                    //{

                    //    var locations = Model.StoreId.Split(',');

                    //    foreach (var location in locations)
                    //    {
                    //        totalItemMoneyDue = Model.MoneyDue.FindAll(x => x.FIManagerNumber.Trim() == manager.FIManagerAssociateNumber.Trim() && x.Location == location);
                    //        foreach (var moneyDue in totalItemMoneyDue)
                    //        {
                    //            totalDealMoneyDue += moneyDue.ControlBalance;
                    //        }
                    //    }

                    //}
                    //else
                    //{
                    //    totalItemMoneyDue = Model.MoneyDue.FindAll(x => x.FIManagerNumber.Trim() == manager.FIManagerAssociateNumber.Trim() && x.Location == Model.StoreId);
                    //    foreach (var moneyDue in totalItemMoneyDue)
                    //    {
                    //        totalDealMoneyDue += moneyDue.ControlBalance;
                    //    }
                    //}


                    //TotalMoneyDue += totalDealMoneyDue;

                    decimal TotalUnvalidated = 0;
                    decimal TotalBPPValidated = 0;

                    decimal ProductSoldRatio = 0;

                    var showroomValidatedDeals = manager.AftermarketDealDetails.FindAll(x => x.ShowroomValidatedBy != null);

                    var associateValidatedDeals = new List<SalesCommission.Models.FIDealApproval>();

                    if (Model.StoreId.Contains(","))
                    {

                        var locations = Model.StoreId.Split(',');

                        if (locations.Length > 0)
                        {
                            associateValidatedDeals = Model.DealApprovals.FindAll(x => x.FIManagerNumber == manager.FIManagerAssociateNumber.TrimEnd() && (x.DealKey.Contains(locations[0]) || x.DealKey.Contains(locations[1])));
                        }
                    }
                    else
                    {
                        associateValidatedDeals = Model.DealApprovals.FindAll(x => x.FIManagerNumber == manager.FIManagerAssociateNumber.TrimEnd() && x.DealKey.Contains(Model.StoreId));

                    }


                    if (associateValidatedDeals != null)
                    {
                        TotalUnvalidated = showroomValidatedDeals.Count - associateValidatedDeals.Count();

                        var bppValidatedDeals = associateValidatedDeals.FindAll(x => x.BPPPaid == true);
                        TotalBPPValidated = bppValidatedDeals.Count;
                    }

                    if (TotalDeals > 0)
                    {
                        FinancePercent = (double)FinanceCount / (double)TotalDeals;
                        ServicePercent = ((double)ServiceCount) / (double)TotalDeals;
                        //ServicePercent = ((double)ServiceCount + (double)MaintenanceCount + LeaseWandTCount) / (double)TotalEligibleDeals;
                        MaintenancePercent = (double)MaintenanceCount / (double)TotalDeals;
                        TireWheelPercent = (double)TireWheelCount / (double)TotalDeals;
                        GAPPercent = (double)GAPCount / (double)(FinanceCount - LeaseCount);
                        ZurichPercent = (double)ZurichCount / (double)TotalDeals;
                        LeaseWandTPercent = (double)LeaseWandTCount / (double)LeaseCount;
                        SelectProtectPercent = (double)SelectProtectCount / (double)TotalDeals;
                        OtherPercent = (double)OtherCount / (double)TotalDeals;

                        TotalDollarPerDeal = (TotalFinance + TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect) / TotalDeals;
                        ProductDollarPerDeal = (TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect) / TotalDeals;
                        ProductSoldRatio = ((ServiceCount + MaintenanceCount + GAPCount + ZurichCount + SelectProtectCount + TireWheelCount + OtherCount) / TotalDeals);

                    }


                    TotalDealDollar = (TotalFinance + TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect);// 
                    TotalGross = TotalDealDollar;
                    TotalProductDollar = (TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect); // 


                    if (FinanceCount > 0)
                    {
                        AverageFinance = TotalFinance / FinanceCount;
                    }

                    if (ServiceCount > 0)
                    {
                        AverageService = TotalService / ServiceCount;
                    }

                    if (MaintenanceCount > 0)
                    {
                        AverageMaintenance = TotalMaintenance / MaintenanceCount;
                    }

                    if (GAPCount > 0)
                    {
                        AverageGAP = TotalGAP / GAPCount;
                    }

                    if (ZurichCount > 0)
                    {
                        AverageZurich = TotalZurich / ZurichCount;
                    }

                    if (TireWheelCount > 0)
                    {
                        AverageTireWheel = TotalTireWheel / TireWheelCount;
                    }

                    if (LeaseWandTCount > 0)
                    {
                        AverageLeaseWandT = TotalLeaseWandT / LeaseWandTCount;
                    }

                    if (SelectProtectCount > 0)
                    {
                        AverageSelectProtect = TotalSelectProtect / SelectProtectCount;
                    }

                    if(OtherCount > 0)
                    {
                        AverageOther = TotalOther / OtherCount;
                    }

                    var managerPayscale = manager.FIManagerPayscale;
                    var payscaleSetup = new SalesCommission.Models.FIPayscaleSetup();

                    if (managerPayscale == "" || managerPayscale == null)
                    {
                        payscaleSetup = Model.FIPayscales.Find(x => x.PlanCode.Contains(manager.FIManagerLocation));
                    }
                    else
                    {
                        payscaleSetup = Model.FIPayscales.Find(x => x.PlanCode == managerPayscale);
                    }

                    decimal MissedTotalOpportunity = 0;

                    ////CALCULATE MISSED OPPORTUNITY
                    if (payscaleSetup != null)
                    {
                        decimal StandardFinancePerUnit = payscaleSetup.StandardFinancePerUnit;
                        decimal StandardServicePerUnit = payscaleSetup.StandardServicePerUnit;
                        decimal StandardMaintenancePerUnit = payscaleSetup.StandardMaintenancePerUnit;
                        decimal StandardGAPPerUnit = payscaleSetup.StandardGAPPerUnit;
                        decimal StandardZurichPerUnit = payscaleSetup.StandardZurichPerUnit;
                        decimal StandardSelectProtectPerUnit = payscaleSetup.StandardSelectProtectPerUnit;
                        decimal StandardTireWheelPerUnit = payscaleSetup.StandardTireWheelPerUnit;

                        decimal StandardFinancePercentage = (payscaleSetup.StandardFinancePercent / 100);
                        decimal StandardServicePercentage = (payscaleSetup.StandardServicePercent / 100);
                        decimal StandardMaintenancePercentage = (payscaleSetup.StandardMaintenancePercent / 100);
                        decimal StandardGAPPercentage = (payscaleSetup.StandardGAPPercent / 100);
                        decimal StandardZurichPercentage = (payscaleSetup.StandardZurichPercent / 100);
                        decimal StandardSelectProtectPercentage = (payscaleSetup.StandardSelectProtectPercent / 100);
                        decimal StandardTireWheelPercentage = (payscaleSetup.StandardTireWheelPercent / 100);

                        decimal StandardFinanceRevenue = 0;
                        decimal StandardServiceRevenue = 0;
                        decimal StandardMaintenanceRevenue = 0;
                        decimal StandardGAPRevenue = 0;
                        decimal StandardZurichRevenue = 0;
                        decimal StandardSelectProtectRevenue = 0;
                        decimal StandardTireWheelRevenue = 0;

                        decimal MissedFinanceRevenue = 0;
                        decimal MissedServiceRevenue = 0;
                        decimal MissedMaintenanceRevenue = 0;
                        decimal MissedGAPRevenue = 0;
                        decimal MissedZurichRevenue = 0;
                        decimal MissedSelectProtectRevenue = 0;
                        decimal MissedTireWheelRevenue = 0;


                        decimal MissedFinanceOpportunity = 0;
                        decimal MissedServiceOpportunity = 0;
                        decimal MissedMaintenanceOpportunity = 0;
                        decimal MissedGAPOpportunity = 0;
                        decimal MissedZurichOpportunity = 0;
                        decimal MissedSelectProtectOpportunity = 0;
                        decimal MissedTireWheelOpportunity = 0;


                        StandardFinanceRevenue = Math.Round(StandardFinancePerUnit * TotalDeals * StandardFinancePercentage);
                        StandardServiceRevenue = Math.Round(StandardServicePerUnit * TotalDeals * StandardServicePercentage);
                        StandardMaintenanceRevenue = Math.Round(StandardMaintenancePerUnit * TotalDeals * StandardMaintenancePercentage);
                        StandardGAPRevenue = Math.Round(StandardGAPPerUnit * TotalDeals * StandardGAPPercentage);
                        StandardZurichRevenue = Math.Round(StandardZurichPerUnit * TotalDeals * StandardZurichPercentage);
                        StandardSelectProtectRevenue = Math.Round(StandardSelectProtectPerUnit * TotalDeals * StandardSelectProtectPercentage);
                        StandardTireWheelRevenue = Math.Round(StandardTireWheelPerUnit * TotalDeals * StandardTireWheelPercentage);

                        MissedFinanceRevenue = ((StandardFinanceRevenue - TotalFinance) > 0 ? (StandardFinanceRevenue - TotalFinance) : 0);
                        MissedServiceRevenue = ((StandardServiceRevenue - TotalService) > 0 ? (StandardServiceRevenue - TotalService) : 0);
                        MissedMaintenanceRevenue = ((StandardMaintenanceRevenue - TotalMaintenance) > 0 ? (StandardMaintenanceRevenue - TotalMaintenance) : 0);
                        MissedGAPRevenue = ((StandardGAPRevenue - TotalGAP) > 0 ? (StandardGAPRevenue - TotalGAP) : 0);
                        MissedZurichRevenue = ((StandardZurichRevenue - TotalZurich) > 0 ? (StandardZurichRevenue - TotalZurich) : 0);
                        MissedSelectProtectRevenue = ((StandardSelectProtectRevenue - TotalSelectProtect) > 0 ? (StandardSelectProtectRevenue - TotalSelectProtect) : 0);
                        MissedTireWheelRevenue = ((StandardTireWheelRevenue - TotalTireWheel) > 0 ? (StandardTireWheelRevenue - TotalTireWheel) : 0);

                        decimal CommissionPercentage = (payscaleSetup.CommissionPercentage / 100);
                        decimal Bonus1Percentage = (payscaleSetup.ProductBonusPercent1 / 100);
                        decimal Bonus2Percentage = (payscaleSetup.ProductBonusPercent2 / 100);
                        decimal Bonus3Percentage = (payscaleSetup.ProductBonusPercent3 / 100);
                        decimal Bonus4Percentage = (payscaleSetup.ProductBonusPercent4 / 100);

                        decimal Bonus1Threshold = payscaleSetup.ProductBonusThreshold1;
                        decimal Bonus2Threshold = payscaleSetup.ProductBonusThreshold2;
                        decimal Bonus3Threshold = payscaleSetup.ProductBonusThreshold3;
                        decimal Bonus4Threshold = payscaleSetup.ProductBonusThreshold4;

                        decimal TotalCommissionPercentage = 0;

                        TotalCommissionPercentage += CommissionPercentage;

                        var BaseCommission = (TotalGross * CommissionPercentage);

                        decimal ProductBonus1 = 0;
                        if (TotalProductDollar > Bonus1Threshold)
                        {
                            ProductBonus1 = (TotalProductDollar * Bonus1Percentage);
                            TotalCommissionPercentage += Bonus1Percentage;
                        }

                        decimal ProductBonus2 = 0;
                        if (TotalProductDollar > Bonus2Threshold)
                        {
                            ProductBonus2 = (TotalProductDollar * Bonus2Percentage);
                            TotalCommissionPercentage += Bonus2Percentage;
                        }

                        decimal ProductBonus3 = 0;
                        if (TotalProductDollar > Bonus3Threshold)
                        {
                            ProductBonus3 = (TotalProductDollar * Bonus3Percentage);
                            TotalCommissionPercentage += Bonus3Percentage;
                        }

                        decimal ProductBonus4 = 0;
                        if (TotalProductDollar > Bonus4Threshold)
                        {
                            ProductBonus4 = (TotalProductDollar * Bonus4Percentage);
                            TotalCommissionPercentage += Bonus4Percentage;
                        }

                        decimal TotalProductBonus = ProductBonus1 + ProductBonus2 + ProductBonus3 + ProductBonus4;

                        var TotalCommission = BaseCommission + TotalProductBonus;



                        MissedFinanceOpportunity = Math.Round(MissedFinanceRevenue * CommissionPercentage);
                        MissedServiceOpportunity = Math.Round(MissedServiceRevenue * TotalCommissionPercentage);
                        MissedMaintenanceOpportunity = Math.Round(MissedMaintenanceRevenue * TotalCommissionPercentage);
                        MissedGAPOpportunity = Math.Round(MissedGAPRevenue * TotalCommissionPercentage);
                        MissedZurichOpportunity = Math.Round(MissedZurichRevenue * TotalCommissionPercentage);
                        MissedSelectProtectOpportunity = Math.Round(MissedSelectProtectRevenue * TotalCommissionPercentage);
                        MissedTireWheelOpportunity = Math.Round(MissedTireWheelRevenue * TotalCommissionPercentage);

                        MissedTotalOpportunity = MissedFinanceOpportunity + MissedServiceOpportunity + MissedMaintenanceOpportunity + MissedGAPOpportunity + MissedZurichOpportunity + MissedSelectProtectOpportunity + MissedTireWheelOpportunity;
                        MissedTotalRevenue = MissedFinanceRevenue + MissedServiceRevenue + MissedMaintenanceRevenue + MissedGAPRevenue + MissedZurichRevenue + MissedSelectProtectRevenue + MissedTireWheelRevenue;

                    }


                    StoreTotalGross += TotalGross;

                    StoreTotalEligibleDeals += TotalEligibleDeals;

                    StoreFinanceCount += FinanceCount;
                    StoreServiceCount += ServiceCount;
                    StoreGAPCount += GAPCount;
                    StoreMaintenanceCount += MaintenanceCount;
                    StoreZurichCount += ZurichCount;
                    StoreLeaseWandTCount += LeaseWandTCount;
                    StoreLeaseCount += LeaseCount;
                    StoreTireWheelCount += TireWheelCount;
                    StoreSelectProtectCount += SelectProtectCount;
                    StoreOtherCount += OtherCount;

                    StoreTotalMissedRevenue +=  MissedTotalRevenue;
                    StoreTotalMissedCommission += MissedTotalOpportunity;

                StoreTotalFinance += TotalFinance;
                    StoreTotalService += TotalService;
                    StoreTotalGAP += TotalGAP;
                    StoreTotalMaintenance += TotalMaintenance;
                    StoreTotalZurich += TotalZurich;
                    StoreTotalLeaseWandT += TotalLeaseWandT;
                    StoreMoneyDue += TotalMoneyDue;
                    StoreTotalTireWheel += TotalTireWheel;
                    StoreTotalSelectProtect += TotalSelectProtect;
                    StoreTotalOther += TotalOther;

                    StoreTotalBPPValidated += TotalBPPValidated;
                    StoreTotalUnvalidated += TotalUnvalidated;
                    StoreTotalShowroomUnvalidated += ShowroomUnvalidated;
                    <tr>
                        @if (Model.StoreId == "ALL")
                        {
                            <td class="text-center">@manager.FIManagerLocation</td>
                        }
                        <td>
                            @if (@manager.FIManagerAssociateNumber.Trim() != "000")
                            {
                            <a href="@applicationPath/FICommission/NewAssociate/@manager.FIManagerLocation/@manager.FIManagerAssociateNumber.Trim()/@Model.MonthId/@Model.YearId">@manager.FIManagerName</a><br />
                            }
                            else
                            {
                        @manager.FIManagerName<br />
                            }
                            @*<a class="hide-print" href="@applicationPath/FICommission/ScoreCard/@manager.FIManagerAssociateNumber.Trim()/@Model.MonthId/@Model.YearId">Score Card</a><br/>*@
                           @if (Model.IncludeDeals)
                            {
                                <a class="hide-print" data-toggle="collapse" id="Deals" style="cursor: pointer;" data-target="#collapse-@manager.FIManagerSSN">Deal Details <i class="fa fa-caret-down" aria-hidden="true"></i></a>
                            }
                        </td>
                        <td class="text-center">@manager.AftermarketDealDetails.Count</td>
                        @*<td class="text-center">@TotalEligibleDeals</td>*@   
                        <td class="text-center">@ShowroomUnvalidated</td>   
                        <td class="text-center extra-right">
                        @if (@manager.FIManagerAssociateNumber.Trim() != "000")
                        {
                            <a href="@applicationPath/FICommission/ValidateDeals/@manager.FIManagerLocation/@manager.FIManagerAssociateNumber.Trim()/@Model.MonthId/@Model.YearId">@TotalUnvalidated</a>
                        }
                        else
                        {
                            @TotalUnvalidated
                        }
                        </td>
                        <td class="text-center aft-percent">@FinancePercent.ToString("P", nfi)<br />(@FinanceCount)</td>
                        <td class="text-center extra-right aft">@AverageFinance.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@ServicePercent.ToString("P", nfi)<br />(@ServiceCount)</td>
                        <td class="text-center extra-right aft">@AverageService.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@MaintenancePercent.ToString("P", nfi)<br />(@MaintenanceCount)</td>
                        <td class="text-center extra-right aft">@AverageMaintenance.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@GAPPercent.ToString("P", nfi)<br />(@GAPCount)</td>
                        <td class="text-center extra-right aft">@AverageGAP.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@ZurichPercent.ToString("P", nfi)<br />(@ZurichCount)</td>
                        <td class="text-center extra-right aft">@AverageZurich.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@SelectProtectPercent.ToString("P", nfi)<br />(@SelectProtectCount)</td>
                        <td class="text-center extra-right aft">@AverageSelectProtect.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@TireWheelPercent.ToString("P", nfi)<br />(@TireWheelCount)</td>
                        <td class="text-center extra-right aft">@AverageTireWheel.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@LeaseWandTPercent.ToString("P", nfi)<br />(@LeaseWandTCount of @LeaseCount)</td>
                        <td class="text-center extra-right aft">@AverageLeaseWandT.ToString("C", nfi)</td>

                        <td class="text-center aft-percent">@OtherPercent.ToString("P", nfi)<br />(@OtherCount)</td>
                        <td class="text-center extra-right aft">@AverageOther.ToString("C", nfi)</td>

                        <td class="text-center">@TotalGross.ToString("C", nfi)</td>
                        <td class="text-center">@TotalDollarPerDeal.ToString("C", nfi)</td>
                        <td class="text-center">@ProductDollarPerDeal.ToString("C", nfi)</td>
                        <td class="text-center">@Decimal.Round(ProductSoldRatio,2)</td>
                        <td class="text-center">@MissedTotalRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedTotalOpportunity.ToString("C", nfi)</td>
                        @*<td class="text-center">@TotalMoneyDue.ToString("C",nfi)</td>*@
        <td class="text-center">@TotalBPPValidated</td>

    </tr>

    if (Model.IncludeDeals)
    {
    <tr id="collapse-@manager.FIManagerSSN" class="collapse out" style="background-color:#f5f5f5;">
        <td colspan="29">
            <h4>Deals for @manager.FIManagerName</h4>


            @if (manager.AftermarketDealDetails != null)// && associate.AssociateDeals.Count > 0)
            {

                var dealIndex = 0;
                decimal DealTotalMoneyDue = 0;
                decimal SelectProtectAmount = 0;

                    <table class="table table-bordered table-striped" style="font-size:11px">
                        <thead>
                            <tr style="background-color:#d9edf7">
                                <th class="text-center"></th>
                                @if (bShowOtherManager)
                                {
                                    <th class="text-center">Manager</th>
                                }
                                <th class="text-center">Deal #</th>
                                @*<th class="text-center">Eligible</th>*@
                                                <th class="text-center">Val</th>
                                                <th class="text-center">Stk #</th>
                                                <th class="text-center">Cond</th>
                                                <th class="text-center">Year</th>
                                                <th class="text-center">Make</th>
                                                <th class="text-center">Model</th>
                                                <th class="text-center">Miles</th>
                                                <th class="text-center">Bank</th>
                                                <th class="text-center">Term</th>
                                                <th class="text-center">Markup</th>
                                                <th class="text-center">Finance<br />Income</th>
                                                <th class="text-center">Service<br />Contract</th>
                                                <th class="text-center">Maint<br />Contract</th>
                                                <th class="text-center">GAP</th>
                                                <th class="text-center">Zurich</th>
                                                <th class="text-center">Select<br/>Protect</th>
                                                <th class="text-center">Tire and<br/>Wheel</th>
                                                <th class="text-center"></th>
                                                <th class="text-center">Additional Items</th>
                                                <th class="text-center">Total $</th>
                                                <th class="text-center">Product $</th>
                                                <th class="text-center">Non Core<br/>Product $</th>
                                                <th class="text-center">$ Due</th>
                                                <th class="text-center">BPP</th>
                                                @*<th class="text-center">Title Due</th>*@
                                                
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var deal in manager.AftermarketDealDetails)
                                            {
                                                if (deal.ShowroomValidatedBy != null || manager.FIManagerAssociateNumber == "000")
                                                {
                                                    dealIndex += 1;
                                                    var bValidated = false;
                                                    var bppValidated = false;
                                                    var validDeal = associateValidatedDeals.Find(x => x.DealKey == deal.DealKey);


                                                    if (validDeal != null)
                                                    {
                                                        bValidated = true;

                                                        if (validDeal.BPPPaid == true)
                                                        {
                                                            bppValidated = true;
                                                        }
                                                    }


                                                    var isHandy = "";
                                                    var bHandy = false;
                                                    if (deal.CertificationLevel != null && deal.CertificationLevel.ToUpper() == "HDM")
                                                    {
                                                        isHandy = "(H)";
                                                        bHandy = true;
                                                    }

                                                    var bEligible = true;
                                                    //Check to see if they are 10 years or older, have over 150K miles or just getting credit for Revenue
                                                    var currentYear = Model.YearId;

                                                    if (deal.VehicleYear != "")
                                                    {
                                                        var vehicleYear = Int32.Parse(deal.VehicleYear);
                                                        var vehicleMiles = Int32.Parse(deal.VehicleMiles);


                                                        if ((currentYear - vehicleYear) >= 12 || deal.BrandId == "AA" || bHandy || vehicleMiles >= 125000)
                                                        {
                                                            bEligible = false;
                                                        }

                                                        decimal otherItemAmount = 0;
                                                        if (deal.AftermarketItems.Count > 0)
                                                        {
                                                            foreach (var item in deal.AftermarketItems)
                                                            {
                                                                if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 4 && item.AftermarketId != 5 && item.AftermarketId != 20 && item.AftermarketId != 8)
                                                                {
                                                                    var profit = item.AftermarketPrice - item.AftermarketCost;
                                                                    otherItemAmount += profit;
                                                                }

                                                                if (item.AftermarketId == 4) //SELECT PROTECT
                                                                {
                                                                    SelectProtectAmount = item.AftermarketPrice - item.AftermarketCost;
                                                                }

                                                            }

                                                        }

                                                        decimal DealDollar = 0;
                                                        decimal ProductDollar = 0;

                                                        DealDollar = (deal.FinanceIncomeAmount + deal.VSCAmount + deal.MaintenanceAmount + deal.GAPAmount + deal.ZurichAmount + otherItemAmount);// 
                                                        ProductDollar = (deal.VSCAmount + deal.MaintenanceAmount + deal.GAPAmount + deal.ZurichAmount + otherItemAmount); // 

                                                        decimal dealMoneyDue = 0;

                                                        var itemMoneyDue = Model.MoneyDue.FindAll(x => x.StockNumber.Trim() == deal.VehicleStockNumber.Trim());

                                                        if (itemMoneyDue != null)
                                                        {
                                                            foreach (var money in itemMoneyDue)
                                                            {
                                                                dealMoneyDue += money.ControlBalance;
                                                            }
                                                        }

                                                        DealTotalMoneyDue += dealMoneyDue;

                                                        var moneyDueBGColor = "";
                                                        var moneyDueWarning = deal.DealKey + " Details";

                                                        if (dealMoneyDue > 0)
                                                        {
                                                            moneyDueBGColor = "background-color: #d2070769";
                                                            moneyDueWarning = "There is " + dealMoneyDue.ToString("C", nfi) + " due on this deal.";
                                                        }
                                                        else
                                                        {
                                                            moneyDueWarning = "";
                                                        }

                                                        var titleStatus = "";
                                                        var itemTitleDue = Model.TitleDue.FindAll(x => x.VIN.Trim() == deal.Trade1VIN.Trim() || x.VIN.Trim() == deal.Trade2VIN.Trim());

                                                        if (itemTitleDue != null && itemTitleDue.Count > 0)
                                                        {
                                                            var titleDue = itemTitleDue[0];
                                                            var ManagerNoStatus = true;

                                                            //if (titleDue.TitleDueBank)
                                                            //{
                                                            //    titleStatus += "Title Due from Bank, ";
                                                            //    ManagerNoStatus = false;
                                                            //}
                                                            if (titleDue.TitleDueCustomer == true)
                                                            {
                                                                titleStatus += "Title Due from Customer, ";
                                                                ManagerNoStatus = false;
                                                            }
                                                            //if (titleDue.TitleDueInterco)
                                                            //{
                                                            //    titleStatus += "Title Due from Interco, ";
                                                            //    ManagerNoStatus = false;
                                                            //}
                                                            //if (titleDue.TitleDueAuction)
                                                            //{
                                                            //    titleStatus += "Title Due from Auction, ";
                                                            //    ManagerNoStatus = false;
                                                            //}

                                                            //if (titleDue.LienDueBank)
                                                            //{
                                                            //    titleStatus += "Lien Due from Bank, ";
                                                            //    ManagerNoStatus = false;
                                                            //}
                                                            if (titleDue.LienDueCustomer)
                                                            {
                                                                titleStatus += "Lien Due from Customer, ";
                                                                ManagerNoStatus = false;
                                                            }

                                                            if (titleDue.OdomDueCustomer)
                                                            {
                                                                titleStatus += "Odom Due from Customer, ";
                                                                ManagerNoStatus = false;
                                                            }

                                                            if (titleDue.POADueCust)
                                                            {
                                                                titleStatus += "POA Due, ";
                                                                ManagerNoStatus = false;
                                                            }
                                                            if (titleDue.PayoffDueCust)
                                                            {
                                                                titleStatus += "Payoff Due, ";
                                                                ManagerNoStatus = false;
                                                            }
                                                            //if (titleDue.WaitingOutSTTitle)
                                                            //{
                                                            //    titleStatus += "Waiting Out/ST Title, ";
                                                            //    ManagerNoStatus = false;
                                                            //}
                                                            if (titleDue.DuplicateTitleAppliedFor)
                                                            {
                                                                titleStatus += "Dup Title Applied For, ";
                                                                ManagerNoStatus = false;
                                                            }
                                                            //if (titleDue.Other)
                                                            //{
                                                            //    titleStatus += "Other, ";
                                                            //    ManagerNoStatus = false;
                                                            //}

                                                            if (ManagerNoStatus && !titleDue.ClearTitle)
                                                            {
                                                                titleStatus = "No Status";
                                                            }

                                                            titleStatus = titleStatus.TrimEnd(' ').TrimEnd(',');
                                                        }

                                                        var titleDueBGColor = "";
                                                        var titleDueWarning = deal.DealKey + " Details";

                                                        if (titleStatus != "")
                                                        {
                                                            titleDueBGColor = "background-color: #d26e0769";
                                                            titleDueWarning = "There is a " + titleStatus + " on this deal, notify F and I Manager.";
                                                        }




                                                        var markup = (deal.APR - deal.BuyRate).ToString("0.##");

                                                        if (deal.VehicleCategory == "L")
                                                        {
                                                            markup = "L";
                                                        }

                                                <tr>
                                                    <td class="text-center">@dealIndex</td>
                                                    @if (bShowOtherManager)
                                                    {
                                                        <td>@deal.FandIManager</td>
                                                    }
                                                    <td class="text-center" style="@moneyDueBGColor @titleDueBGColor"><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank" title="@moneyDueWarning @titleDueWarning">@deal.DealKey</a></td>
                                                    @*<td class="text-center">
                                                        @if (bEligible)
                                                        {
                                                            <i class="fa fa-check" aria-hidden="true"></i>
                                                        }
                                                    </td>*@
                                                    <td class="text-center">
                                                        @if (bValidated)
                                                        {
                                                            <i class="fa fa-check" aria-hidden="true"></i>
                                                        }
                                                    </td>
                                                    <td class="text-center">@deal.VehicleStockNumber</td>
                                                    <td class="text-center">@deal.VehicleCondition @isHandy</td>
                                                    <td class="text-center">@deal.VehicleYear</td>
                                                    <td class="text-center">@deal.VehicleMake</td>
                                                    <td class="text-center">@deal.VehicleCarline</td>
                                                    <td class="text-center">@deal.VehicleMiles</td>
                                                    <td class="text-center">@deal.VehicleBank</td>
                                                    <td class="text-center">@deal.VehicleTerm</td>
                                                    <td class="text-center">@markup</td>
                                                    <td class="text-center">@deal.FinanceIncomeAmount</td>
                                                    <td class="text-center">@deal.VSCAmount</td>
                                                    <td class="text-center">@deal.MaintenanceAmount</td>
                                                    <td class="text-center">@deal.GAPAmount</td>
                                                    <td class="text-center">@deal.ZurichAmount</td>
                                                    <td class="text-center">@SelectProtectAmount.ToString("C", noSymbol)</td>
                                                    <td class="text-center">@deal.TireWheelAmount</td>
                                                    <td class="text-center"></td>
                                                    <td class="text-center">
                                                        @if (bValidated)
                                                        {
                                                        <a href="" id="link-@deal.DealKey">@otherItemAmount.ToString("C", noSymbol)</a>
                                                        if (deal.AftermarketItems.Count > 0)
                                                        {
                                                            <table class="table table-striped table-bordered" id="aftermarket-@deal.DealKey" style="display:none;position:absolute;width:40%;left: 25%; border:4px ridge #ccc">
                                                                <thead>
                                                                    <tr style="background-color:#d9edf7">
                                                                        <th>Item</th>
                                                                        <th class="text-center">Profit</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @foreach (var item in deal.AftermarketItems)
                                                                    {
                                                                        if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 20 && item.AftermarketId != 8)
                                                                        {
                                                                            var profit = item.AftermarketPrice - item.AftermarketCost;

                                                                            <tr>
                                                                                <td>@item.AftermarketName</td>
                                                                                <td>@profit</td>
                                                                            </tr>

                                                                        }
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        }

                                                        <script type="text/javascript">
                                                            $('#link-@deal.DealKey').hover(function (ev) {
                                                                $('#aftermarket-@deal.DealKey').stop(true, true).fadeIn();
                                                            }, function (ev) {
                                                                $('#aftermarket-@deal.DealKey').stop(true, true).fadeOut();
                                                            }).mousemove(function (ev) {
                                                                $('#aftermarket-@deal.DealKey').css({ left: ev.layerX + 10, top: ev.layerY + 10 });
                                                            });
                                                        </script>
                                                        }
                                                    </td>
                                                    <td class="text-center">@DealDollar.ToString("C", noSymbol)</td>
                                                    <td class="text-center">@ProductDollar.ToString("C", noSymbol)</td>
                                                    <td class="text-center"></td>
                                                    @*<td class="text-center"></td>*@
                                                    <td class="text-center">@dealMoneyDue.ToString("C", noSymbol)</td>
                                                    <td class="text-center">
                                                        @if (bppValidated)
                                                        {
                                                            <i class="fa fa-check" aria-hidden="true"></i>
                                                        }
                                                    </td>
                                                </tr>
                                                    }
                                                }
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr style="background-color:#d9edf7">
                                                @if (bShowOtherManager)
                                                {
                                                    <th class="text-center"></th>
                                                }
                                                <th class="text-center">Totals</th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center"></th>
                                                <th class="text-center">@TotalFinance</th>
                                                <th class="text-center">@TotalService</th>
                                                <th class="text-center">@TotalMaintenance</th>
                                                <th class="text-center">@TotalGAP</th>
                                                <th class="text-center">@TotalZurich</th>
                                                <th class="text-center">@TotalSelectProtect.ToString("C", noSymbol)</th>
                                                <th class="text-center">@TotalTireWheel</th>
                                                <th class="text-center"></th>
                                                <th class="text-center">@TotalOther</th>
                                                <th class="text-center">@TotalDealDollar.ToString("C", noSymbol)</th>
                                                <th class="text-center">@TotalProductDollar.ToString("C", noSymbol)</th>
                                                <th class="text-center"></th>
                                                
                                                @*<th class="text-center"></th>*@
                                                <th class="text-center">@DealTotalMoneyDue.ToString("C", noSymbol)</th>
                                                <th class="text-center"></th>
                                            </tr>
                                        </tfoot>
                                    </table>
                            }

                        </td>
                    </tr>
                    }
                    StoreTotalDeals += manager.AftermarketDealDetails.Count;
                }

                @{ 
                    decimal StoreAverageFinance = 0;
                    decimal StoreAverageService = 0;
                    decimal StoreAverageMaintenance = 0;
                    decimal StoreAverageGAP = 0;
                    decimal StoreAverageZurich = 0;
                    decimal StoreAverageLeaseWandT = 0;
                    decimal StoreAverageTireWheel = 0;
                    decimal StoreAverageSelectProtect = 0;
                    decimal StoreAverageOther = 0;
                    decimal StoreProductRatio = 0;

                    if (StoreFinanceCount > 0)
                    {
                        StoreAverageFinance = StoreTotalFinance / StoreFinanceCount;
                    }

                    if (StoreServiceCount > 0)
                    {
                        StoreAverageService = StoreTotalService / StoreServiceCount;
                    }

                    if (StoreMaintenanceCount > 0)
                    {
                        StoreAverageMaintenance = StoreTotalMaintenance / StoreMaintenanceCount;
                    }

                    if (StoreGAPCount > 0)
                    {
                        StoreAverageGAP = StoreTotalGAP / StoreGAPCount;
                    }

                    if (StoreZurichCount > 0)
                    {
                        StoreAverageZurich = StoreTotalZurich / StoreZurichCount;
                    }

                    if (StoreLeaseWandTCount > 0)
                    {
                        StoreAverageLeaseWandT = StoreTotalLeaseWandT / StoreLeaseWandTCount;
                    }

                    if (StoreTireWheelCount > 0)
                    {
                        StoreAverageTireWheel = StoreTotalTireWheel / StoreTireWheelCount;
                    }

                    if (StoreSelectProtectCount > 0)
                    {
                        StoreAverageSelectProtect = StoreTotalSelectProtect / StoreSelectProtectCount;
                    }

                    if (StoreOtherCount > 0)
                    {
                        StoreAverageOther = StoreTotalOther / StoreOtherCount;
                    }

                    if (StoreTotalDeals > 0)
                    {
                        StoreFinancePercent = (double)StoreFinanceCount / (double)StoreTotalDeals;
                        StoreServicePercent = ((double)StoreServiceCount + (double)StoreMaintenanceCount) / (double)StoreTotalDeals;
                        StoreMaintenancePercent = (double)StoreMaintenanceCount / (double)StoreTotalDeals;
                        StoreGAPPercent = (double)StoreGAPCount / (double)StoreFinanceCount;
                        StoreZurichPercent = (double)StoreZurichCount / (double)StoreTotalDeals;
                        StoreTireWheelPercent = (double)StoreTireWheelCount / (double)StoreTotalDeals;
                        StoreSelectProtectPercent = (double)StoreSelectProtectCount / (double)StoreTotalDeals;
                        StoreOtherPercent = (double)StoreOtherCount / (double)StoreTotalDeals;

                        StoreLeaseWandTPercent = (double)StoreLeaseWandTCount / (double)StoreLeaseCount;

                        StoreDollarPerCar = (StoreTotalFinance + StoreTotalService + StoreTotalMaintenance + StoreTotalGAP + StoreTotalZurich) / StoreTotalDeals;
                        StoreProductDollarPerCar = (StoreTotalService + StoreTotalMaintenance + StoreTotalGAP) / StoreTotalDeals;
                        StoreProductRatio = ((decimal)(StoreServiceCount + StoreMaintenanceCount + StoreGAPCount + StoreZurichCount + StoreSelectProtectCount + StoreTireWheelCount) / (decimal)StoreTotalDeals);
                    }


                }

            </tbody>
            <tfoot>
                <tr style="background-color:#d9edf7;font-size:11px;">
                    @if (Model.StoreId == "ALL")
                    {
                        <th class="text-center"></th>
                    }
                    <th class="text-center">Totals</th>
                    <th class="text-center">@StoreTotalDeals</th>
                    @*<th class="text-center">@StoreTotalEligibleDeals</th>*@
                    <th class="text-center">@StoreTotalShowroomUnvalidated</th>                    
                    <th class="text-center extra-right">@StoreTotalUnvalidated</th>
                    <th class="text-center aft-percent">@StoreFinancePercent.ToString("P", nfi)<br />(@StoreFinanceCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageFinance.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreServicePercent.ToString("P", nfi)<br />(@StoreServiceCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageService.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreMaintenancePercent.ToString("P", nfi)<br />(@StoreMaintenanceCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageMaintenance.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreGAPPercent.ToString("P", nfi)<br />(@StoreGAPCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageGAP.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreZurichPercent.ToString("P", nfi)<br />(@StoreZurichCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageZurich.ToString("C", nfi)</th>                    
                    <th class="text-center aft-percent">@StoreSelectProtectPercent.ToString("P", nfi)<br />(@StoreSelectProtectCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageSelectProtect.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreTireWheelPercent.ToString("P", nfi)<br />(@StoreTireWheelCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageTireWheel.ToString("C", nfi)</th>      
                    <th class="text-center aft-percent">@StoreLeaseWandTPercent.ToString("P", nfi)<br />(@StoreLeaseWandTCount of @StoreLeaseCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageLeaseWandT.ToString("C", nfi)</th>
                    <th class="text-center aft-percent">@StoreOtherPercent.ToString("P", nfi)<br />(@StoreOtherCount)</th>
                    <th class="text-center extra-right aft">@StoreAverageOther.ToString("C", nfi)</th>
                    <th class="text-center">@StoreTotalGross.ToString("C", nfi)</th>
                    <th class="text-center">@StoreDollarPerCar.ToString("C", nfi)</th>
                    <th class="text-center">@StoreProductDollarPerCar.ToString("C", nfi)</th>
                    @*<th class="text-center"><a href="@applicationPath/Reports/MoneyDue" target="_blank">@StoreMoneyDue.ToString("C", nfi) <br />of @StoreTotalMoneyDue.ToString("C", nfi)</a></th>*@
                    <th class="text-center">@Decimal.Round(StoreProductRatio,2)</th>
                    <th class="text-center">@StoreTotalMissedRevenue.ToString("C", nfi)</th>
                    <th class="text-center">@StoreTotalMissedCommission.ToString("C", nfi)</th>
                    <th class="text-center">@StoreTotalBPPValidated</th>

    @*<th class="text-center">0</th>
    <th class="text-center">0</th>*@       
                </tr>
            </tfoot>
        </table>
    </div>



                    }



@if (!Model.IncludeDeals)
{
    <script>
            $('#section1').DataTable({
                searching: false,
                sorting: true,
                ordering: true,
                dom: 'B',
                pageLength: -1,
                order: [[1, "desc"]],
                buttons: [
                    {
                    extend: 'copyHtml5', footer: true,
                    },
                    {
                        extend: 'excelHtml5', footer: true,
                    },
                    {
                        extend: 'pdfHtml5', footer: true,
                        orientation: 'landscape'
                    },
                    {
                        extend: 'print', footer: true,
                        orientation: 'landscape'
                    }],
                columnDefs: [
                  { type: 'any-number', targets: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] },
                ]

            });
    </script>
}

@section scripts
{


    <script src="~/Scripts/Chosen/chosen.jquery.js" type="text/javascript"></script>
    <script src="~/Scripts/Chosen/docsupport/prism.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/Chosen/docsupport/init.js" type="text/javascript" charset="utf-8"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#btnTogglePerUnit').click(function () {


                if ($('#btnTogglePerUnit').val() == 'Show Per Unit') {
                    $('.aft').show();
                    $('#btnTogglePerUnit').val("Hide Per Unit");
                }
                else {
                    $('.aft').hide();
                    $('#btnTogglePerUnit').val("Show Per Unit");
                }

            });
            $('#btnTogglePercentage').click(function () {
                if ($('#btnTogglePercentage').val() == 'Show Percentages') {
                    $('.aft-percent').show();
                    $('#btnTogglePercentage').val("Hide Percentages");
                }
                else {
                    $('.aft-percent').hide();
                    $('#btnTogglePercentage').val("Show Percentages");
                }

            });

        });
    </script>

}
