@model SalesCommission.Models.FIAssociateCommissionModel

@{
    ViewBag.Title = "F and I Associate Commission";
    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

    System.Globalization.NumberFormatInfo pay = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    pay.CurrencyDecimalDigits = 2;
    pay.PercentDecimalDigits = 1;
    pay.CurrencySymbol = "";

    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.CurrencySymbol = "";
    //nfi.PercentSymbol = "";

    System.Globalization.NumberFormatInfo rev = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    rev.CurrencyDecimalDigits = 0;
    rev.PercentDecimalDigits = 1;


    System.Globalization.NumberFormatInfo noSymbol = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    noSymbol.CurrencyDecimalDigits = 0;
    noSymbol.PercentDecimalDigits = 1;
    noSymbol.PercentPositivePattern = 1;
    noSymbol.CurrencySymbol = "";
    noSymbol.CurrencyGroupSeparator = "";


    var bIsAssociate = false;

    var bShowValues = false;
    if (DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 28))
    {
        bShowValues = true;
    }

    var bShowPay = false;
    DateTime today = DateTime.Today;
    DateTime endOfMonth = new DateTime(Model.YearId, Model.MonthId, DateTime.DaysInMonth(Model.YearId, Model.MonthId));
    if (DateTime.Now > endOfMonth)
    {
        bShowPay = true;
    }

    if ((bool)Session["IsCommissionAdmin"] == true)
    {
        bShowValues = true;
    }
    else
    {

    }

    if (Model.AssociateInformation.AssociateNumber != null && Session["AssociateId"] != null)
    {
        if (Model.AssociateInformation.AssociateNumber.Trim().ToLower() == Session["AssociateId"].ToString().Trim().ToLower())
        {
            bIsAssociate = true;
        }
    }
}

@section CSS
            {
<link rel="stylesheet" href="~/Scripts/Chosen/chosen.css">

    <script src="~/Scripts/jquery-ui.js"></script>
    <link href="~/Scripts/jquery-ui.css" rel="stylesheet" />
}
<style type="text/css">
    .commission-table {
        font-size: 11px;
    }

    .table thead > tr > th, .table tbody > tr > th, .table tfoot > tr > th, .table thead > tr > td, .table tbody > tr > td, .table tfoot > tr > td {
        padding: 6px;
    }

    .percent-highlight {
        background-color: yellow;
    }

    th.text-center.extra-right {
        border-right: 3px solid #dddddd;
    }

    td.text-center.extra-right {
        border-right: 3px solid #dddddd;
    }

    @@media print {
        .navbar {
            display: none;
        }

        body {
            padding-top: 0px;
        }

        .jumbotron {
            display: none;
        }

        a[href]:after {
            content: "";
        }

        .btn-primary {
            display: none;
        }

        .commission-table {
            font-size: 10px;
        }

        .table thead > tr > th, .table tbody > tr > th, .table tfoot > tr > th, .table thead > tr > td, .table tbody > tr > td, .table tfoot > tr > td {
            padding: 4px;
            line-height: 1.0em;
        }

        .associate-approval {
            background-color: #efefef;
        }

        hr {
            margin-top: 0px;
            margin-bottom: 0px;
        }

        .col-print-1 {
            width: 8%;
            float: left;
        }

        .col-print-2 {
            width: 16%;
            float: left;
        }

        .col-print-3 {
            width: 25%;
            float: left;
        }

        .col-print-4 {
            width: 33%;
            float: left;
        }

        .col-print-5 {
            width: 42%;
            float: left;
        }

        .col-print-6 {
            width: 50%;
            float: left;
        }

        .col-print-7 {
            width: 58%;
            float: left;
        }

        .col-print-8 {
            width: 66%;
            float: left;
        }

        .col-print-9 {
            width: 75%;
            float: left;
        }

        .col-print-10 {
            width: 83%;
            float: left;
        }

        .col-print-11 {
            width: 92%;
            float: left;
        }

        .col-print-12 {
            width: 100%;
            float: left;
        }

        .percent-highlight {
            background-color: lightgrey;
            -webkit-print-color-adjust: exact;
        }

        @@page {
            /*size: portrait;*/
            margin: 2cm;
        }
    }

    h5.editInfo {
        color: #428bca;
    }

        h5.editInfo:hover {
            text-decoration: underline;
            color: #428bca;
            cursor: pointer;
        }
</style>

@if (Model.AssociateInformation == null)
{
    <h2>The associate you requested could not be found.</h2>
}
    @*else if (Model.AssociateInformation.AssociateDeals == null)
        {
            <h2>The associate you requested has no deals for this month and year.</h2>
        }*@
else if ((bool)Session["IsCommissionAdmin"] == false && (bool)Session["IsAssociateAdmin"] == false && (Session["AssociateId"].ToString().ToUpper() != Model.AssociateId.ToUpper()))
{
    <h2>You are not authorized to view this Associate's Commission</h2>
}
else
{
    var nextMonthId = 0;
    var previousMonthId = 0;
    var nextMonthYearId = 0;
    var previousMonthYearId = 0;

    var currentMonth = new DateTime(Model.YearId, Model.MonthId, 1);
    var previousMonth = currentMonth.AddMonths(-1);
    var nextMonth = currentMonth.AddMonths(1);

    previousMonthId = previousMonth.Month;
    nextMonthId = nextMonth.Month;

    previousMonthYearId = previousMonth.Year;
    nextMonthYearId = nextMonth.Year;

    decimal TotalRevenueAdjustments = 0;
    decimal TotalCommissionAdjustments = 0;
    decimal FinanceAdjustments = 0;
    decimal ServiceAdjustments = 0;
    decimal GAPAdjustments = 0;
    decimal TotalDrawAmount = 0;
    decimal TotalBonusAmount = 0;

    <div class="row" style="margin-top:15px;">
        <div class="col-md-8">
            <h2>Commission for @Model.AssociateInformation.AssociateFirstName @Model.AssociateInformation.AssociateLastName for @Model.MonthId/@Model.YearId</h2>
        </div>
        <div class="col-md-2 text-right" style="margin-top:15px;">
            <input type="button" class="btn btn-primary" value="Print" onclick="window.print();return false;" />
        </div>
        <div class="col-md-2">
            <a href="@applicationPath/FICommission/ScoreCard/@Model.AssociateId/@Model.MonthId/@Model.YearId" class="btn btn-primary" style="margin-top:15px;float:right">View Score Card</a>

        </div>
    </div>
    <div class="row">
        <div class="col-xs-3">
            <p><strong>Hire Date:</strong> @Model.AssociateInformation.AssociateHireDate.ToShortDateString()</p>
            <p><strong>Department:</strong> @Model.AssociateInformation.AssociateDepartment</p>
            @if(Model.FIPayscales != null && Model.FIPayscales.Count > 0)
            {
                <p><strong>PayScale:</strong> @Model.FIPayscales[0].PlanName</p>
            }
        </div>
        <div class="col-xs-5">
            &nbsp;
        </div>
        <div class="col-xs-4 text-right">
            @if ((bool)Session["IsCommissionAdmin"] == true || (bool)Session["IsAssociateAdmin"] == true)
            {
                <select id="associate-select" class="form-control chosen-select">
                    <option>Go To Associate...</option>
                    @foreach (var associate in Model.FIManagerList)

                    {
                        <option value="@applicationPath/FICommission/Associate/@associate.AssociateLocation/@associate.AssociateNumber.Trim()/@Model.MonthId/@Model.YearId">@associate.AssociateFullName</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 text-left">
            <a href="@applicationPath/FICommission/NewAssociate/@Model.AssociateInformation.AssociateLocation/@Model.AssociateId/@previousMonthId/@previousMonthYearId" class="btn btn-primary" style="margin-top:15px;">< Previous Commission</a>
        </div>
        <div class="col-md-6 text-right">
            @if (nextMonth <= DateTime.Now)
            {
                <a href="@applicationPath/FICommission/NewAssociate/@Model.AssociateInformation.AssociateLocation/@Model.AssociateId/@nextMonthId/@nextMonthYearId" class="btn btn-primary" style="margin-top:15px;float:right">Next Commission ></a>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <h4>Monthly Summary</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <table class="table table-bordered table-striped" style="font-size:12px">
                <thead>
                    <tr style="background-color:#d9edf7;">
                        <th colspan="4"></th>
                        <th colspan="2" class="text-center">Month to Date</th>
                        <th></th>
                        <th colspan="4"></th>
                        <th></th>
                        <th colspan="4" class="text-center">Commission Lost Opportunity</th>
                    </tr>
                    <tr style="background-color:#d9edf7;">
                        <th class="text-center" colspan="4">Item</th>
                        <th class="text-center">Dollars</th>
                        <th class="text-center">Number Sold</th>
                        <th></th>
                        <th class="text-center">Per Unit</th>
                        <th class="text-center">Standard<br/>Per Unit</th>
                        <th class="text-center">Percentage</th>
                        <th class="text-center">Standard<br/>Percentage</th>
                        <th></th>
                        <th class="text-center">Standard<br/>Revenue</th>
                        <th class="text-center">Missed<br />Revenue</th>
                        <th class="text-center">Commission<br />Percentage</th>
                        <th class="text-center">Additional<br/>Commission Opportunity</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                        decimal TotalGross = 0;
                        decimal TotalProductGross = 0;
                        decimal TotalFinance = 0;
                        decimal TotalService = 0;
                        decimal TotalMaintenance = 0;
                        decimal TotalGAP = 0;
                        decimal TotalZurich = 0;
                        decimal TotalOther = 0;
                        //decimal TotalMoneyDue = 0;
                        decimal TotalLeaseWandT = 0;
                        decimal TotalTireWheel = 0;
                        decimal TotalSelectProtect = 0;

                        decimal AverageFinance = 0;
                        decimal AverageService = 0;
                        decimal AverageMaintenance = 0;
                        decimal AverageGAP = 0;
                        decimal AverageZurich = 0;
                        decimal AverageLeaseWandT = 0;
                        decimal AverageTireWheel = 0;
                        decimal AverageSelectProtect = 0;

                        decimal TotalDeals = 0;
                        decimal TotalEligibleDeals = 0;

                        int FinanceCount = 0;
                        int ServiceCount = 0;
                        int MaintenanceCount = 0;
                        int GAPCount = 0;
                        int ZurichCount = 0;
                        int LeaseCount = 0;
                        int LeaseWandTCount = 0;
                        int TireWheelCount = 0;
                        int SelectProtectCount = 0;
                        int OtherCount = 0;

                        double FinancePercent = 0;
                        double ServicePercent = 0;
                        //double JustServicePercent = 0;
                        double MaintenancePercent = 0;
                        double GAPPercent = 0;
                        double ZurichPercent = 0;
                        double LeaseWandTPercent = 0;
                        double TireWheelPercent = 0;
                        double SelectProtectPercent = 0;

                        decimal TotalDollarPerDeal = 0;
                        decimal ProductDollarPerDeal = 0;

                        //decimal TotalUnvalidated = 0;
                        //decimal TotalBPPValidated = 0;
                        decimal ShowroomUnvalidated = 0;


                        TotalRevenueAdjustments = Model.FIAdjustments.Where(y => y.AdjustmentLine == "REVENUE").Sum(x => x.AdjustmentAmount);
                        TotalCommissionAdjustments = Model.FIAdjustments.Where(y => y.AdjustmentLine == "COMMISSION").Sum(x => x.AdjustmentAmount);

                        FinanceAdjustments = Model.FIAdjustments.Where(y => y.AdjustmentLine == "REVENUE" && y.AdjustmentType == "FINANCE").Sum(x => x.AdjustmentAmount);
                        ServiceAdjustments = Model.FIAdjustments.Where(y => y.AdjustmentLine == "REVENUE" && y.AdjustmentType == "SERVICE").Sum(x => x.AdjustmentAmount);
                        GAPAdjustments = Model.FIAdjustments.Where(y => y.AdjustmentLine == "REVENUE" && y.AdjustmentType == "GAP").Sum(x => x.AdjustmentAmount);


                        if (Model.AftermarketDealDetails != null)
                        {
                            foreach (var deal in Model.AftermarketDealDetails)
                            {
                                if (deal.ShowroomValidatedBy == null)
                                {
                                    ShowroomUnvalidated += 1;
                                }
                                if (deal.ShowroomValidatedBy != null)
                                {
                                    //TotalGross += deal.DealGrossAmount;

                                    var bHandy = false;
                                    if (deal.CertificationLevel != null && deal.CertificationLevel.ToUpper() == "HDM")
                                    {
                                        bHandy = true;
                                    }

                                    if (deal.FinanceIncomeAmount > 0)
                                    {
                                        TotalFinance += deal.FinanceIncomeAmount;
                                        FinanceCount += 1;
                                    }

                                    if (deal.VSCAmount > 0)
                                    {
                                        TotalService += deal.VSCAmount;
                                        ServiceCount += 1;
                                    }

                                    if (deal.MaintenanceAmount > 0)
                                    {
                                        TotalMaintenance += deal.MaintenanceAmount;
                                        MaintenanceCount += 1;
                                    }

                                    if (deal.GAPAmount > 0)
                                    {
                                        TotalGAP += deal.GAPAmount;
                                        GAPCount += 1;
                                    }

                                    if (deal.ZurichAmount > 0)
                                    {
                                        TotalZurich += deal.ZurichAmount;
                                        ZurichCount += 1;
                                    }

                                    if (deal.TireWheelAmount > 0)
                                    {
                                        TotalTireWheel += deal.TireWheelAmount;
                                        TireWheelCount += 1;
                                    }

                                    if (deal.VehicleCategory == "L")
                                    {
                                        LeaseCount += 1;
                                    }

                                    decimal otherItemAmount = 0;

                                    if (deal.AftermarketItems.Count > 0)
                                    {

                                        var dealValidation = Model.DealApprovals.FindAll(x => x.DealKey.Trim() == deal.DealKey.Trim());
                                        var validation = new SalesCommission.Models.FIDealApproval();

                                        if (dealValidation != null && dealValidation.Count > 0)
                                        {
                                            validation = dealValidation[0];
                                        }



                                        foreach (var item in deal.AftermarketItems)
                                        {
                                            if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 4 && item.AftermarketId != 5 && item.AftermarketId != 20)
                                            {
                                                var amItem = new SalesCommission.Models.FIPayscaleAftermarket();
                                                if (Model.FIPayscaleAftermarket != null && Model.FIPayscaleAftermarket.Count > 0)
                                                {
                                                    amItem = Model.FIPayscaleAftermarket.Find(x => x.AftermarketIndex == item.AftermarketId);
                                                }

                                                decimal profit = 0;
                                                switch (item.AftermarketId)
                                                {
                                                    case 2:
                                                        if (amItem.CoreItem || validation.NitrogenPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 4:
                                                        if (amItem.CoreItem || validation.SelectProtectionPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 5:
                                                        if (amItem.CoreItem || validation.TireWheelPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 6:
                                                        if (amItem.CoreItem || validation.KeyReplacementPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 7:
                                                        if (amItem.CoreItem || validation.WindshieldProtectionPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 8:
                                                        if (amItem.CoreItem || validation.WearAndTearPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 9:
                                                        if (amItem.CoreItem || validation.SecureGuardPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 10:
                                                        if (amItem.CoreItem || validation.FitzTotalPackagePaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 11:
                                                        if (amItem.CoreItem || validation.RustInhibitUnderCoatPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 12:
                                                        if (amItem.CoreItem || validation.UndercoatingPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 13:
                                                        if (amItem.CoreItem || validation.RustInhibitorPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 14:
                                                        if (amItem.CoreItem || validation.DataDotsPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 15:
                                                        if (amItem.CoreItem || validation.PaintDentPaid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 16:
                                                        if (amItem.CoreItem || validation.Miscellaneous1Paid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 17:
                                                        if (amItem.CoreItem || validation.Miscellaneous2Paid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 18:
                                                        if (amItem.CoreItem || validation.Miscellaneous3Paid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;
                                                    case 19:
                                                        if (amItem.CoreItem || validation.Miscellaneous4Paid)
                                                        {
                                                            OtherCount += 1;
                                                            profit = item.AftermarketPrice - item.AftermarketCost;
                                                        }
                                                        break;

                                                }



                                                otherItemAmount += profit;
                                            }

                                            if (item.AftermarketId == 4) //SELECT PROTECT
                                            {
                                                SelectProtectCount += 1;
                                                var profit = item.AftermarketPrice - item.AftermarketCost;
                                                TotalSelectProtect += profit;
                                            }

                                            //if (item.AftermarketId == 8) // LEASE WEAR AND TEAR
                                            //{
                                            //    LeaseWandTCount += 1;
                                            //    var profit = item.AftermarketPrice - item.AftermarketCost;
                                            //    TotalLeaseWandT += profit;
                                            //}
                                        }

                                    }

                                    TotalOther += otherItemAmount;

                                }

                                TotalDeals = Model.AftermarketDealDetails.Count;
                            }


                            //if (Model.DealApprovals != null)
                            //{
                            //    TotalUnvalidated = Model.AftermarketDealDetails.Count - Model.DealApprovals.Count();

                            //    var bppValidatedDeals = Model.DealApprovals.FindAll(x => x.BPPPaid == true);
                            //    TotalBPPValidated = bppValidatedDeals.Count;
                            //}

                            TotalFinance += FinanceAdjustments;
                            TotalService += ServiceAdjustments;
                            TotalGAP += GAPAdjustments;

                            if (TotalDeals > 0)
                            {
                                FinancePercent = (double)FinanceCount / (double)TotalDeals;
                                ServicePercent = ((double)ServiceCount) / (double)TotalDeals;
                                //ServicePercent = ((double)ServiceCount + (double)MaintenanceCount + LeaseWandTCount) / (double)TotalEligibleDeals;
                                MaintenancePercent = (double)MaintenanceCount / (double)TotalDeals;
                                TireWheelPercent = (double)TireWheelCount / (double)TotalDeals;
                                GAPPercent = (double)GAPCount / (double)(FinanceCount - LeaseCount);
                                ZurichPercent = (double)ZurichCount / (double)TotalDeals;
                                LeaseWandTPercent = (double)LeaseWandTCount / (double)LeaseCount;
                                SelectProtectPercent = (double)SelectProtectCount / (double)TotalDeals;

                                TotalDollarPerDeal = (TotalFinance + TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect) / TotalDeals;
                                ProductDollarPerDeal = (TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect) / TotalDeals;
                            }

                            TotalGross = (TotalFinance + TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect);
                            TotalProductGross = (TotalService + TotalMaintenance + TotalGAP + TotalZurich + TotalOther + TotalLeaseWandT + TotalTireWheel + TotalSelectProtect);

                            if (FinanceCount > 0)
                            {
                                AverageFinance = TotalFinance / FinanceCount;
                            }

                            if (ServiceCount > 0)
                            {
                                AverageService = TotalService / ServiceCount;
                            }

                            if (MaintenanceCount > 0)
                            {
                                AverageMaintenance = TotalMaintenance / MaintenanceCount;
                            }

                            if (GAPCount > 0)
                            {
                                AverageGAP = TotalGAP / GAPCount;
                            }

                            if (ZurichCount > 0)
                            {
                                AverageZurich = TotalZurich / ZurichCount;
                            }

                            if (TireWheelCount > 0)
                            {
                                AverageTireWheel = TotalTireWheel / TireWheelCount;
                            }

                            if (LeaseWandTCount > 0)
                            {
                                AverageLeaseWandT = TotalLeaseWandT / LeaseWandTCount;
                            }
                            if (SelectProtectCount > 0)
                            {
                                AverageSelectProtect = TotalSelectProtect / SelectProtectCount;
                            }
                        }

                        //TOTAL ADJUSTMENTS, DRAWS AND BONUSES

                        //foreach (var adjustment in Model.FIAdjustments)
                        //{
                        //    if (adjustment.AdjustmentAmount != 0)
                        //    {
                        //        if (adjustment.AdjustmentLine == "REVENUE")
                        //        {
                        //            TotalRevenueAdjustments += adjustment.AdjustmentAmount;
                        //        }
                        //        if (adjustment.AdjustmentLine == "COMMISSION")
                        //        {
                        //            TotalCommissionAdjustments += adjustment.AdjustmentAmount;
                        //        }
                        //    }
                        //}

                        TotalBonusAmount = Model.AssociateInformation.AssociateBonus.Sum(x => x.BonusAmount);
                        TotalDrawAmount = (Model.AssociateInformation.AssociateDraws.Sum(x => x.DrawAmount) * -1);

                        decimal CommissionPercentage = (Model.CommissionPercentage / 100);
                        decimal Bonus1Percentage = (Model.ProductBonusPercent1 / 100);
                        decimal Bonus2Percentage = (Model.ProductBonusPercent2 / 100);
                        decimal Bonus3Percentage = (Model.ProductBonusPercent3 / 100);
                        decimal Bonus4Percentage = (Model.ProductBonusPercent4 / 100);
                        decimal Bonus5Percentage = (Model.ProductBonusPercent5 / 100);
                        decimal Bonus6Percentage = (Model.ProductBonusPercent6 / 100);
                        decimal Bonus7Percentage = (Model.ProductBonusPercent7 / 100);
                        decimal Bonus8Percentage = (Model.ProductBonusPercent8 / 100);

                        decimal Bonus1Threshold = Model.ProductBonusThreshold1;
                        decimal Bonus2Threshold = Model.ProductBonusThreshold2;
                        decimal Bonus3Threshold = Model.ProductBonusThreshold3;
                        decimal Bonus4Threshold = Model.ProductBonusThreshold4;
                        decimal Bonus5Threshold = Model.ProductBonusThreshold5;
                        decimal Bonus6Threshold = Model.ProductBonusThreshold6;
                        decimal Bonus7Threshold = Model.ProductBonusThreshold7;
                        decimal Bonus8Threshold = Model.ProductBonusThreshold8;

                        decimal TotalCommissionPercentage = 0;

                        TotalCommissionPercentage += CommissionPercentage;

                        var BaseCommission = (TotalGross * CommissionPercentage);

                        decimal ProductBonus1 = 0;
                        if(TotalProductGross > Bonus1Threshold)
                        {
                            ProductBonus1 = (TotalProductGross * Bonus1Percentage);
                            TotalCommissionPercentage += Bonus1Percentage;
                        }

                        decimal ProductBonus2 = 0;
                        if (TotalProductGross > Bonus2Threshold)
                        {
                            ProductBonus2 = (TotalProductGross * Bonus2Percentage);
                            TotalCommissionPercentage += Bonus2Percentage;
                        }

                        decimal ProductBonus3 = 0;
                        if (TotalProductGross > Bonus3Threshold)
                        {
                            ProductBonus3 = (TotalProductGross * Bonus3Percentage);
                            TotalCommissionPercentage += Bonus3Percentage;
                        }

                        decimal ProductBonus4 = 0;
                        if (TotalProductGross > Bonus4Threshold)
                        {
                            ProductBonus4 = (TotalProductGross * Bonus4Percentage);
                            TotalCommissionPercentage += Bonus4Percentage;
                        }

                        decimal ProductBonus5 = 0;
                        if (TotalProductGross > Bonus5Threshold)
                        {
                            ProductBonus5 = (TotalProductGross * Bonus5Percentage);
                            TotalCommissionPercentage += Bonus5Percentage;
                        }

                        decimal ProductBonus6 = 0;
                        if (TotalProductGross > Bonus6Threshold)
                        {
                            ProductBonus6 = (TotalProductGross * Bonus6Percentage);
                            TotalCommissionPercentage += Bonus6Percentage;
                        }

                        decimal ProductBonus7 = 0;
                        if (TotalProductGross > Bonus7Threshold)
                        {
                            ProductBonus7 = (TotalProductGross * Bonus7Percentage);
                            TotalCommissionPercentage += Bonus7Percentage;
                        }
                        decimal ProductBonus8 = 0;
                        if (TotalProductGross > Bonus8Threshold)
                        {
                            ProductBonus8 = (TotalProductGross * Bonus8Percentage);
                            TotalCommissionPercentage += Bonus8Percentage;
                        }

                        decimal TotalProductBonus = ProductBonus1 + ProductBonus2 + ProductBonus3 + ProductBonus4 + ProductBonus5 + ProductBonus6 + ProductBonus7 + ProductBonus8;

                        var TotalCommission = BaseCommission + TotalProductBonus;

                        var TotalCommissionDue = TotalCommission + TotalDrawAmount + TotalBonusAmount + TotalCommissionAdjustments;


                        decimal StandardFinancePerUnit = Model.StandardFinancePerUnit;
                        decimal StandardServicePerUnit = Model.StandardServicePerUnit;
                        decimal StandardMaintenancePerUnit = Model.StandardMaintenancePerUnit;
                        decimal StandardGAPPerUnit = Model.StandardGAPPerUnit;
                        decimal StandardZurichPerUnit = Model.StandardZurichPerUnit;
                        decimal StandardSelectProtectPerUnit = Model.StandardSelectProtectPerUnit;
                        decimal StandardTireWheelPerUnit = Model.StandardTireWheelPerUnit;

                        decimal StandardFinancePercentage = (Model.StandardFinancePercent / 100);
                        decimal StandardServicePercentage = (Model.StandardServicePercent / 100);
                        decimal StandardMaintenancePercentage = (Model.StandardMaintenancePercent / 100);
                        decimal StandardGAPPercentage = (Model.StandardGAPPercent / 100);
                        decimal StandardZurichPercentage = (Model.StandardZurichPercent / 100);
                        decimal StandardSelectProtectPercentage = (Model.StandardSelectProtectPercent / 100);
                        decimal StandardTireWheelPercentage = (Model.StandardTireWheelPercent / 100);

                        decimal StandardFinanceRevenue = 0;
                        decimal StandardServiceRevenue = 0;
                        decimal StandardMaintenanceRevenue = 0;
                        decimal StandardGAPRevenue = 0;
                        decimal StandardZurichRevenue = 0;
                        decimal StandardSelectProtectRevenue = 0;
                        decimal StandardTireWheelRevenue = 0;
                        decimal StandardCombinedRevenue = 0;

                        decimal MissedFinanceRevenue = 0;
                        decimal MissedServiceRevenue = 0;
                        decimal MissedMaintenanceRevenue = 0;
                        decimal MissedGAPRevenue = 0;
                        decimal MissedZurichRevenue = 0;
                        decimal MissedSelectProtectRevenue = 0;
                        decimal MissedTireWheelRevenue = 0;
                        decimal MissedTotalRevenue = 0;
                        decimal MissedCombinedRevenue = 0;

                        decimal MissedFinanceOpportunity = 0;
                        decimal MissedServiceOpportunity = 0;
                        decimal MissedMaintenanceOpportunity = 0;
                        decimal MissedGAPOpportunity = 0;
                        decimal MissedZurichOpportunity = 0;
                        decimal MissedSelectProtectOpportunity = 0;
                        decimal MissedTireWheelOpportunity = 0;
                        decimal MissedTotalOpportunity = 0;
                        decimal MissedCombinedOpportunity = 0;

                        StandardFinanceRevenue = Math.Round(StandardFinancePerUnit * TotalDeals * StandardFinancePercentage);
                        StandardServiceRevenue = Math.Round(StandardServicePerUnit * TotalDeals * StandardServicePercentage);
                        StandardMaintenanceRevenue = Math.Round(StandardMaintenancePerUnit * TotalDeals * StandardMaintenancePercentage);
                        StandardGAPRevenue = Math.Round(StandardGAPPerUnit * TotalDeals * StandardGAPPercentage);
                        StandardZurichRevenue = Math.Round(StandardZurichPerUnit * TotalDeals * StandardZurichPercentage);
                        StandardSelectProtectRevenue = Math.Round(StandardSelectProtectPerUnit * TotalDeals * StandardSelectProtectPercentage);
                        StandardTireWheelRevenue = Math.Round(StandardTireWheelPerUnit * TotalDeals * StandardTireWheelPercentage);

                        StandardCombinedRevenue = StandardSelectProtectRevenue + StandardTireWheelRevenue;

                        MissedFinanceRevenue = ((StandardFinanceRevenue - TotalFinance) > 0 ? (StandardFinanceRevenue - TotalFinance) : 0);
                        MissedServiceRevenue = ((StandardServiceRevenue - TotalService) > 0 ? (StandardServiceRevenue - TotalService) : 0);
                        MissedMaintenanceRevenue = ((StandardMaintenanceRevenue - TotalMaintenance) > 0 ? (StandardMaintenanceRevenue - TotalMaintenance) : 0);
                        MissedGAPRevenue = ((StandardGAPRevenue - TotalGAP) > 0 ? (StandardGAPRevenue - TotalGAP) : 0);
                        MissedZurichRevenue = ((StandardZurichRevenue - TotalZurich) > 0 ? (StandardZurichRevenue - TotalZurich) : 0);
                        MissedSelectProtectRevenue = ((StandardSelectProtectRevenue - TotalSelectProtect) > 0 ? (StandardSelectProtectRevenue - TotalSelectProtect) : 0);
                        MissedTireWheelRevenue = ((StandardTireWheelRevenue - TotalTireWheel) > 0 ? (StandardTireWheelRevenue - TotalTireWheel) : 0);

                        MissedCombinedRevenue = MissedSelectProtectRevenue + MissedTireWheelRevenue;

                        MissedFinanceOpportunity = Math.Round(MissedFinanceRevenue * CommissionPercentage);
                        MissedServiceOpportunity = Math.Round(MissedServiceRevenue * TotalCommissionPercentage);
                        MissedMaintenanceOpportunity = Math.Round(MissedMaintenanceRevenue * TotalCommissionPercentage);
                        MissedGAPOpportunity = Math.Round(MissedGAPRevenue * TotalCommissionPercentage);
                        MissedZurichOpportunity = Math.Round(MissedZurichRevenue * TotalCommissionPercentage);
                        MissedSelectProtectOpportunity = Math.Round(MissedSelectProtectRevenue * TotalCommissionPercentage);
                        MissedTireWheelOpportunity = Math.Round(MissedTireWheelRevenue * TotalCommissionPercentage);

                        MissedCombinedOpportunity = Math.Round((MissedSelectProtectOpportunity + MissedTireWheelOpportunity) * TotalCommissionPercentage);

                        MissedTotalOpportunity = MissedFinanceOpportunity + MissedServiceOpportunity + MissedMaintenanceOpportunity + MissedGAPOpportunity + MissedZurichOpportunity + MissedSelectProtectOpportunity + MissedTireWheelOpportunity;
                        MissedTotalRevenue = MissedFinanceRevenue + MissedServiceRevenue + MissedMaintenanceRevenue + MissedGAPRevenue + MissedZurichRevenue + MissedSelectProtectRevenue + MissedTireWheelRevenue;

                        decimal AverageTotalDollars = 0;
                        decimal AverageProductDollars = 0;
                        decimal ProductSoldRatio = 0;
                        decimal ProductCount = ServiceCount + MaintenanceCount + GAPCount + ZurichCount + SelectProtectCount + TireWheelCount + OtherCount;
                        if (TotalDeals > 0)
                        {
                            AverageTotalDollars = Math.Round(TotalGross / TotalDeals);
                            AverageProductDollars = Math.Round(TotalProductGross / TotalDeals);
                            ProductSoldRatio = ((ServiceCount + MaintenanceCount + GAPCount + ZurichCount + SelectProtectCount + TireWheelCount+ OtherCount) / TotalDeals);
                        }



                                    }



                    <tr style="border-bottom: 3px outset">
                        <td class="text-right" colspan="4">Total Number of Deals</td>
                        <td></td>
                        <td class="text-center"><strong>@TotalDeals</strong></td>
                        <td></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center"></td>
                        <td class="text-center">@MissedTotalRevenue.ToString("C", nfi)</td>
                        <td class="text-center"></td>
                        <td class="text-center">@MissedTotalOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Finance Reserve</td>
                        <td class="text-center">@TotalFinance.ToString("C", nfi)</td>
                        <td class="text-center">@FinanceCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalFinance / @FinanceCount = @AverageFinance.ToString("C", nfi)">@AverageFinance.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardFinancePerUnit</td>
                        <td class="text-center">@FinancePercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardFinancePercentage.ToString("P", nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardFinanceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedFinanceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@CommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedFinanceOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Service Contracts</td>
                        <td class="text-center">@TotalService.ToString("C", nfi)</td>
                        <td class="text-center">@ServiceCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalService / @ServiceCount = @AverageService.ToString("C", nfi)">@AverageService.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardServicePerUnit</td>
                        <td class="text-center">@ServicePercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardServicePercentage.ToString("P",nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardServiceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedServiceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedServiceOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Maintenance</td>
                        <td class="text-center">@TotalMaintenance.ToString("C", nfi)</td>
                        <td class="text-center">@MaintenanceCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalMaintenance / @MaintenanceCount = @AverageMaintenance.ToString("C", nfi)">@AverageMaintenance.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardMaintenancePerUnit</td>
                        <td class="text-center">@MaintenancePercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardMaintenancePercentage.ToString("P", nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardMaintenanceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedMaintenanceRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedMaintenanceOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">GAP</td>
                        <td class="text-center">@TotalGAP.ToString("C", nfi)</td>
                        <td class="text-center">@GAPCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalGAP / @GAPCount = @AverageGAP.ToString("C", nfi)">@AverageGAP.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardGAPPerUnit</td>
                        <td class="text-center">@GAPPercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardGAPPercentage.ToString("P", nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardGAPRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedGAPRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedGAPOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Zurich Shield</td>
                        <td class="text-center">@TotalZurich.ToString("C", nfi)</td>
                        <td class="text-center">@ZurichCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalZurich / @ZurichCount = @AverageZurich.ToString("C", nfi)">@AverageZurich.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardZurichPerUnit</td>
                        <td class="text-center">@ZurichPercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardZurichPercentage.ToString("P", nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardZurichRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedZurichRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedZurichOpportunity</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Select Protect</td>
                        <td class="text-center">@TotalSelectProtect.ToString("C", nfi)</td>
                        <td class="text-center">@SelectProtectCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalSelectProtect / @SelectProtectCount = @AverageSelectProtect.ToString("C", nfi)">@AverageSelectProtect.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardSelectProtectPerUnit</td>
                        <td class="text-center">@SelectProtectPercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardSelectProtectPercentage.ToString("P", nfi)</td>
                        <td></td>
                        @*<td class="text-center">@StandardSelectProtectRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedSelectProtectRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedSelectProtectOpportunity</td>*@
                        <td class="text-center">Combined</td>
                        <td class="text-center">Combined</td>
                        <td class="text-center">Combined</td>
                        <td class="text-center">Combined</td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Tire and Wheel</td>
                        <td class="text-center">@TotalTireWheel.ToString("C", nfi)</td>
                        <td class="text-center">@TireWheelCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalTireWheel / @TireWheelCount = @AverageTireWheel.ToString("C", nfi)">@AverageTireWheel.ToString("C", nfi)</a></td>
                        <td class="text-center">@StandardTireWheelPerUnit</td>
                        <td class="text-center">@TireWheelPercent.ToString("P", nfi)</td>
                        <td class="text-center">@StandardTireWheelPercentage.ToString("P", nfi)</td>
                        <td></td>
                        <td class="text-center">@StandardCombinedRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@MissedCombinedRevenue.ToString("C", nfi)</td>
                        <td class="text-center">@TotalCommissionPercentage.ToString("P", nfi)</td>
                        <td class="text-center">@MissedCombinedOpportunity</td>
                    </tr>
                    <tr style="border-bottom: 3px double">
                        <td class="text-right" colspan="4">Other</td>
                        <td class="text-center">@TotalOther.ToString("C",nfi)</td>
                        <td class="text-center">@OtherCount</td>
                        <td></td>
                        <td class="text-center">0</td>
                        <td class="text-center">0</td>
                        <td class="text-center">0</td>
                        <td class="text-center">0</td>
                        <td></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4"><strong>Total Dollars</strong></td>
                        <td class="text-center"><strong>@TotalGross.ToString("C", nfi)</strong></td>
                        <td class="text-center">@Decimal.Round(ProductSoldRatio,2)</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalGross / @TotalDeals = @AverageTotalDollars.ToString("C", nfi)">@AverageTotalDollars.ToString("C", nfi)</a></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center"></td>
                        <td class="text-center">@MissedTotalRevenue.ToString("C", nfi)</td>
                        <td class="text-center"></td>
                        <td class="text-center">@MissedTotalOpportunity.ToString("C", nfi)</td>
                    </tr>
                    <tr style="border-bottom: 3px double">
                        <td class="text-right" colspan="4"><strong>Total Product Sales</strong></td>
                        <td class="text-center"><strong>@TotalProductGross.ToString("C", nfi)</strong></td>
                        <td class="text-center">@ProductCount</td>
                        <td></td>
                        <td class="text-center"><a href="#" data-toggle="tooltip" title="@TotalProductGross / @TotalDeals = @AverageProductDollars.ToString("C", nfi)">@AverageProductDollars.ToString("C", nfi)</a></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                    </tr>


                    <tr>
                        <td class="text-right" style=""><strong>Revenue Adjustments (Memo)</strong></td>
                        <td class="text-center" style=""><strong>@TotalRevenueAdjustments.ToString("C", pay)</strong></td>
                        <td></td>
                        <td class="text-center" style=""><strong></strong></td>
                        <td class="text-center" style=""><strong></strong></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="9"></td>

                    </tr>
                    <tr>
                        <td class="text-right" style="font-size:14px;"><strong>Base Commission</strong></td>
                        <td class="text-center" style="font-size:14px;"><strong>@(TotalGross)</strong></td>
                        <td></td>
                        <td class="text-center" style="font-size:14px;"><strong>@CommissionPercentage.ToString("P",nfi)</strong></td>
                        <td class="text-center" style="font-size:14px;"><strong>@BaseCommission.ToString("C", pay)</strong></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="9"></td>

                    </tr>
                    <tr>
                        <td class="text-right"></td>
                        <td class="text-center"><strong>Product<br />Sales</strong></td>
                        <td class="text-center"><strong>Product<br />Levels</strong></td>
                        <td class="text-center"><strong>Product<br />Comm %</strong></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="9"><h4>Standards and Expectations</h4></td>

                    </tr>
                    <tr>
                        
                            <td class="text-right">Product Bonus 1</td>
                            @if (ProductBonus1 > 0)
                                {
                                <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                            }
                            else
                            {
                                <td class="text-center"></td>
                            }

                        <td class="text-center">@Bonus1Threshold</td>
                        <td class="text-center">@Bonus1Percentage.ToString("P",nfi)</td>
                        <td class="text-center">@ProductBonus1.ToString("C", pay)</td>

                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="5">1. @Model.StandardsExpectations1</td>
                        <td class="text-center" colspan="4">
                        @if (Model.StandardsExpectations5 != null && Model.StandardsExpectations5 != "")
                        {
                            @:5. @Model.StandardsExpectations5
                        }
                        </td>

                    </tr>
                    <tr>

                            <td class="text-right">Product Bonus 2</td>
                        @if (ProductBonus2 > 0)
                        {
                            <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                        }
                        else
                        {
                            <td class="text-center"></td>
                        }

                        <td class="text-center">@Bonus2Threshold</td>
                        <td class="text-center">@Bonus2Percentage.ToString("P", nfi)</td>
                        <td class="text-center">@ProductBonus2.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="5">2. @Model.StandardsExpectations2</td>
                        <td class="text-center" colspan="4">
                            @if (Model.StandardsExpectations6 != null && Model.StandardsExpectations6 != "")
                            {
                                @:6. @Model.StandardsExpectations6
                        }
                        </td>
                    </tr>
                    <tr>

                        <td class="text-right">Product Bonus 3</td>
                        @if (ProductBonus3 > 0)
                        {
                            <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                        }
                        else
                        {
                            <td class="text-center"></td>
                        }
                        
                        <td class="text-center">@Bonus3Threshold</td>
                        <td class="text-center">@Bonus3Percentage.ToString("P", nfi)</td>
                        <td class="text-center">@ProductBonus3.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="5">3. @Model.StandardsExpectations3</td>
                        <td class="text-center" colspan="4">
                            @if (Model.StandardsExpectations7 != null && Model.StandardsExpectations7 != "")
                            {
                                @:7. @Model.StandardsExpectations7
                        }
                        </td>
                    </tr>
                    <tr >

                        <td class="text-right">Product Bonus 4</td>
                        @if (ProductBonus4 > 0)
                        {
                            <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                        }
                        else
                        {
                            <td class="text-center"></td>
                        }
                        <td class="text-center">@Bonus4Threshold</td>
                        <td class="text-center">@Bonus4Percentage.ToString("P", nfi)</td>
                        <td class="text-center">@ProductBonus4.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td class="text-center"></td>
                        <td class="text-center" colspan="5">4. @Model.StandardsExpectations4</td>
                        <td class="text-center" colspan="4">
                            @if (Model.StandardsExpectations8 != null && Model.StandardsExpectations8 != "")
                            {
                                @:8. @Model.StandardsExpectations8
                        }
                        </td>
                    </tr>
                    @if (Bonus5Percentage > 0)
                    {
                        <tr>

                            <td class="text-right">Product Bonus 5</td>
                            @if (ProductBonus5 > 0)
                            {
                                <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                            }
                            else
                            {
                                <td class="text-center"></td>
                            }
                            <td class="text-center">@Bonus5Threshold</td>
                            <td class="text-center">@Bonus5Percentage.ToString("P", nfi)</td>
                            <td class="text-center">@ProductBonus5.ToString("C", pay)</td>
                            <td class="text-center"></td>
                            <td class="text-center"></td>
                            <td class="text-center" colspan="9"></td>                        
                        </tr>
                    }
                    @if (Bonus6Percentage > 0)
                    {
                        <tr >

                            <td class="text-right">Product Bonus 6</td>
                            @if (ProductBonus6 > 0)
                            {
                                <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                            }
                            else
                            {
                                <td class="text-center"></td>
                            }
                            <td class="text-center">@Bonus6Threshold</td>
                            <td class="text-center">@Bonus6Percentage.ToString("P", nfi)</td>
                            <td class="text-center">@ProductBonus6.ToString("C", pay)</td>
                            <td class="text-center"></td>
                            <td class="text-center"></td>
                            <td class="text-center" colspan="9"></td>
                        </tr>
                    }
                    @if (Bonus7Percentage > 0)
                    {
                        <tr >

                            <td class="text-right">Product Bonus 7</td>
                            @if (ProductBonus7 > 0)
                            {
                                <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                            }
                            else
                            {
                                <td class="text-center"></td>
                            }
                            <td class="text-center">@Bonus7Threshold</td>
                            <td class="text-center">@Bonus7Percentage.ToString("P", nfi)</td>
                            <td class="text-center">@ProductBonus7.ToString("C", pay)</td>
                            <td class="text-center"></td>
                            <td class="text-center"></td>
                            <td class="text-center" colspan="9"></td>
                        </tr>
                    }
                    @if (Bonus8Percentage > 0)
                    {
                        <tr>

                            <td class="text-right">Product Bonus 8</td>
                            @if (ProductBonus8 > 0)
                            {
                                <td class="text-center">@TotalProductGross.ToString("C", nfi)</td>
                            }
                            else
                            {
                                <td class="text-center"></td>
                            }
                            <td class="text-center">@Bonus8Threshold</td>
                            <td class="text-center">@Bonus8Percentage.ToString("P", nfi)</td>
                            <td class="text-center">@ProductBonus8.ToString("C", pay)</td>
                            <td class="text-center"></td>
                            <td class="text-center"></td>
                            <td class="text-center" colspan="9"></td>
                        </tr>
                    }
                    <tr style="border-top: 3px double">
                        <td class="text-right" colspan="4"><strong>Total Bonus</strong></td>
                        <td class="text-center"><strong>@TotalProductBonus.ToString("C",pay)</strong></td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                    <tr style="border-bottom: 3px double">
                        <td class="text-right" style="font-size:14px;" colspan="4"><strong>Total Commission</strong></td>
                        <td class="text-center" style="font-size:14px;"><strong>@TotalCommission.ToString("C", pay)</strong></td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Additional Bonus</td>
                        <td class="text-center">@TotalBonusAmount.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Draws</td>
                        <td class="text-center">@TotalDrawAmount.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                    <tr>
                        <td class="text-right" colspan="4">Commission Adjustments</td>
                        <td class="text-center">@TotalCommissionAdjustments.ToString("C", pay)</td>
                        <td class="text-center"></td>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr style="background-color:#d9edf7;font-size:16px;">
                        <th class="text-right" colspan="4">Commission Due</th>
                        <th class="text-center">@TotalCommissionDue.ToString("C", pay)</th>
                        <th class="text-center"></th>
                        <td></td>
                        <td class="text-center" colspan="9"></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        @*<div class="col-xs-3">

            <h4>Standards and Expectations</h4>
            <ol>
                <li>Maintain $1,500 per VSC</li>
                <li>50% of Revenue must come from Product Sales</li>
                <li>Maintain CSI</li>
                <li>Chargebacks 90 days</li>
            </ol>
                    
        </div>*@
    </div>
    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-xs-4">
            <h4>Adjustments</h4>
            @if (Model.FIAdjustments != null)
                        {
                <table class="table table-bordered" style="font-size:11px">
                    <thead>
                        <tr style="background-color:#d9edf7;">
                            <th>Type</th>
                            <th>Line</th>
                            <th>Amount</th>
                            <th>Deal #</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var adjustment in Model.FIAdjustments)
                        {
                            if (adjustment.AdjustmentAmount != 0)
                            {
                                <tr>
                                    <td>@adjustment.AdjustmentType</td>
                                    <td>@adjustment.AdjustmentLine</td>
                                    <td>@adjustment.AdjustmentAmount.ToString("C", nfi)</td>
                                    <td>
                                        <a href="@applicationPath/Sales/DealDetail/@adjustment.DealNumber" target="_blank">@adjustment.DealNumber</a>
                                    </td>
                                </tr>

                                //if (adjustment.AdjustmentLine == "REVENUE")
                                //{
                                //    TotalRevenueAdjustments += adjustment.AdjustmentAmount;
                                //}
                                //if (adjustment.AdjustmentLine == "COMMISSION")
                                //{
                                //    TotalCommissionAdjustments += adjustment.AdjustmentAmount;
                                //}
                            }
                        }
                    </tbody>
                </table>

                if ((bool)Session["IsCommissionAdmin"] == true)
                {
                    <h5><a href="@applicationPath/FICommission/Adjustments/@Model.AssociateInformation.AssociateNumber.Trim()/@Model.MonthId/@Model.YearId" target="_blank"><i class="fa fa-pencil" aria-hidden="true"></i> Edit Adjustments</a></h5>
                }
            }
</div>
        <div class="col-xs-4">


    <h4>Bonus</h4>

    <table class="table table-bordered table-striped" style="font-size:12px">
        <thead>
            <tr style="background-color:#d9edf7">
                <th>Date</th>
                <th>Comment</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.AssociateInformation.AssociateBonus != null)
            {
                foreach (var bonus in Model.AssociateInformation.AssociateBonus)
                {
                    <tr>
                        <td>@bonus.BonusDate</td>
                        <td>@bonus.BonusComments</td>
                        <td>@bonus.BonusAmount.ToString("C")</td>
                    </tr>
                    //TotalBonusAmount += bonus.BonusAmount;
                }
            }
        </tbody>
        <tfoot>
            <tr>
                <th></th>
                <th></th>
                <th>@TotalBonusAmount.ToString("C")</th>
            </tr>
        </tfoot>
    </table>
            @if ((bool)Session["IsCommissionAdmin"] == true)
            {
                <h5 class="editInfo" rel="@Model.AssociateInformation.AssociateNumber.Trim()"><i class="fa fa-pencil" aria-hidden="true"></i> Bonus and Advances (Draws)</h5>
            }

</div>
        <div class="col-xs-4">


            @if ((bool)Session["IsCommissionAdmin"] == true || DateTime.Now > new DateTime(Model.YearId, Model.MonthId, 1).AddMonths(1))
            {
                <h4>Amount Paid</h4>

                <table class="table table-bordered table-striped" style="font-size:12px">
                    <thead>
                        <tr style="background-color:#d9edf7">
                            <th>Date</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.AssociateInformation.AssociateDraws != null)
                        {
                            foreach (var draw in Model.AssociateInformation.AssociateDraws)
                            {
                                <tr>
                                    <td>@draw.DrawDate.ToShortDateString()</td>
                                    <td>@draw.DrawAmount.ToString("C")</td>
                                </tr>
                                //TotalDrawAmount += draw.DrawAmount;
                            }
                        }
                        @{
                            TotalDrawAmount = (TotalDrawAmount * -1);
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th></th>
                            <th>@TotalDrawAmount.ToString("C")</th>
                        </tr>
                    </tfoot>
                </table>
                            }

        </div>

    </div>

    <div class="row" style="page-break-after: always;">
        <div class="col-md-12">
            <hr />
        </div>
    </div>

                                            <div class="row">
                                                <div class="col-md-12">
                                                    <h4>@Model.AssociateInformation.AssociateLastName Deals <a href="@applicationPath/FICommission/ValidateDeals/@Model.AssociateInformation.AssociateLocation/@Model.AssociateId/@Model.MonthId/@Model.YearId" class="btn btn-primary" style="margin-top:0px;margin-bottom:15px;float:right">Validate Deals</a></h4>
                                                    @if (Model.AftermarketDealDetails != null)// && associate.AssociateDeals.Count > 0)
                                                    {

                                                        decimal EligibleFinanceTotal = 0;
                                                        decimal EligibleServiceTotal = 0;
                                                        decimal EligibleMaintenanceTotal = 0;
                                                        decimal EligibleGAPTotal = 0;
                                                        decimal EligibleZurichTotal = 0;
                                                        decimal EligibleOtherTotal = 0;
                                                        decimal EligibleMoneyDueTotal = 0;
                                                        decimal EligibleSelectProtectTotal = 0;
                                                        decimal EligibleTireAndWheelTotal = 0;
                                                        decimal EligibleOtherCountTotal = 0;

                            decimal dealIndex = 0;

                                                        <table class="table table-bordered table-striped" style="font-size:11px">
                                                            <thead>
                                                                <tr style="background-color:#d9edf7">
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">Deal #</th>
                                                                    <th class="text-center">Val</th>
                                                                    <th class="text-center">Stk #</th>
                                                                    <th class="text-center">Cond</th>
                                                                    <th class="text-center">Year</th>
                                                                    <th class="text-center">Make</th>
                                                                    <th class="text-center">Model</th>
                                                                    <th class="text-center">Miles</th>
                                                                    <th class="text-center">Bank</th>
                                                                    <th class="text-center">Term</th>
                                                                    <th class="text-center">Markup</th>
                                                                    <th class="text-center">Finance<br />Income</th>
                                                                    <th class="text-center">Service<br />Contract</th>
                                                                    <th class="text-center">Maint<br />Contract</th>
                                                                    <th class="text-center">GAP</th>
                                                                    <th class="text-center">Zurich</th>
                                                                    <th class="text-center">Select<br/>Protect</th>
                                                                    <th class="text-center">Tire and<br/>Wheel</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">Additional Items</th>
                                                                    <th class="text-center">Total $</th>
                                                                    <th class="text-center">Product $</th>
                                                                    <th class="text-center">$ Due</th>
                                                                    <th class="text-center">BPP</th>
                                                                    @*<th class="text-center">Title Due</th>
                                                                    *@
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var deal in Model.AftermarketDealDetails)
                                                                {
                                                                    if (deal.ShowroomValidatedBy != null)
                                                                    {
                                                                        dealIndex += 1;
                                                                        var isHandy = "";
                                                                        var bHandy = false;
                                                                        if (deal.CertificationLevel != null && deal.CertificationLevel.ToUpper() == "HDM")
                                                                        {
                                                                            isHandy = "(H)";
                                                                            bHandy = true;
                                                                        }

                                                                        var bValidated = false;
                                                                        var bppValidated = false;
                                                                        var validDeal = Model.DealApprovals.Find(x => x.DealKey == deal.DealKey);

                                                                        if (validDeal != null)
                                                                        {
                                                                            bValidated = true;

                                                                            if (validDeal.BPPPaid == true)
                                                                            {
                                                                                bppValidated = true;
                                                                            }
                                                                        }

                                                                        //Check to see if they are 10 years or older, have over 150K miles or just getting credit for Revenue
                                                                        var currentYear = Model.YearId;


                                                                        if (deal.VehicleYear != "")
                                                                        {


                                                                            var vehicleYear = Int32.Parse(deal.VehicleYear);
                                                                            var vehicleMiles = Int32.Parse(deal.VehicleMiles);

                                                                            var showDeals = true;
                                                                            if (showDeals) //(currentYear - vehicleYear) < 12 && deal.BrandId != "AA" && !bHandy && vehicleMiles < 125000
                                                                            {
                                                                                decimal otherItemAmount = 0;
                                                                                decimal otherItemCount = 0;

                                                                                decimal SelectProtectAmount = 0;

                                                                                if (deal.AftermarketItems.Count > 0)
                                                                                {

                                                                                    var dealValidation = Model.DealApprovals.FindAll(x => x.DealKey.Trim() == deal.DealKey.Trim());
                                                                                    var validation = new SalesCommission.Models.FIDealApproval();

                                                                                    if (dealValidation != null && dealValidation.Count > 0)
                                                                                    {
                                                                                        validation = dealValidation[0];
                                                                                    }

                                                                                    foreach (var item in deal.AftermarketItems)
                                                                                    {
                                                                                        if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 4 && item.AftermarketId != 5 && item.AftermarketId != 20)// && item.AftermarketId != 8)
                                                                                        {

                                                                                            var amItem = new SalesCommission.Models.FIPayscaleAftermarket();
                                                                                            if (Model.FIPayscaleAftermarket != null && Model.FIPayscaleAftermarket.Count > 0)
                                                                                            {
                                                                                                amItem = Model.FIPayscaleAftermarket.Find(x => x.AftermarketIndex == item.AftermarketId);
                                                                                            }

                                                                                            decimal profit = 0;
                                                                                            switch (item.AftermarketId)
                                                                                            {
                                                                                                case 2:
                                                                                                    if (amItem.CoreItem || validation.NitrogenPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 4:
                                                                                                    if (amItem.CoreItem || validation.SelectProtectionPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 5:
                                                                                                    if (amItem.CoreItem || validation.TireWheelPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 6:
                                                                                                    if (amItem.CoreItem || validation.KeyReplacementPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 7:
                                                                                                    if (amItem.CoreItem || validation.WindshieldProtectionPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 8:
                                                                                                    if (amItem.CoreItem || validation.WearAndTearPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 9:
                                                                                                    if (amItem.CoreItem || validation.SecureGuardPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 10:
                                                                                                    if (amItem.CoreItem || validation.FitzTotalPackagePaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 11:
                                                                                                    if (amItem.CoreItem || validation.RustInhibitUnderCoatPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 12:
                                                                                                    if (amItem.CoreItem || validation.UndercoatingPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 13:
                                                                                                    if (amItem.CoreItem || validation.RustInhibitorPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 14:
                                                                                                    if (amItem.CoreItem || validation.DataDotsPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 15:
                                                                                                    if (amItem.CoreItem || validation.PaintDentPaid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 16:
                                                                                                    if (amItem.CoreItem || validation.Miscellaneous1Paid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 17:
                                                                                                    if (amItem.CoreItem || validation.Miscellaneous2Paid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 18:
                                                                                                    if (amItem.CoreItem || validation.Miscellaneous3Paid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;
                                                                                                case 19:
                                                                                                    if (amItem.CoreItem || validation.Miscellaneous4Paid)
                                                                                                    {
                                                                                                        profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                        otherItemCount += 1;
                                                                                                    }
                                                                                                    break;

                                                                                            }


                                                                                            otherItemAmount += profit;
                                                                                        }
                                                                                        if(item.AftermarketId == 4)
                                                                                        {
                                                                                            SelectProtectAmount = item.AftermarketPrice - item.AftermarketCost;
                                                                                        }
                                                                                    }

                                                                                }

                                                                                decimal EligibleDealDollar = 0;
                                                                                decimal EligibleProductDollar = 0;

                                                                                EligibleDealDollar = (deal.FinanceIncomeAmount + deal.VSCAmount + deal.MaintenanceAmount + deal.GAPAmount + deal.ZurichAmount + deal.TireWheelAmount + SelectProtectAmount + otherItemAmount);//
                                                                                EligibleProductDollar = (deal.VSCAmount + deal.MaintenanceAmount + deal.GAPAmount + deal.ZurichAmount + deal.TireWheelAmount + SelectProtectAmount + otherItemAmount); //

                                                                                decimal dealMoneyDue = 0;

                                                                                var itemMoneyDue = Model.MoneyDue.FindAll(x => x.StockNumber.Trim() == deal.VehicleStockNumber.Trim());

                                                                                if (itemMoneyDue != null)
                                                                                {
                                                                                    foreach (var money in itemMoneyDue)
                                                                                    {
                                                                                        dealMoneyDue += money.ControlBalance;
                                                                                    }
                                                                                }

                                                                                var moneyDueBGColor = "";
                                                                                var moneyDueWarning = deal.DealKey + " Details";

                                                                                if (dealMoneyDue > 0)
                                                                                {
                                                                                    moneyDueBGColor = "background-color: #d2070769";
                                                                                    moneyDueWarning = "There is $" + dealMoneyDue.ToString("C", nfi) + " due on this deal.";
                                                                                }
                                                                                else
                                                                                {
                                                                                    moneyDueWarning = "";
                                                                                }

                                                                                var titleStatus = "";
                                                                                var itemTitleDue = Model.TitleDue.FindAll(x => x.VIN.Trim() == deal.Trade1VIN.Trim() || x.VIN.Trim() == deal.Trade2VIN.Trim());

                                                                                if (itemTitleDue != null && itemTitleDue.Count > 0)
                                                                                {
                                                                                    var titleDue = itemTitleDue[0];
                                                                                    var ManagerNoStatus = true;

                                                                                    //if (titleDue.TitleDueBank)
                                                                                    //{
                                                                                    //    titleStatus += "Title Due from Bank, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}
                                                                                    if (titleDue.TitleDueCustomer == true)
                                                                                    {
                                                                                        titleStatus += "Title Due from Customer, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }
                                                                                    //if (titleDue.TitleDueInterco)
                                                                                    //{
                                                                                    //    titleStatus += "Title Due from Interco, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}
                                                                                    //if (titleDue.TitleDueAuction)
                                                                                    //{
                                                                                    //    titleStatus += "Title Due from Auction, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}

                                                                                    //if (titleDue.LienDueBank)
                                                                                    //{
                                                                                    //    titleStatus += "Lien Due from Bank, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}
                                                                                    if (titleDue.LienDueCustomer)
                                                                                    {
                                                                                        titleStatus += "Lien Due from Customer, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }

                                                                                    if (titleDue.OdomDueCustomer)
                                                                                    {
                                                                                        titleStatus += "Odom Due from Customer, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }

                                                                                    if (titleDue.POADueCust)
                                                                                    {
                                                                                        titleStatus += "POA Due, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }
                                                                                    if (titleDue.PayoffDueCust)
                                                                                    {
                                                                                        titleStatus += "Payoff Due, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }
                                                                                    //if (titleDue.WaitingOutSTTitle)
                                                                                    //{
                                                                                    //    titleStatus += "Waiting Out/ST Title, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}
                                                                                    if (titleDue.DuplicateTitleAppliedFor)
                                                                                    {
                                                                                        titleStatus += "Dup Title Applied For, ";
                                                                                        ManagerNoStatus = false;
                                                                                    }
                                                                                    //if (titleDue.Other)
                                                                                    //{
                                                                                    //    titleStatus += "Other, ";
                                                                                    //    ManagerNoStatus = false;
                                                                                    //}

                                                                                    if (ManagerNoStatus && !titleDue.ClearTitle)
                                                                                    {
                                                                                        titleStatus = "No Status";
                                                                                    }

                                                                                    titleStatus = titleStatus.TrimEnd(' ').TrimEnd(',');
                                                                                }

                                                                                var titleDueBGColor = "";
                                                                                var titleDueWarning = deal.DealKey + " Details";

                                                                                if (titleStatus != "")
                                                                                {
                                                                                    titleDueBGColor = "background-color: #d26e0769";
                                                                                    titleDueWarning = "There is a " + titleStatus + " on this deal, notify F and I Manager.";
                                                                                }
                                                                                var markup = (deal.APR - deal.BuyRate).ToString("0.##");

                                                                                if (deal.VehicleCategory == "L")
                                                                                {
                                                                                    markup = "L";
                                                                                }
                                                                                <tr>
                                                                                    <td class="text-center">@dealIndex</td>
                                                                                    <td class="text-center" style="@moneyDueBGColor @titleDueBGColor"><a href="@applicationPath/Sales/DealDetail/@deal.DealKey" target="_blank" title="@moneyDueWarning @titleDueWarning">@deal.DealKey</a></td>
                                                                                    <td class="text-center">
                                                                                        @if (bValidated)
                                                                        {
                                                                                            <i class="fa fa-check" aria-hidden="true"></i>
                                                                                        }
                                                                                    </td>
                                                                                    <td class="text-center">@deal.VehicleStockNumber</td>
                                                                                    <td class="text-center">@deal.VehicleCondition @isHandy</td>
                                                                                    <td class="text-center">@deal.VehicleYear</td>
                                                                                    <td class="text-center">@deal.VehicleMake</td>
                                                                                    <td class="text-center">@deal.VehicleCarline</td>
                                                                                    <td class="text-center">@deal.VehicleMiles</td>
                                                                                    <td class="text-center">@deal.VehicleBank</td>
                                                                                    <td class="text-center">@deal.VehicleTerm</td>
                                                                                    <td class="text-center">@markup</td>
                                                                                    <td class="text-center">@deal.FinanceIncomeAmount</td>
                                                                                    <td class="text-center">@deal.VSCAmount</td>
                                                                                    <td class="text-center">@deal.MaintenanceAmount</td>
                                                                                    <td class="text-center">@deal.GAPAmount</td>
                                                                                    <td class="text-center">@deal.ZurichAmount</td>
                                                                                    <td class="text-center">@SelectProtectAmount.ToString("C", noSymbol)</td>
                                                                                    <td class="text-center">@deal.TireWheelAmount</td>
                                                                                    <td class="text-center"></td>
                                                                                    <td class="text-center">
                                                                                        @if (true)//(bValidated)
                                                                    {                       
                                                                                            @otherItemCount @:-
                                                                                             <a href="" id="link-@deal.DealKey">@otherItemAmount.ToString("C", noSymbol)</a>
                                                                                            if (deal.AftermarketItems.Count > 0)
                                                                                            {
                                                                                                var dealValidation = Model.DealApprovals.FindAll(x => x.DealKey.Trim() == deal.DealKey.Trim());
                                                                                                var validation = new SalesCommission.Models.FIDealApproval();

                                                                                                if (dealValidation != null && dealValidation.Count > 0)
                                                                                                {
                                                                                                    validation = dealValidation[0];
                                                                                                }

                                                                                                <table class="table table-striped table-bordered" id="aftermarket-@deal.DealKey" style="display:none;position:absolute;width:40%;left: 25%; border:4px ridge #ccc">
                                                                                                    <thead>
                                                                                                        <tr style="background-color:#d9edf7">
                                                                                                            <th>Item</th>
                                                                                                            <th class="text-center">Profit</th>
                                                                                                        </tr>
                                                                                                    </thead>
                                                                                                    <tbody>
                                                                                                        @foreach (var item in deal.AftermarketItems)
                                                                                                        {
                                                                                                            if (item.AftermarketId != 1 && item.AftermarketId != 3 && item.AftermarketId != 4 && item.AftermarketId != 5 && item.AftermarketId != 20)// && item.AftermarketId != 8)
                                                                                                            {
                                                                                                                var profit = item.AftermarketPrice - item.AftermarketCost;
                                                                                                                var style = "";

                                                                                                                var amItem = new SalesCommission.Models.FIPayscaleAftermarket();
                                                                                                                if (Model.FIPayscaleAftermarket != null && Model.FIPayscaleAftermarket.Count > 0)
                                                                                                                {
                                                                                                                    amItem = Model.FIPayscaleAftermarket.Find(x => x.AftermarketIndex == item.AftermarketId);
                                                                                                                }

                                                                                                                switch (item.AftermarketId)
                                                                                                                {
                                                                                                                    case 2:
                                                                                                                        if (amItem.CoreItem || validation.NitrogenPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 4:
                                                                                                                        if (amItem.CoreItem || validation.SelectProtectionPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 5:
                                                                                                                        if (amItem.CoreItem || validation.TireWheelPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 6:
                                                                                                                        if (amItem.CoreItem || validation.KeyReplacementPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 7:
                                                                                                                        if (amItem.CoreItem || validation.WindshieldProtectionPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 8:
                                                                                                                        if (amItem.CoreItem || validation.WearAndTearPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 9:
                                                                                                                        if (amItem.CoreItem || validation.SecureGuardPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 10:
                                                                                                                        if (amItem.CoreItem || validation.FitzTotalPackagePaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 11:
                                                                                                                        if (amItem.CoreItem || validation.RustInhibitUnderCoatPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 12:
                                                                                                                        if (amItem.CoreItem || validation.UndercoatingPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 13:
                                                                                                                        if (amItem.CoreItem || validation.RustInhibitorPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 14:
                                                                                                                        if (amItem.CoreItem || validation.DataDotsPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 15:
                                                                                                                        if (amItem.CoreItem || validation.PaintDentPaid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 16:
                                                                                                                        if (amItem.CoreItem || validation.Miscellaneous1Paid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 17:
                                                                                                                        if (amItem.CoreItem || validation.Miscellaneous2Paid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 18:
                                                                                                                        if (amItem.CoreItem || validation.Miscellaneous3Paid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    case 19:
                                                                                                                        if (amItem.CoreItem || validation.Miscellaneous4Paid)
                                                                                                                        {
                                                                                                                            style = "style=background-color:yellow;";
                                                                                                                        }
                                                                                                                        break;

                                                                                                                }

                                                                                                                <tr>
                                                                                                                    <td @style>@item.AftermarketName</td>
                                                                                                                    <td @style>@profit</td>
                                                                                                                </tr>

                                                                                                            }
                                                                    }
                                                                                                    </tbody>
                                                                                                </table>
                                                                                            }

                                                                                            <script type="text/javascript">
                                                                                                $('#link-@deal.DealKey').hover(function (ev) {
                                                                                                    $('#aftermarket-@deal.DealKey').stop(true, true).fadeIn();
                                                                }, function (ev) {
                                                                                                    $('#aftermarket-@deal.DealKey').stop(true, true).fadeOut();
                                                                }).mousemove(function (ev) {
                                                                                                    $('#aftermarket-@deal.DealKey').css({ left: ev.layerX + 10, top: ev.layerY + 10 });
                                                                });
                                                                                            </script>
                                                                                        }
                                                                                    </td>

                                                                                    <td class="text-center">@EligibleDealDollar.ToString("C", noSymbol)</td>
                                                                                    <td class="text-center">@EligibleProductDollar.ToString("C", noSymbol)</td>
                                                                                    <td class="text-center">@dealMoneyDue.ToString("C", nfi)</td>
                                                                                    <td class="text-center">
                                                                                        @if (bppValidated)
                                                                {
                                                                                            <i class="fa fa-check" aria-hidden="true"></i>
                                                                                        }
                                                                                    </td>
                                                                                    @*<td class="text-center"></td>
                                                                                    *@
                                                                                </tr>

                                                                                EligibleFinanceTotal += deal.FinanceIncomeAmount;
                                                                                EligibleServiceTotal += deal.VSCAmount;
                                                                                EligibleMaintenanceTotal += deal.MaintenanceAmount;
                                                                                EligibleGAPTotal += deal.GAPAmount;
                                                                                EligibleZurichTotal += deal.ZurichAmount;

                                                                                EligibleSelectProtectTotal += SelectProtectAmount;
                                                                                EligibleTireAndWheelTotal += deal.TireWheelAmount;

                                                                                if (otherItemAmount > 0)
                                                                                {
                                                                                    EligibleOtherTotal += otherItemAmount;
                                                                                }
                                                                                EligibleMoneyDueTotal += dealMoneyDue;
                                                                                EligibleOtherCountTotal += otherItemCount;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            </tbody>
                                                            <tfoot>

                                                                @{

                                                                    decimal EligibleDealDollarTotal = 0;
                                                                    decimal EligibleProductDollarTotal = 0;

                                                                    decimal EligibleDealDollarAverage = 0;
                                                                    decimal EligibleProductDollarAverage = 0;


                                                                    EligibleDealDollarTotal = (EligibleFinanceTotal + EligibleServiceTotal + EligibleMaintenanceTotal + EligibleGAPTotal + EligibleZurichTotal + EligibleOtherTotal + EligibleSelectProtectTotal + EligibleTireAndWheelTotal);//
                                                                    EligibleProductDollarTotal = (EligibleServiceTotal + EligibleMaintenanceTotal + EligibleGAPTotal + EligibleZurichTotal + EligibleOtherTotal + EligibleSelectProtectTotal + EligibleTireAndWheelTotal); //

                                                                    if (TotalDeals > 0)
                                                                    {
                                                                        EligibleDealDollarAverage = EligibleDealDollarTotal / (TotalDeals);
                                                                        EligibleProductDollarAverage = EligibleProductDollarTotal / (TotalDeals);
                                                                    }

                                                                    decimal EligibleFinanceAverage = 0;
                                                                    decimal EligibleServiceAverage = 0;
                                                                    decimal EligibleMaintenanceAverage = 0;
                                                                    decimal EligibleGAPAverage = 0;
                                                                    decimal EligibleZurichAverage = 0;
                                                                    decimal EligibleOtherAverage = 0;
                                                                    decimal EligibleSelectProtectAverage = 0;
                                                                    decimal EligibleTireWheelAverage = 0;

                                                                    if (TotalDeals > 0)
                                                                    {
                                                                        EligibleFinanceAverage = EligibleFinanceTotal / (TotalDeals);
                                                                        EligibleServiceAverage = EligibleServiceTotal / (TotalDeals);
                                                                        EligibleMaintenanceAverage = EligibleMaintenanceTotal / (TotalDeals);
                                                                        EligibleGAPAverage = EligibleGAPTotal / (TotalDeals);
                                                                        EligibleZurichAverage = EligibleZurichTotal / (TotalDeals);
                                                                        EligibleOtherAverage = EligibleOtherTotal / (TotalDeals);
                                                                        EligibleSelectProtectAverage = EligibleSelectProtectTotal / (TotalDeals); ;
                                                                        EligibleTireWheelAverage = EligibleTireAndWheelTotal / (TotalDeals); ;
                                                                    }
                                                                }

                                                                <tr style="background-color:#d9edf7">
                                                                    <th></th>
                                                                    <th class="text-center">Totals</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">@TotalDeals Deals</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">@EligibleFinanceTotal<br />@EligibleFinanceAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleServiceTotal<br />@EligibleServiceAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleMaintenanceTotal<br />@EligibleMaintenanceAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleGAPTotal<br />@EligibleGAPAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleZurichTotal<br />@EligibleZurichAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleSelectProtectTotal.ToString("C", nfi)<br />@EligibleSelectProtectAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleTireAndWheelTotal.ToString("C", nfi)<br />@EligibleTireWheelAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">@EligibleOtherCountTotal - @EligibleOtherTotal.ToString("C", noSymbol)<br />@EligibleOtherAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleDealDollarTotal<br />@EligibleDealDollarAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleProductDollarTotal<br />@EligibleProductDollarAverage.ToString("C", nfi)</th>
                                                                    <th class="text-center">@EligibleMoneyDueTotal.ToString("C", nfi)</th>
                                                                    <th class="text-center"></th>
                                                                    @*<th class="text-center"></th>
                                                                    *@
                                                                </tr>
                                                                <tr style="background-color:#d9edf7">
                                                                    <th></th>
                                                                    <th class="text-center">Revenue<br/>Adjustments</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">@FinanceAdjustments<br/>@(EligibleFinanceTotal + FinanceAdjustments)</th>
                                                                    <th class="text-center">@ServiceAdjustments<br/>@(EligibleServiceTotal + ServiceAdjustments)</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center">@GAPAdjustments<br />@(EligibleGAPTotal + GAPAdjustments)</th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    <th class="text-center"></th>
                                                                    @*<th class="text-center"></th>
                                                                    *@
                                                                </tr>
                                                            </tfoot>
                                                        </table>
                                                                    }
                                                </div>
                                            </div>
                                            <div class="row" style="page-break-after: always;">
                                                <div class="col-md-12">
                                                    <hr />
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <h4>
                                                        @Model.AssociateInformation.AssociateLastName Money Due</h4>
                                                    @{var moneyDueItems = Model.MoneyDue.FindAll(x => x.FIManagerNumber.Trim() == Model.AssociateId.Trim());

                                                        if (moneyDueItems != null)
                                                        {
                                                            decimal locationBalance = 0;
                                                            decimal locationBank = 0;
                                                            decimal locationCustomer = 0;
                                                            var locationDays = 0;
                                                            double locationAvgDays = 0;

                                                            foreach (var moneyDue in moneyDueItems)
                                                            {
                                                                locationBalance += moneyDue.ControlBalance;

                                                                if (moneyDue.DueFrom.Contains("106"))
                                                                {
                                                                    locationBank += moneyDue.ControlBalance;
                                                                }
                                                                else if (moneyDue.DueFrom.Contains("111"))
                                                                {
                                                                    locationCustomer += moneyDue.ControlBalance;
                                                                }

                                                                locationDays += moneyDue.ScheduleDays;

                                                            }

                                                            locationAvgDays = (double)locationDays / (double)moneyDueItems.Count();

                                                            <table id="money-due-@Model.AssociateId" class="table table-bordered table table-striped" style="font-size:11px;">
                                                                <thead>
                                                                    <tr style="background-color:#d9edf7">
                                                                        <th class="text-center">Stock #</th>
                                                                        <th class="text-center">Deal #</th>
                                                                        <th class="text-center">Schedule<br />Days</th>
                                                                        <th class="text-center">Deal Date</th>
                                                                        <th class="text-center">Due From</th>
                                                                        <th class="text-center">Customer #</th>
                                                                        <th class="text-center">Control<br />Balance</th>
                                                                        <th class="text-center">Customer Name</th>
                                                                        <th class="text-center">Business<br />Phone</th>
                                                                        <th class="text-center">Residential<br />Phone</th>
                                                                        <th class="text-center">Sales Manager</th>
                                                                        <th class="text-center">FI Manager</th>
                                                                        <th class="text-center">Bank Name</th>
                                                                        <th class="text-center">Last Updated</th>
                                                                        <th class="text-center">Funded/Notes</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @foreach (var moneyDue in moneyDueItems)
                                                                    {
                                                                        var moneyDueHistory = Model.MoneyDueHistory.FindAll(x => x.Location == moneyDue.Location && x.CustomerNumber == moneyDue.CustomerNumber && x.DueFrom == moneyDue.DueFrom).OrderByDescending(x => x.CommentOrder).ToList();
                                                                        var currentHistory = new SalesCommission.Models.MoneyDue();

                                                                        if (moneyDueHistory != null && moneyDueHistory.Count > 0)
                                                                        {
                                                                            currentHistory = moneyDueHistory[0];
                                                                        }

                                                                        <tr>
                                                                            <td class="text-center">@moneyDue.StockNumber</td>
                                                                            <td class="text-center">
                                                                                @if (moneyDue.DealNumber != "")
                                                                                {
                                                                                    <a href="@applicationPath/Sales/DealDetail/@moneyDue.Location@moneyDue.DealNumber" target="_blank">@moneyDue.Location@moneyDue.DealNumber</a>
                                                                                }
                                                                            </td>
                                                                            <td class="text-center">@moneyDue.ScheduleDays</td>
                                                                            <td class="text-center">@moneyDue.DealDate.ToShortDateString()</td>

                                                                            @if (moneyDue.DueFrom.Contains("106"))
                                                                            {
                                                                                <td class="text-center">Bank</td>
                                                                            }
                                                                            else if (moneyDue.DueFrom.Contains("111"))
                                                                            {
                                                                                <td class="text-center">Customer</td>
                                                                            }


                                                                            <td class="text-center">@moneyDue.CustomerNumber</td>
                                                                            <td class="text-center">@moneyDue.ControlBalance.ToString("C", nfi)</td>
                                                                            <td class="text-center">@moneyDue.CustomerName</td>
                                                                            <td class="text-center">@moneyDue.BusinessPhone</td>
                                                                            <td class="text-center">@moneyDue.ResidencePhone</td>
                                                                            <td class="text-center">@moneyDue.SalesManager</td>
                                                                            <td class="text-center">@moneyDue.FIManager</td>
                                                                            <td class="text-center">@moneyDue.BankName</td>
                                                                            <td class="text-center">
                                                                                @if (currentHistory.FundedStatus == "BOOKED" || currentHistory.FundedStatus == "FUNDED")
                                                                                {
                                                                                    @:@currentHistory.CommentUser - @currentHistory.CommentDate.ToShortDateString()
                                                                                }
                                                                                <br />
                                                                                <a class="editMoneyDueInfo" data-customer-number="@moneyDue.CustomerNumber" data-due-from="@moneyDue.DueFrom" data-location="@moneyDue.Location"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
                                                                            </td>
                                                                            <td class="text-center">
                                                                                @currentHistory.FundedStatus<br />
                                                                                @if (currentHistory.RootCause != null && currentHistory.RootCause != "")
                                                                                {
                                                                                    @currentHistory.RootCause<br />
                                                                                }
                                                                                @if (currentHistory.Comment != null && currentHistory.Comment != "")
                                                                                {
                                                                                    <a href="#" data-toggle="tooltip" title="@currentHistory.Comment">
                                                                                        <i class="fa fa-comments-o" aria-hidden="true"></i>
                                                                                    </a>
                                                                                }
                                                                            </td>
                                                                        </tr>

                                                                    }
                                                                </tbody>
                                                                <tfoot>
                                                                    <tr style="background-color:#d9edf7">
                                                                        <th class="text-center">@moneyDueItems.Count()</th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center">Avg Days:<br />@Math.Round(locationAvgDays)</th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center">@locationBalance</th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                        <th class="text-center"></th>
                                                                    </tr>
                                                                </tfoot>
                                                            </table>
                                                        }
                                                    }
</div>
                                            </div>
                                                                        

                                                                    }

@section Scripts
{
<script src="~/Scripts/Chosen/chosen.jquery.js" type="text/javascript"></script>
<script src="~/Scripts/Chosen/docsupport/prism.js" type="text/javascript" charset="utf-8"></script>
<script src="~/Scripts/Chosen/docsupport/init.js" type="text/javascript" charset="utf-8"></script>

    <script type="text/javascript">

        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();

                $('#associate-select').on('change', function () {
                    var url = $(this).val(); // get selected value
                    if (url) { // require a URL
                        window.location = url; // redirect
                    }
                    return false;
                });
            

            $('#select-anchor').change(function () {
                var targetPosition = $("#" + $(this).val()).offset().top - 50;
                $('html,body').animate({ scrollTop: targetPosition }, 'slow');
            });

            var dialogWidth = 0;

            dialogWidth = ($(window).width() * .75);

            if ($(window).width() > 1199) {
                dialogWidth = 1200;
            }

            $('body').on('click', '.editInfo', function (event) {

                var id = $(this).attr('rel');
                var url = "@applicationPath/FICommission/BonusAndDraws/@Model.AssociateInformation.AssociateLocation/" + id + "/@Model.MonthId/@Model.YearId";
                var dialogBox = $("<div>");

                $(dialogBox).dialog({
                    resizable: false,
                    height: "auto",
                    width: dialogWidth,
                    position: { my: "center", at: "top+25%", of: window },
                    title: 'FI Associate Bonus and Advances (Draws)',
                    modal: true,
                    open: function (event, ui) {
                        $(this).load(url);
                        //$('#BonusDraws').validate();
                    },
                    buttons: {
                        "Save": function () {
                            var $this = this;
                            var form = $('#BonusDraws', $this);
                            //if (!$(form).valid()) {
                            //    return false;
                            //}

                            $.ajax({
                                async: false,
                                type: 'POST',
                                url: form.attr("action"),
                                data: $(form).serialize(),
                                success: $($this).dialog("close").dialog("destroy").remove()
                            });

                            location.reload();
                        },

                        "Close": function () {
                            $(this).dialog("close");
                            $(this).empty();
                        }
                    }
                });
                $(dialogBox).dialog('open');
            });





            $('body').on('click', '.editMoneyDueInfo', function (event) {
                var customer = $(this).attr("data-customer-number");
                var moneyFrom = $(this).attr("data-due-from");
                var location = $(this).attr("data-location");

                var url = "@applicationPath/Reports/UpdateMoneyDue/" + customer + "/" + location + "/" + moneyFrom;
                var dialogBox = $("<div>");

                $(dialogBox).dialog({
                    resizable: false,
                    height: "auto",
                    width: dialogWidth,
                    position: { my: "center", at: "top+25%", of: window },
                    title: 'Update Money Due Report',
                    modal: true,
                    open: function (event, ui) {
                        $(this).load(url);
                        //$('#BonusDraws').validate();
                    },
                    buttons: {
                        "Save": function () {
                            var $this = this;
                            var form = $('#UpdateMoneyDue', $this);
                            //if (!$(form).valid()) {
                            //    return false;
                            //}

                            $.ajax({
                                async: false,
                                type: 'POST',
                                url: form.attr("action"),
                                data: $(form).serialize(),
                                success: $($this).dialog("close").dialog("destroy").remove()
                            });

                            location.reload();
                        },

                        "Close": function () {
                            $(this).dialog("close");
                            $(this).empty();
                        }
                    }
                });
                $(dialogBox).dialog('open');
            });
        });

        
    </script>
}



